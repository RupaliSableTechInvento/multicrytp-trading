{"version":3,"sources":["../src/server.js"],"names":["SoketConnection","io","on","socket","console","log","id","token","decoded","jwt","verify","env","App_key","curentUserEmail","email","isEmailFound","users","find","item","push","socketId","forEach","usersModel","findOneAndUpdate","$set","isActive","friends","_id","err","doc","pending","all_friends","list","slice","i","status","senderEmail","to","emit","msgObj","sender","data","dataObj","date","Date","isRead","messagesModel","create","message","index","reciever","keys"],"mappings":"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","file":"server.js","sourcesContent":["function SoketConnection() {\r\n  io.on('connection', function(socket) {\r\n    console.log(\"On Connection=>\", socket.id);\r\n\r\n\r\n    socket.on('getActiveList', function(token) {\r\n\r\n      var decoded = jwt.verify(token, env.App_key);\r\n      curentUserEmail = decoded.email;\r\n      const isEmailFound = users.find(item => item && item.email && item.email == curentUserEmail);\r\n      //console.log(\"isEmailFound in users\", users, isEmailFound);\r\n      if (!isEmailFound) {\r\n        users.push({\r\n            email: curentUserEmail,\r\n            socketId: socket.id\r\n          })\r\n          //console.log(\"Email Not present=>\", users, curentUserEmail);\r\n      } else {\r\n\r\n        users.forEach(item => {\r\n            if (item.email == curentUserEmail) {\r\n              item.email = curentUserEmail;\r\n              item.socketId = socket.id;\r\n\r\n            }\r\n\r\n            // item.email = curentUserEmail,\r\n            //   item.socketId = socket.id\r\n          })\r\n          //console.log(\"Email present=>\", users, curentUserEmail);\r\n      }\r\n\r\n\r\n\r\n      if (curentUserEmail) {\r\n        usersModel.findOneAndUpdate({ \"email\": curentUserEmail }, { $set: { isActive: \"active\" } }, { friends: 1, _id: 0 }, function(err, doc) {\r\n          if (err) {\r\n            //console.log(\"error in io connection.=>\", err);\r\n            // res.json(err); \r\n\r\n          } else {\r\n            friends = [];\r\n            pending = [];\r\n            all_friends = [];\r\n            // //console.log(\"friends list: \" + doc);\r\n            var list = doc.friends.slice();\r\n            //console.log(list);\r\n\r\n            for (var i in list) {\r\n              if (list[i].status == \"Friend\") {\r\n                friends.push(list[i]);\r\n                // //console.log(\"users[list[i].senderEmail]\", users, users[list[i].senderEmail]);\r\n                users.forEach(item => {\r\n                  //console.log(\"In friends Item ==>\", item);\r\n                  if (item.email && list[i].senderEmail == item.email) {\r\n                    //console.log(\"item.socketId, curentUserEmail \", item.socketId, curentUserEmail);\r\n                    io.to(item.socketId).emit('friend_me', curentUserEmail);\r\n                    io.emit('friend_all', curentUserEmail);\r\n                  }\r\n                })\r\n\r\n              } else if (list[i].status == \"Pending\") {\r\n                pending.push(list[i]);\r\n              } else {\r\n                continue;\r\n              }\r\n            }\r\n\r\n\r\n            io.to(socket.id).emit('friend_list', friends);\r\n            io.to(socket.id).emit('pending_list', pending);\r\n\r\n\r\n            //  io.emit('users', users);\r\n          }\r\n        });\r\n      }\r\n\r\n\r\n    })\r\n\r\n\r\n\r\n    socket.on('private_message', function(msgObj) {\r\n      //console.log(\"private message\", msgObj);\r\n      var decoded = jwt.verify(msgObj.token, env.App_key);\r\n      var sender = decoded.email;\r\n      var data = msgObj.dataObj;\r\n      data.sender = sender;\r\n      data.date = new Date();\r\n      data.isRead = false;\r\n      //   //console.log(\"Data for message==>\", data);\r\n      messagesModel.create(data, function(err, message) {\r\n        if (err) { //console.log(\"Error in add message\", err) } else {\r\n\r\n\r\n          //   //console.log(\"In msg==> \", users, message);\r\n\r\n          users.forEach((item, index) => {\r\n            if (item && item.email == data.reciever) {\r\n              //   //console.log(\"Reciever found=>> \", item.email, data.reciever);\r\n\r\n              io.to(item.socketId).emit('Notification_for_msg', message);\r\n            }\r\n          })\r\n\r\n\r\n\r\n\r\n        }\r\n      })\r\n\r\n\r\n\r\n\r\n\r\n    });\r\n\r\n\r\n    //console.log(\"Connection :User is connected  \", socket.id, email);\r\n\r\n    // io.to(socket.id).emit('handle', email);\r\n\r\n\r\n    // const isEmailFound = users.find(item => item && item.email && item.email == email);\r\n\r\n    // users[email] = socket.id;\r\n    keys[socket.id] = email;\r\n    //console.log(\"Users list : \" + users);\r\n    //console.log(\"keys list : \" + keys);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    socket.on('disconnect', function() {\r\n      console.log(\"disconned call\", socket.id);\r\n      // // var decoded = jwt.verify(token, env.App_key);\r\n      // // var curentUserEmail = decoded.email;\r\n      // socket.disconnect(true);\r\n      // usersModel.findOneAndUpdate({ \"email\": curentUserEmail }, { $set: { isActive: \"inactive\" } },\r\n      //   function(err, doc) {\r\n      //     if (err) {\r\n      //       // res.json(err);\r\n      //     } else {\r\n      //       //console.log(\"logout=>\", doc)\r\n      //     }\r\n      //   });\r\n\r\n      // // delete global.email;\r\n      // // email = null;\r\n      // users.forEach((item, index) => {\r\n      //   if (item && item.email == curentUserEmail) {\r\n      //     users.splice(index, 1);\r\n      //   }\r\n      // })\r\n      // delete socket.id;\r\n      // //console.log(\"After Disconnect Users List==>\", users);\r\n      // // delete users[keys[socket.id]];\r\n      // // delete keys[socket.id];\r\n      // io.emit('users', users);\r\n      // // //console.log(users);\r\n    });\r\n  });\r\n\r\n\r\n}"]}
{"version":3,"sources":["../../src/controller/walletController.js"],"names":["bcypher","require","console","log","URL_ROOT","TOKEN","bcapibtc","bcapiltc","bcapidoge","bitcoin","bigi","buffer","CAValidator","coin","BTC","LTC","DOGE","walletController","createWalletWithAddress","req","res","decoded","verify","headers","App_key","_id","body","dataObj","CoinCode","name","item","data","toString","addresses","createWallet","err","wallets","json","isError","error","genAddrWallet","walletsData","tempObj","isAddressCreated","$setObj","updateQuery","findOneAndUpdate","email","$set","new","user","getCoin_WalletData","genAddr","find","users","redirect","getAddrFull","query","address","meta","page","pagination","perpage","total","n_tx","txs","getAddrBal","newTransaction","amount","receiverAddress","privateKey","senderAddress","dataRes","key","wallet_namesData","private","parseInt","tx","inputs","outputs","value","newTX","newTXres","pubkeys","keys","ECPair","fromHex","signatures","tosign","map","n","push","getPublicKeyBuffer","sign","Buffer","toDER","sendTX","result","getTX","hash","getChain","listWallets","wallet_names","forEach","delWallet","element","validateAddress","network","networkType","chain","valid","validate"],"mappings":";;;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AALA,IAAIA,UAAUC,QAAQ,aAAR,CAAd;;;AAOAC,QAAQC,GAAR,CAAY,wBAAZ;AACA,IAAMC,WAAW,iCAAjB;AACA,IAAMC,QAAQ,kCAAd;AACA,IAAIC,WAAW,IAAIN,OAAJ,CAAY,KAAZ,EAAmB,OAAnB,EAA4BK,KAA5B,CAAf;AACA,IAAIE,WAAW,IAAIP,OAAJ,CAAY,KAAZ,EAAmB,MAAnB,EAA2BK,KAA3B,CAAf;AACA,IAAIG,YAAY,IAAIR,OAAJ,CAAY,MAAZ,EAAoB,MAApB,EAA4BK,KAA5B,CAAhB;AACA,IAAII,UAAUR,QAAQ,eAAR,CAAd;AACA,IAAIS,OAAOT,QAAQ,MAAR,CAAX;AACA,IAAIU,SAASV,QAAQ,QAAR,CAAb;AACA,IAAIW,cAAcX,QAAQ,0BAAR,CAAlB;AACA,IAAIY,OAAO,EAAEC,KAAKR,QAAP,EAAiBS,KAAKR,QAAtB,EAAgCS,MAAMR,SAAtC,EAAX;;AAEA,IAAMS,mBAAmB;;AAEvBC,2BAAyB,iCAACC,GAAD,EAAMC,GAAN,EAAc;AACrC,QAAIC,UAAU,uBAAIC,MAAJ,CAAWH,IAAII,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACAtB,YAAQC,GAAR,CAAY,6BAAZ,EAA2CkB,QAAQI,GAAnD,EAAwDN,IAAIO,IAAJ,CAASC,OAAjE;;AAEA,QAAIC,WAAWT,IAAIO,IAAJ,CAASC,OAAT,CAAiBd,IAAhC;AACA,QAAIgB,OAAOR,QAAQI,GAAnB;AACA,QAAIK,OAAOjB,KAAKM,IAAIO,IAAJ,CAASC,OAAT,CAAiBd,IAAtB,CAAX;AACA,QAAIkB,OAAO,EAAEF,MAAMA,KAAKG,QAAL,EAAR,EAAyBC,WAAW;AAC7C;AADS,KAAX,CAEAH,KAAKI,YAAL,CAAkBH,IAAlB,EAAwB,UAASI,GAAT,EAAcC,OAAd,EAAuB;AAC7C,UAAID,GAAJ,EAAS;AACP;AACAf,YAAIiB,IAAJ,CAAS;AACPC,mBAAS,IADF;AAEPP,gBAAMI;AAFC,SAAT;AAKD,OAPD,MAOO;AACL,YAAI,CAACC,QAAQG,KAAb,EAAoB;;AAGlBT,eAAKU,aAAL,CAAmBJ,QAAQP,IAA3B,EAAiC,UAASM,GAAT,EAAcM,WAAd,EAA2B;AAC1D,gBAAIN,GAAJ,EAAS;AACPf,kBAAIiB,IAAJ,CAAS;AACPC,yBAAS,IADF;AAEPP,sBAAMI;AAFC,eAAT;AAID,aALD,MAKO;AACLjC,sBAAQC,GAAR,CAAY,wBAAZ,EAAqCsC,WAArC;;AAEA,kBAAIC,UAAU,EAAd;AACAA,sBAAQd,QAAR,IAAoBa,WAApB;AACAA,0BAAYE,gBAAZ,GAA+B,IAA/B;AACA,kBAAIC,UAAU,EAAd;AACA,kBAAIC,cAAc,aAAajB,QAA/B;AACAgB,sBAAQC,WAAR,IAAuBJ,WAAvB;AACAvC,sBAAQC,GAAR,CAAY,WAAZ,EAAyByC,OAAzB;;AAEA;AACA1C,sBAAQC,GAAR,CAAY,WAAZ,EAAyBuC,OAAzB,EAAkCG,WAAlC,EAA+CJ,WAA/C;;AAEA,mCAAWK,gBAAX,CAA4B;AAC1BC,uBAAO1B,QAAQ0B;AADW,eAA5B,EAEG;AACDC,sBAAMJ;AADL,eAFH,EAIG;AACDK,qBAAK;AADJ,eAJH,EAMG,UAACd,GAAD,EAAMe,IAAN,EAAe;;AAEhB,oBAAIf,GAAJ,EAAS,OAAOf,IAAIiB,IAAJ,CAAS;AACvBC,2BAAS,IADc;AAEvBP,wBAAMI;AAFiB,iBAAT,CAAP;AAITf,oBAAIiB,IAAJ,CAAS;AACPC,2BAAS,KADF;AAEPP,wBAAMmB;AAFC,iBAAT;AAID,eAhBD;AAiBD;AACF,WAtCD;AAuCD,SA1CD,MA0CO;AACL9B,cAAIiB,IAAJ,CAAS;AACPC,qBAAS,IADF;AAEPP,kBAAMK,QAAQG;AAFP,WAAT;AAKD;AACF;AACF,KA3DD;AA4DD,GAvEsB;AAwEvBY,sBAAoB,4BAAChC,GAAD,EAAMC,GAAN,EAAc;AAChC,QAAIU,OAAOjB,KAAK,KAAL,CAAX;AACAiB,SAAKsB,OAAL,CAAa,EAAb,EAAiB,UAASjB,GAAT,EAAcT,IAAd,EAAoB;AAClCxB,cAAQC,GAAR,CAAY,qBAAZ,EAAmCuB,IAAnC;AAEF,KAHD;;AAKA,QAAIK,OAAO;AACT,iBAAW,CACT,oEADS,EAET,oEAFS,EAGT,oEAHS,CADF;AAMT,qBAAe;AANN,KAAX;AAQCD,SAAKsB,OAAL,CAAarB,IAAb,EAAkB,UAAUI,GAAV,EAAcT,IAAd,EAAoB;AACpCxB,cAAQC,GAAR,CAAY,sCAAZ,EAAmDuB,IAAnD;AAGD,KAJD;AAKD,QAAIL,UAAU,uBAAIC,MAAJ,CAAWH,IAAII,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA;AACA,yBAAW6B,IAAX,CAAgB;AACd,eAAShC,QAAQ0B;AADH,KAAhB,EAEG,UAACZ,GAAD,EAAMmB,KAAN,EAAgB;AACjB,UAAInB,GAAJ,EAAS,OAAOf,IAAIiB,IAAJ,CAAS;AACvBC,iBAAS,IADc;AAEvBP,cAAMI;AAFiB,OAAT,CAAP;;AAKT,UAAImB,KAAJ,EAAW;AACTlC,YAAIiB,IAAJ,CAAS;AACPC,mBAAS,KADF;AAEPP,gBAAMuB;AAFC,SAAT;AAID,OALD,MAKO;AACLlC,YAAImC,QAAJ,CAAa,UAAb;AACD;AACF,KAhBD;AAiBD,GA/GsB;AAgHvBC,eAAa,qBAACrC,GAAD,EAAMC,GAAN,EAAc;AACzB;AACA;AACA;AACA;AACA,QAAIQ,WAAWT,IAAIsC,KAAJ,CAAUA,KAAV,CAAgB9B,OAAhB,CAAwBd,IAAvC;AACA,QAAI6C,UAAUvC,IAAIsC,KAAJ,CAAUA,KAAV,CAAgB9B,OAAhB,CAAwB+B,OAAtC;AACA,QAAI5B,OAAOjB,KAAKe,QAAL,CAAX;AACA;;AAEAE,SAAK0B,WAAL,CAAiBE,OAAjB,EAA0B,EAA1B,EAA8B,UAASvB,GAAT,EAAcT,IAAd,EAAoB;AAClD;;AAEEN,UAAIiB,IAAJ,CAAS;AACPC,iBAAS,KADF;AAEPqB,cAAM;AACJC,gBAAMzC,IAAIsC,KAAJ,CAAUI,UAAV,CAAqBD,IADvB;;AAGJE,mBAAS3C,IAAIsC,KAAJ,CAAUI,UAAV,CAAqBC,OAH1B;AAIJC,iBAAOrC,KAAKsC;;AAJR,SAFC;AASPjC,cAAML,KAAKuC;AATJ,OAAT;;AAYA;AACD,KAhBD;AAkBD,GA5IsB;AA6IvBC,cAAY,oBAAC/C,GAAD,EAAMC,GAAN,EAAc;;AAExB,QAAIC,UAAU,uBAAIC,MAAJ,CAAWH,IAAII,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA;;AAEA,QAAII,WAAWT,IAAIO,IAAJ,CAASC,OAAT,CAAiBd,IAAhC;AACA,QAAI6C,UAAUvC,IAAIO,IAAJ,CAASC,OAAT,CAAiB+B,OAA/B;AACA,QAAI5B,OAAOjB,KAAKM,IAAIO,IAAJ,CAASC,OAAT,CAAiBd,IAAtB,CAAX;AACA;AACA;AACAiB,SAAK0B,WAAL,CAAiBE,OAAjB,EAA0B,EAA1B,EAA8B,UAASvB,GAAT,EAAcT,IAAd,EAAoB;AAChD;;AAEAN,UAAIiB,IAAJ,CAASX,IAAT;AACD,KAJD;AAMD,GA7JsB;AA8JvByC,kBAAgB,wBAAChD,GAAD,EAAMC,GAAN,EAAc;AAC5B,QAAIC,UAAU,uBAAIC,MAAJ,CAAWH,IAAII,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACAtB,YAAQC,GAAR,CAAY,oBAAZ,EAAkCkB,QAAQI,GAA1C,EAA+CN,IAAIO,IAAJ,CAASC,OAAxD;;AAEA,QAAIC,WAAWT,IAAIO,IAAJ,CAASC,OAAT,CAAiBd,IAAhC;AACA,QAAI6C,UAAUvC,IAAIO,IAAJ,CAASC,OAAT,CAAiB+B,OAA/B;AACA,QAAI5B,OAAOjB,KAAKM,IAAIO,IAAJ,CAASC,OAAT,CAAiBd,IAAtB,CAAX;AACA,QAAIuD,SAASjD,IAAIO,IAAJ,CAASC,OAAT,CAAiByC,MAA9B;AACA,QAAIC,kBAAkBlD,IAAIO,IAAJ,CAASC,OAAT,CAAiB0C,eAAvC;AACAnE,YAAQC,GAAR;;AAEA,yBAAWkD,IAAX,CAAgB;AACd,eAAShC,QAAQ0B;AADH,KAAhB,EAEG,UAACZ,GAAD,EAAMmB,KAAN,EAAgB;AACjB,UAAInB,GAAJ,EAAS;AACP,eAAOf,IAAIiB,IAAJ,CAAS;AACdC,mBAAS,IADK;AAEdP,gBAAMI;AAFQ,SAAT,CAAP;AAID,OALD,MAKO;AACL,YAAImB,KAAJ,EAAW;AACT,cAAIlB,UAAU,EAAd;AACA,cAAIkC,aAAa,EAAjB;AACA,cAAIC,gBAAgB,EAApB;;AAEA,cAAIC,UAAUlB,MAAM,CAAN,EAASlB,OAAvB;AACA;;AAEA,eAAK,IAAIqC,GAAT,IAAgBD,OAAhB,EAAyB;AACvB,gBAAIC,IAAIzC,QAAJ,MAAkBJ,SAASI,QAAT,EAAtB,EAA2C;;AAEzC,kBAAI0C,mBAAmBF,QAAQC,GAAR,CAAvB;AACE;AACFH,2BAAaI,iBAAiBC,OAA9B;AACAJ,8BAAgBG,iBAAiBhB,OAAjC;AACD;AAEF;AACD,cAAIY,UAAJ,EAAgB;;AAEdF,qBAASQ,SAASR,MAAT,CAAT;AACA,gBAAIS,KAAK;AACPC,sBAAQ,CAAC,EAAE7C,WAAW,CAACsC,aAAD,CAAb,EAAD,CADD;AAEPQ,uBAAS,CAAC,EAAE9C,WAAW,CAACoC,eAAD,CAAb,EAAgCW,OAAOZ,MAAvC,EAAD;AAFF,aAAT;AAIC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;;;AAIEtC,iBAAKmD,KAAL,CAAWJ,EAAX,EAAe,UAAS1C,GAAT,EAAc+C,QAAd,EAAwB;;AAErC,kBAAI/C,GAAJ,EAAS;AACPjC,wBAAQC,GAAR,CAAY,gBAAZ,EAA8BgC,GAA9B;AAED,eAHD,MAGO;AACL+C,yBAASC,OAAT,GAAmB,EAAnB;AACA;AACA,oBAAIC,OAAO,IAAI3E,QAAQ4E,MAAZ,CAAmB3E,KAAK4E,OAAL,CAAahB,UAAb,CAAnB,CAAX;AACAY,yBAASK,UAAT,GAAsBL,SAASM,MAAT,CAAgBC,GAAhB,CAAoB,UAASD,MAAT,EAAiBE,CAAjB,EAAoB;AAC5DR,2BAASC,OAAT,CAAiBQ,IAAjB,CAAsBP,KAAKQ,kBAAL,GAA0B5D,QAA1B,CAAmC,KAAnC,CAAtB;AACA,yBAAOoD,KAAKS,IAAL,CAAU,IAAIlF,OAAOmF,MAAX,CAAkBN,MAAlB,EAA0B,KAA1B,CAAV,EAA4CO,KAA5C,GAAoD/D,QAApD,CAA6D,KAA7D,CAAP;AACD,iBAHqB,CAAtB;AAIAF,qBAAKkE,MAAL,CAAYd,QAAZ,EAAsB,UAAS/C,GAAT,EAAc8D,MAAd,EAAsB;AACxC,sBAAI9D,GAAJ,EAAS;AACPjC,4BAAQC,GAAR,CAAY,iBAAZ,EAA+BgC,GAA/B;;AAEAf,wBAAIiB,IAAJ,CAAS;AACPC,+BAAS,IADF;AAEPP,4BAAMkE;AAFC,qBAAT;AAKD,mBARD,MAQO;AACL;AACAnE,yBAAK0B,WAAL,CAAiB,qCAAjB,EAAwD,EAAxD,EAA4D,UAASrB,GAAT,EAAcT,IAAd,EAAoB;AAChFxB,8BAAQC,GAAR,CAAY,kCAAZ,EAAgDuB,IAAhD;;AAEE;AACD,qBAJD;;AAMDxB,4BAAQC,GAAR,CAAY,WAAZ,EAAyB8F,MAAzB;AACC7E,wBAAIiB,IAAJ,CAAS;AACPC,+BAAS,KADF;AAEPP,4BAAMkE;AAFC,qBAAT;AAOD;AACF,iBA1BH;AA2BE;AAEH;AAGF,aA7CD;AA+CD;AAMF;AACF;AAEF,KAxGD;;AA2GA;AACA;AACA;AACA;;AAEA;AACA;AACD,GA3RsB;AA4RvBC,SAAO,eAAC/E,GAAD,EAAMC,GAAN,EAAc;AACnB,QAAI+E,OAAOhF,IAAIO,IAAJ,CAASC,OAAT,CAAiBwE,IAA5B;AACA,QAAIvE,WAAWT,IAAIO,IAAJ,CAASC,OAAT,CAAiBd,IAAhC;AACA,QAAIiB,OAAOjB,KAAKe,QAAL,CAAX;AACA;AACA;;AAEA;AACA;AACAE,SAAKsE,QAAL,CAAc,UAASjE,GAAT,EAAcT,IAAd,EAAoB;AAC9BxB,cAAQC,GAAR,CAAY,aAAZ,EAA2BgC,GAA3B,EAAgCT,IAAhC;AACAN,UAAIiB,IAAJ,CAASX,IAAT;AACD,KAHH;AAIE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAlTsB;;AAoTvB2E,eAAa,qBAAClF,GAAD,EAAMC,GAAN,EAAc;AACzBU,SAAKuE,WAAL,CAAiB,UAASlE,GAAT,EAAcC,OAAd,EAAuB;AACtC,UAAID,GAAJ,EAAS;AACP;;AAED,OAHD,MAGO;AACL;AACAC,gBAAQkE,YAAR,CAAqBC,OAArB,CAA6B,mBAAW,CAGvC,CAHD;AAKD;AACF,KAZD;AAaD,GAlUsB;AAmUvBC,aAAW,mBAACrF,GAAD,EAAMC,GAAN,EAAc;AACvB;AACAU,SAAK0E,SAAL,CAAeC,OAAf,EAAwB,UAAStE,GAAT,EAAcf,GAAd,EAAmB;AACzC,UAAIe,GAAJ,EAAS;AACPjC,gBAAQC,GAAR,CAAY,uBAAZ,EAAqCgC,GAArC;AAED;AACDjC,cAAQC,GAAR,CAAY,QAAZ,EAAsBiB,GAAtB;AAED,KAPD;AAQD,GA7UsB;AA8UvBsF,mBAAiB,yBAACvF,GAAD,EAAMC,GAAN,EAAc;AAC7BlB,YAAQC,GAAR,CAAY,yBAAZ,EAAuCgB,IAAIsC,KAA3C,EAAkDtC,IAAIO,IAAtD;;AAEA,QAAIE,WAAWT,IAAIsC,KAAJ,CAAU5C,IAAzB;AACA,QAAI6C,UAAUvC,IAAIsC,KAAJ,CAAUY,eAAxB;AACA,QAAIsC,UAAU,EAAd;AACAA,cAAU9F,KAAKe,QAAL,CAAV;AACA,QAAIgF,cAAcD,QAAQE,KAA1B;AACA3G,YAAQC,GAAR,CAAY,kBAAZ,EAAgCuD,OAAhC,EAAyC9B,QAAzC;;AAGA,QAAIkF,QAAQlG,YAAYmG,QAAZ,CAAqBrD,OAArB,EAA8B9B,QAA9B,EAAwCgF,WAAxC,CAAZ;AACA,QAAIE,KAAJ,EAAW;AACT5G,cAAQC,GAAR,CAAY,yBAAZ;AACAiB,UAAIiB,IAAJ,CAAS;AACPC,iBAAS,KADF;AAEPwE,eAAOA;AAFA,OAAT;AAID,KAND,MAMO;AACL5G,cAAQC,GAAR,CAAY,iBAAZ;;AAEAiB,UAAIiB,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBwE,OAAOA,KAAxB,EAAT;AACD;AAEF;AAtWsB,CAAzB;kBAwWe7F,gB","file":"walletController.js","sourcesContent":["var bcypher = require('blockcypher');\r\nimport usersModel from '../models/usersModel'\r\n\r\nimport jwt from 'jsonwebtoken';\r\nimport env from \"../env\";\r\nimport async from 'async'\r\n\r\nconsole.log('Welcome to BlockCypher');\r\nconst URL_ROOT = 'https://api.blockcypher.com/v1/';\r\nconst TOKEN = 'e42bb9107d4d49e6b74d4153bddcde3c';\r\nvar bcapibtc = new bcypher('btc', 'test3', TOKEN);\r\nvar bcapiltc = new bcypher('ltc', 'main', TOKEN);\r\nvar bcapidoge = new bcypher('doge', 'main', TOKEN);\r\nvar bitcoin = require(\"bitcoinjs-lib\");\r\nvar bigi = require(\"bigi\");\r\nvar buffer = require('buffer');\r\nvar CAValidator = require('crypto-address-validator');\r\nvar coin = { BTC: bcapibtc, LTC: bcapiltc, DOGE: bcapidoge };\r\n\r\nconst walletController = {\r\n\r\n  createWalletWithAddress: (req, res) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"createWalletWithAddress ==>\", decoded._id, req.body.dataObj);\r\n\r\n    var CoinCode = req.body.dataObj.coin;\r\n    var name = decoded._id;\r\n    var item = coin[req.body.dataObj.coin];\r\n    var data = { name: name.toString(), addresses: [] }\r\n      // console.log(\"Coin==>item coinCode\", item, CoinCode);\r\n    item.createWallet(data, function(err, wallets) {\r\n      if (err) {\r\n        return\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n\r\n      } else {\r\n        if (!wallets.error) {\r\n\r\n\r\n          item.genAddrWallet(wallets.name, function(err, walletsData) {\r\n            if (err) {\r\n              res.json({\r\n                isError: true,\r\n                data: err\r\n              });\r\n            } else {\r\n              console.log(\"Gen Addr wallet res==>\",walletsData);\r\n              \r\n              var tempObj = {};\r\n              tempObj[CoinCode] = walletsData;\r\n              walletsData.isAddressCreated = true;\r\n              var $setObj = {};\r\n              var updateQuery = 'wallets.' + CoinCode;\r\n              $setObj[updateQuery] = walletsData;\r\n              console.log(\"$setObj=>\", $setObj);\r\n\r\n              //  wallets[CoinCode];\r\n              console.log(\"tempObj=>\", tempObj, updateQuery, walletsData);\r\n\r\n              usersModel.findOneAndUpdate({\r\n                email: decoded.email\r\n              }, {\r\n                $set: $setObj\r\n              }, {\r\n                new: true\r\n              }, (err, user) => {\r\n\r\n                if (err) return res.json({\r\n                  isError: true,\r\n                  data: err\r\n                });\r\n                res.json({\r\n                  isError: false,\r\n                  data: user\r\n                })\r\n              });\r\n            }\r\n          })\r\n        } else {\r\n          res.json({\r\n            isError: true,\r\n            data: wallets.error\r\n          });\r\n\r\n        }\r\n      }\r\n    });\r\n  },\r\n  getCoin_WalletData: (req, res) => {\r\n    var item = coin['BTC'];\r\n    item.genAddr({}, function(err, body) {\r\n       console.log(\"genAddr==> Response\", body);\r\n\r\n    })\r\n\r\n    var data = {\r\n      \"pubkeys\": [\r\n        \"0259a80ac2bb8acc5d7ed1992da4585301ca0495be42c8d72b3236534c78f7ea37\",\r\n        \"02295cd85df8d1fad00a311db5102a967f671b42ec10da2500bab7ad1962ebdd32\",\r\n        \"023f0946898fb3b8dcb5d8c259696fe4ecc8765da62070a3006ab5479b7336673d\"\r\n      ],\r\n      \"script_type\": \"multisig-2-of-3\"\r\n    };\r\n     item.genAddr(data,function (err,body) {\r\n       console.log(\"Response for multising addressing==>\",body);\r\n       \r\n       \r\n     })\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    // console.log(\"getCoin_WalletData ==>\", decoded._id);\r\n    usersModel.find({\r\n      'email': decoded.email\r\n    }, (err, users) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n\r\n      if (users) {\r\n        res.json({\r\n          isError: false,\r\n          data: users,\r\n        });\r\n      } else {\r\n        res.redirect('/#/login');\r\n      }\r\n    });\r\n  },\r\n  getAddrFull: (req, res) => {\r\n    // var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    // console.log(\"getAddrFull Data table query... ==>\", req.query);\r\n    // var perpage = req.query.pagination.perpage;\r\n    // var page = req.query.pagination.page;\r\n    var CoinCode = req.query.query.dataObj.coin;\r\n    var address = req.query.query.dataObj.address;\r\n    var item = coin[CoinCode];\r\n    // console.log(\"Coin==>getAddr item coinCode\", item, CoinCode);\r\n\r\n    item.getAddrFull(address, {}, function(err, body) {\r\n    // console.log(\"getAddr full Data table result\", body, typeof body.txs);\r\n\r\n      res.json({\r\n        isError: false,\r\n        meta: {\r\n          page: req.query.pagination.page,\r\n\r\n          perpage: req.query.pagination.perpage,\r\n          total: body.n_tx,\r\n\r\n        },\r\n        data: body.txs,\r\n      }, )\r\n\r\n      // res.json(body);\r\n    })\r\n\r\n  },\r\n  getAddrBal: (req, res) => {\r\n\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    // console.log(\"getAddrBal ==>\", decoded._id, req.body.dataObj);\r\n\r\n    var CoinCode = req.body.dataObj.coin;\r\n    var address = req.body.dataObj.address;\r\n    var item = coin[req.body.dataObj.coin];\r\n    // var data = { name: name.toString(), addresses: [] }\r\n    // console.log(\"Coin==>getAddrBal item coinCode\", item, CoinCode);\r\n    item.getAddrFull(address, {}, function(err, body) {\r\n      // console.log(\"getAddrFull==>0\", body);\r\n\r\n      res.json(body);\r\n    })\r\n\r\n  },\r\n  newTransaction: (req, res) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"newTransaction ==>\", decoded._id, req.body.dataObj);\r\n\r\n    var CoinCode = req.body.dataObj.coin;\r\n    var address = req.body.dataObj.address;\r\n    var item = coin[req.body.dataObj.coin];\r\n    var amount = req.body.dataObj.amount;\r\n    var receiverAddress = req.body.dataObj.receiverAddress;\r\n    console.log();\r\n\r\n    usersModel.find({\r\n      'email': decoded.email\r\n    }, (err, users) => {\r\n      if (err) {\r\n        return res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n      } else {\r\n        if (users) {\r\n          var wallets = {}\r\n          var privateKey = '';\r\n          var senderAddress = '';\r\n\r\n          var dataRes = users[0].wallets;\r\n          // console.log(\"newTransaction user data==>\", users, dataRes);\r\n\r\n          for (var key in dataRes) {\r\n            if (key.toString() == CoinCode.toString()) {\r\n\r\n              var wallet_namesData = dataRes[key]\r\n                // console.log(\"newTransaction key matched.==>\", wallet_namesData.private);\r\n              privateKey = wallet_namesData.private\r\n              senderAddress = wallet_namesData.address\r\n            }\r\n\r\n          }\r\n          if (privateKey) {\r\n\r\n            amount = parseInt(amount);\r\n            var tx = {\r\n              inputs: [{ addresses: [senderAddress] }],\r\n              outputs: [{ addresses: [receiverAddress], value: amount }]\r\n            };\r\n             //for multisig addressing Transaction..\r\n            // var tx = {\r\n            //   \"inputs\": [{\"addresses\": [senderAddress]}],\r\n            //   \"outputs\": [{\r\n            //       \"addresses\"   : [ \"0259a80ac2bb8acc5d7ed1992da4585301ca0495be42c8d72b3236534c78f7ea37\",\r\n            //       \"02295cd85df8d1fad00a311db5102a967f671b42ec10da2500bab7ad1962ebdd32\",\r\n            //       \"023f0946898fb3b8dcb5d8c259696fe4ecc8765da62070a3006ab5479b7336673d\"],\r\n            //       \"script_type\" : \"multisig-2-of-3\",\r\n            //       \"value\"       : amount\r\n            //   }]\r\n          // }\r\n\r\n\r\n\r\n            item.newTX(tx, function(err, newTXres) {\r\n\r\n              if (err) {\r\n                console.log(\"newTX error==>\", err);\r\n\r\n              } else {\r\n                newTXres.pubkeys = [];\r\n                //private key for that address\r\n                var keys = new bitcoin.ECPair(bigi.fromHex(privateKey));\r\n                newTXres.signatures = newTXres.tosign.map(function(tosign, n) {\r\n                  newTXres.pubkeys.push(keys.getPublicKeyBuffer().toString(\"hex\"));\r\n                  return keys.sign(new buffer.Buffer(tosign, \"hex\")).toDER().toString(\"hex\");\r\n                });\r\n                item.sendTX(newTXres, function(err, result) {\r\n                    if (err) {\r\n                      console.log(\"sendTX error==>\", err);\r\n\r\n                      res.json({\r\n                        isError: true,\r\n                        data: result,\r\n                      });\r\n\r\n                    } else {\r\n                      //multisig address balance info\r\n                      item.getAddrFull('2MuhLqAKvB5LESiNdVWg6BzkaetnArtQizw', {}, function(err, body) {\r\n                      console.log(\"getAddrFull==> multising address\", body);\r\n                  \r\n                        // res.json(body);\r\n                      })\r\n                  \r\n                     console.log(\"sendTX==>\", result);\r\n                      res.json({\r\n                        isError: false,\r\n                        data: result,\r\n                      });\r\n\r\n\r\n\r\n                    }\r\n                  })\r\n                  // getAddrBal(toaddress);\r\n\r\n              }\r\n\r\n\r\n            })\r\n\r\n          }\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n      }\r\n\r\n    });\r\n\r\n\r\n    // var data = { name: name.toString(), addresses: [] }\r\n    // console.log(\"Coin==>getAddrBal item coinCode\", item, CoinCode);\r\n    // item.getAddrFull(address, {}, function(err, body) {\r\n    //   console.log(\"getAddrFull==>0\", body);\r\n\r\n    //   res.json(body);\r\n    // })\r\n  },\r\n  getTX: (req, res) => {\r\n    var hash = req.body.dataObj.hash;\r\n    var CoinCode = req.body.dataObj.coin;\r\n    var item = coin[CoinCode];\r\n    // item.getTXConf(hash, function(err, body) {\r\n    //   console.log(\"getTXConf==>0\", body);\r\n\r\n    //   res.json(body);\r\n    // })\r\n    item.getChain(function(err, body) {\r\n        console.log(\"getChain==>\", err, body);\r\n        res.json(body);\r\n      })\r\n      // item.getTX(hash, {}, function(err, body) {\r\n      //     // console.log(\"getTX==>\", body);\r\n      //     res.json(body);\r\n      //   })\r\n      // getTX = function(hash,{}, cb) {\r\n      //   this._get('/txs/' + hash, {}, function(error, body) {\r\n      //     cb(error, body);\r\n      //   });\r\n      // };\r\n  },\r\n\r\n  listWallets: (req, res) => {\r\n    item.listWallets(function(err, wallets) {\r\n      if (err) {\r\n        // console.log(\"error in item\");\r\n\r\n      } else {\r\n        // console.log('listWallets==>', wallets);\r\n        wallets.wallet_names.forEach(element => {\r\n\r\n\r\n        });\r\n\r\n      }\r\n    })\r\n  },\r\n  delWallet: (req, res) => {\r\n    //req wallet name as parameter\r\n    item.delWallet(element, function(err, res) {\r\n      if (err) {\r\n        console.log(\"error in delWallet==>\", err);\r\n\r\n      }\r\n      console.log(\"res==>\", res);\r\n\r\n    })\r\n  },\r\n  validateAddress: (req, res) => {\r\n    console.log(\" validateAddress req==>\", req.query, req.body);\r\n\r\n    var CoinCode = req.query.coin;\r\n    var address = req.query.receiverAddress;\r\n    var network = '';\r\n    network = coin[CoinCode];\r\n    var networkType = network.chain;\r\n    console.log('CoinCode address', address, CoinCode);\r\n\r\n\r\n    var valid = CAValidator.validate(address, CoinCode, networkType);\r\n    if (valid) {\r\n      console.log('This is a valid address');\r\n      res.json({\r\n        isError: false,\r\n        valid: valid\r\n      })\r\n    } else {\r\n      console.log('Address INVALID');\r\n\r\n      res.json({ isError: true, valid: valid })\r\n    }\r\n\r\n  }\r\n}\r\nexport default walletController;"]}
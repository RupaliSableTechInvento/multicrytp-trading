{"version":3,"sources":["../../src/controller/authController.js"],"names":["encode","require","hashCode","authController","login","req","res","next","body","password","value","credential","findOne","email","err","user","json","d","Date","v","setMinutes","getMinutes","token1","sign","first_name","last_name","App_key","token","console","log","token2","isActive","expiry","findOneAndUpdate","$and","$set","data","isError","create","register","params","query","length","save","logout","decoded","verify","headers"],"mappings":"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","file":"authController.js","sourcesContent":["import usersModel from './../models/usersModel';\r\nimport tokenModel from './../models/tokenModel';\r\nimport jwt from 'jsonwebtoken';\r\nimport env from \"../env\";\r\nvar encode = require('hashcode').hashCode;\r\nconst authController = {\r\n  login: (req, res, next) => {\r\n    req.body.password = encode().value(req.body.password);\r\n    const credential = req.body;\r\n    usersModel.findOne({\r\n      email: credential.email,\r\n      password: credential.password\r\n    }, (err, user) => {\r\n      if (err) res.json(err);\r\n      if (user !== null) {\r\n        var d = new Date();\r\n        var v = new Date();\r\n        v.setMinutes(d.getMinutes() + 60);\r\n        const token1 = jwt.sign({\r\n          email: user.email,\r\n          first_name: user.first_name,\r\n          last_name: user.last_name\r\n        }, env.App_key);\r\n        let token = new tokenModel();\r\n        console.log(user.email);\r\n        var token2={'token':token1,email: user.email,isActive:\"active\",expiry:v};\r\n        tokenModel.findOneAndUpdate({$and:[{email:user.email},{isActive:\"active\"}]},{$set:{isActive:\"inactive\"}},(err,data)=>{\r\n          if (err) return res.json({isError:true,data:err});\r\n          else{\r\n            tokenModel.create(token2, function(err, token) {\r\n              if (err) return res.json(err);\r\n              res.json({isError:false,data:token1});\r\n            })\r\n          }\r\n        })\r\n      } else {\r\n        res.json({isError:true,data:\"email or password incorrect !\"})\r\n      }\r\n    });\r\n  },\r\n\r\n  register: (req, res, next) => {\r\n    console.log(\"req.body\", req.body, req.params, req.query)\r\n    if (req.body.password != \"\" && req.body.password.length > 6) {\r\n      req.body.password = encode().value(req.body.password);\r\n      let user = new usersModel(req.body);\r\n      user.save(req.body, function(err, user) {\r\n        if (err) return res.json(err);\r\n        res.json(user)\r\n      })\r\n    }\r\n    else{\r\n      res.json(\"Please provide valid password\");\r\n    }\r\n  },\r\n  logout:(req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    tokenModel.findOneAndUpdate({$and:[{'email':decoded.email},{'isActive':'active'}]},{$set:{'isActive':'inactive'}},(err,data)=>{\r\n      if (err) {\r\n        res.json({isError:true,data:err});\r\n      }\r\n      else{\r\n        res.json({isError:false,data:data});\r\n      }\r\n    })\r\n  },\r\n};\r\n\r\nexport default authController;\r\n"]}
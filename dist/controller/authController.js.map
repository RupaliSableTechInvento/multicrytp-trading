{"version":3,"sources":["../../src/controller/authController.js"],"names":["encode","require","hashCode","authController","login","req","res","next","console","log","body","password","value","credential","findOne","email","err","user","json","d","Date","v","setMinutes","getMinutes","token1","sign","first_name","last_name","expiry","App_key","token","currentTime","token2","isActive","userActiveTime","findOneAndUpdate","$and","$set","data","isError","create","id","_id","getActiveUser","find","tokenModel","emailObj","length","index","push","$in","register","params","query","save","logout","decoded","verify","headers","success"],"mappings":"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","file":"authController.js","sourcesContent":["import usersModel from './../models/usersModel';\r\nimport tokenModel from './../models/tokenModel';\r\nimport jwt from 'jsonwebtoken';\r\nimport env from \"../env\";\r\nimport tradeModel from '../models/postatrade';\r\nvar encode = require('hashcode').hashCode;\r\nconst authController = {\r\n  login: (req, res, next) => {\r\n    console.log(\"login api=>\", req.body)\r\n    req.body.password = encode().value(req.body.password);\r\n    const credential = req.body;\r\n    usersModel.findOne({\r\n      email: credential.email,\r\n      password: credential.password\r\n    }, (err, user) => {\r\n      if (err) res.json(err);\r\n      if (user !== null) {\r\n        console.log(\"User=>\", user)\r\n        var d = new Date();\r\n        var v = new Date();\r\n        v.setMinutes(d.getMinutes() + 10);\r\n        const token1 = jwt.sign({\r\n          email: user.email,\r\n          first_name: user.first_name,\r\n          last_name: user.last_name,\r\n          expiry: v\r\n        }, env.App_key);\r\n        let token = new tokenModel();\r\n        console.log(user.email);\r\n        var currentTime = new Date();\r\n        var token2 = {\r\n          'token': token1,\r\n          email: user.email,\r\n          isActive: \"active\",\r\n          expiry: v,\r\n          userActiveTime: currentTime\r\n        };\r\n        tokenModel.findOneAndUpdate({\r\n          $and: [{\r\n            email: user.email\r\n          }, {\r\n            isActive: \"active\"\r\n          }]\r\n        }, {\r\n          $set: {\r\n            isActive: \"inactive\"\r\n          }\r\n        }, (err, data) => {\r\n          if (err) return res.json({\r\n            isError: true,\r\n            data: err\r\n          });\r\n          else {\r\n            tokenModel.create(token2, function (err, token) {\r\n              if (err) return res.json(err);\r\n              res.json({\r\n                isError: false,\r\n                data: token1,\r\n                user: {\r\n                  first_name: user.first_name,\r\n                  last_name: user.last_name,\r\n                  id: user._id\r\n                }\r\n              });\r\n            })\r\n          }\r\n        })\r\n      } else {\r\n        res.json({\r\n          isError: true,\r\n          data: \"email or password incorrect !\"\r\n        })\r\n      }\r\n    });\r\n  },\r\n\r\n  getActiveUser: async (req, res, next) => {\r\n    await tokenModel.find({\r\n      isActive: \"active\"\r\n    }, (err, tokenModel) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        tokenModel: err\r\n      });\r\n      else {\r\n        var emailObj = [];\r\n        console.log(\"trade model result\", tokenModel.length);\r\n        for (let index = 0; index < tokenModel.length; index++) {\r\n          emailObj.push(tokenModel[index].email);\r\n        }\r\n        console.log(\"active user email \", emailObj);\r\n\r\n        usersModel.find({\r\n          'email': {\r\n            $in: emailObj\r\n          }\r\n        }, (err, user) => {\r\n          if (err) return res.json({\r\n            isError: true,\r\n            user: err\r\n          });\r\n          else {\r\n            return res.json({\r\n              isError: false,\r\n              tokenModel: tokenModel,\r\n              user: user\r\n            });\r\n          }\r\n        });\r\n      }\r\n    })\r\n  },\r\n\r\n  register: (req, res, next) => {\r\n    console.log(\"req.body for register\", req.body, req.params, req.query)\r\n    if (req.body.password != \"\" && req.body.password.length > 6) {\r\n      req.body.password = encode().value(req.body.password);\r\n      let user = new usersModel(req.body);\r\n      user.save(req.body, function (err, user) {\r\n        if (err) return res.json(err);\r\n        res.json(user)\r\n      })\r\n    } else {\r\n      res.json(\"Please provide valid password\");\r\n    }\r\n  },\r\n  logout: (req, res, next) => {\r\n    console.log(\"logout=>>\", req);\r\n\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    tokenModel.findOneAndUpdate({\r\n      $and: [{\r\n        'email': decoded.email\r\n      }, {\r\n        'isActive': 'active'\r\n      }]\r\n    }, {\r\n      $set: {\r\n        'isActive': 'inactive'\r\n      }\r\n    }, (err, data) => {\r\n      if (err) {\r\n        res.json({\r\n          success: false,\r\n          data: err\r\n        });\r\n      } else {\r\n        res.json({\r\n          success: true,\r\n          data: data\r\n        });\r\n      }\r\n    })\r\n  },\r\n};\r\n\r\nexport default authController;"]}
{"version":3,"sources":["../../src/controller/authController.js"],"names":["encode","require","hashCode","authController","login","req","res","next","console","log","body","password","value","credential","findOne","email","err","user","json","d","Date","v","setMinutes","getMinutes","token1","sign","first_name","last_name","expiry","App_key","token","token2","isActive","findOneAndUpdate","$and","$set","data","isError","create","id","_id","register","params","query","length","save","logout","decoded","verify","headers"],"mappings":"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","file":"authController.js","sourcesContent":["import usersModel from './../models/usersModel';\r\nimport tokenModel from './../models/tokenModel';\r\nimport jwt from 'jsonwebtoken';\r\nimport env from \"../env\";\r\nvar encode = require('hashcode').hashCode;\r\nconst authController = {\r\n  login: (req, res, next) => {\r\n    console.log(\"login api=>\", req.body)\r\n    req.body.password = encode().value(req.body.password);\r\n    const credential = req.body;\r\n    usersModel.findOne({\r\n      email: credential.email,\r\n      password: credential.password\r\n    }, (err, user) => {\r\n      if (err) res.json(err);\r\n      if (user !== null) {\r\n        console.log(\"User=>\", user)\r\n        var d = new Date();\r\n        var v = new Date();\r\n        v.setMinutes(d.getMinutes() + 60);\r\n        const token1 = jwt.sign({\r\n          email: user.email,\r\n          first_name: user.first_name,\r\n          last_name: user.last_name,\r\n          expiry: v\r\n        }, env.App_key);\r\n        let token = new tokenModel();\r\n        console.log(user.email);\r\n        var token2 = { 'token': token1, email: user.email, isActive: \"active\", expiry: v };\r\n        tokenModel.findOneAndUpdate({ $and: [{ email: user.email }, { isActive: \"active\" }] }, { $set: { isActive: \"inactive\" } }, (err, data) => {\r\n          if (err) return res.json({ isError: true, data: err });\r\n          else {\r\n            tokenModel.create(token2, function(err, token) {\r\n              if (err) return res.json(err);\r\n              res.json({ isError: false, data: token1, user: { first_name: user.first_name, last_name: user.last_name, id: user._id } });\r\n            })\r\n          }\r\n        })\r\n      } else {\r\n        res.json({ isError: true, data: \"email or password incorrect !\" })\r\n      }\r\n    });\r\n  },\r\n\r\n  register: (req, res, next) => {\r\n    console.log(\"req.body\", req.body, req.params, req.query)\r\n    if (req.body.password != \"\" && req.body.password.length > 6) {\r\n      req.body.password = encode().value(req.body.password);\r\n      let user = new usersModel(req.body);\r\n      user.save(req.body, function(err, user) {\r\n        if (err) return res.json(err);\r\n        res.json(user)\r\n      })\r\n    } else {\r\n      res.json(\"Please provide valid password\");\r\n    }\r\n  },\r\n  logout: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    tokenModel.findOneAndUpdate({ $and: [{ 'email': decoded.email }, { 'isActive': 'active' }] }, { $set: { 'isActive': 'inactive' } }, (err, data) => {\r\n      if (err) {\r\n        res.json({ isError: true, data: err });\r\n      } else {\r\n        res.json({ isError: false, data: data });\r\n      }\r\n    })\r\n  },\r\n};\r\n\r\nexport default authController;"]}
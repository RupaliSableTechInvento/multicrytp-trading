{"version":3,"sources":["../../src/controller/authController.js"],"names":["encode","require","hashCode","app","authController","login","req","res","next","body","password","value","credential","console","log","global","email","findOne","err","user","json","d","Date","v","setMinutes","getMinutes","token1","sign","_id","first_name","last_name","expiry","App_key","token","currentTime","token2","isActive","userActiveTime","findOneAndUpdate","$and","$set","data","isError","create","id","getActiveUser","find","tokenModel","emailObj","length","index","push","$in","register","account_created","name","wallets","BTC","isAddressCreated","LTC","DOGE","save","logout","decoded","verify","headers","success"],"mappings":"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","file":"authController.js","sourcesContent":["import usersModel from './../models/usersModel';\r\nimport tokenModel from './../models/tokenModel';\r\nimport jwt from 'jsonwebtoken';\r\nimport env from \"../env\";\r\nimport walletController from './walletController';\r\nimport tradeModel from '../models/postatrade';\r\nvar encode = require('hashcode').hashCode;\r\n\r\nimport express from 'express';\r\nconst app = express();\r\n\r\n// var http = require('http')(9004);\r\n// global = {};\r\n\r\nconst authController = {\r\n  login: (req, res, next) => {\r\n    req.body.password = encode().value(req.body.password);\r\n    const credential = req.body;\r\n    console.log(\"in login credential==>\", credential);\r\n    global.email = credential.email;\r\n    usersModel.findOne({\r\n      email: credential.email,\r\n      password: credential.password\r\n    }, (err, user) => {\r\n      if (err) res.json(err);\r\n      if (user) {\r\n        console.log(\"User to get login=>\", user)\r\n        var d = new Date();\r\n        var v = new Date();\r\n        v.setMinutes(d.getMinutes() + 5);\r\n        const token1 = jwt.sign({\r\n          _id: user._id,\r\n          email: user.email,\r\n          first_name: user.first_name,\r\n          last_name: user.last_name,\r\n          expiry: v\r\n        }, env.App_key);\r\n        let token = new tokenModel();\r\n        console.log(user.email);\r\n        var currentTime = new Date();\r\n        var token2 = {\r\n          'token': token1,\r\n          email: user.email,\r\n          isActive: \"active\",\r\n          expiry: v,\r\n          userActiveTime: currentTime\r\n        };\r\n        tokenModel.findOneAndUpdate({\r\n          $and: [{\r\n            email: user.email\r\n          }, {\r\n            isActive: \"active\"\r\n          }]\r\n        }, {\r\n          $set: {\r\n            isActive: \"inactive\"\r\n          }\r\n        }, (err, data) => {\r\n          if (err) return res.json({\r\n            isError: true,\r\n            data: err\r\n          });\r\n          else {\r\n            tokenModel.create(token2, function(err, token) {\r\n              if (err) return res.json(err);\r\n              res.json({\r\n                isError: false,\r\n                data: token1,\r\n                user: {\r\n                  first_name: user.first_name,\r\n                  last_name: user.last_name,\r\n                  id: user._id,\r\n                }\r\n              });\r\n            })\r\n          }\r\n        })\r\n      } else {\r\n        res.json({\r\n          isError: true,\r\n          data: \"email or password incorrect !\"\r\n        })\r\n      }\r\n    });\r\n  },\r\n\r\n  getActiveUser: async(req, res, next) => {\r\n    await tokenModel.find({\r\n      isActive: \"active\"\r\n    }, (err, tokenModel) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        tokenModel: err\r\n      });\r\n      else {\r\n        var emailObj = [];\r\n        console.log(\"trade model result\", tokenModel.length);\r\n        for (let index = 0; index < tokenModel.length; index++) {\r\n          emailObj.push(tokenModel[index].email);\r\n        }\r\n        console.log(\"active user email \", emailObj);\r\n\r\n        usersModel.find({\r\n          'email': {\r\n            $in: emailObj\r\n          }\r\n        }, (err, user) => {\r\n          if (err) return res.json({\r\n            isError: true,\r\n            user: err\r\n          });\r\n          else {\r\n            return res.json({\r\n              isError: false,\r\n              tokenModel: tokenModel,\r\n              user: user\r\n            });\r\n          }\r\n        });\r\n      }\r\n    })\r\n  },\r\n\r\n  register: (req, res, next) => {\r\n    console.log(\"req.body for register\", req.body)\r\n    var account_created = new Date();\r\n    if (req.body.password != \"\" && req.body.password.length > 5) {\r\n      req.body.password = encode().value(req.body.password);\r\n      req.body.account_created = account_created;\r\n      var name = req.body.email;\r\n      console.log(\"name==>\", name);\r\n\r\n      req.body.wallets = {\r\n        BTC: {\r\n          isAddressCreated: false\r\n        },\r\n        LTC: {\r\n          isAddressCreated: false\r\n        },\r\n        DOGE: {\r\n          isAddressCreated: false\r\n        },\r\n      }\r\n      console.log(\"req.body Register==>\", req.body);\r\n\r\n\r\n      let user = new usersModel(req.body);\r\n      user.save(req.body, function(err, user) {\r\n\r\n        if (err) return res.json(err);\r\n        else {\r\n\r\n          res.json(user)\r\n\r\n        }\r\n      })\r\n\r\n\r\n      console.log(\"Account Created==>\", account_created);\r\n\r\n    } else {\r\n      res.json(\"Please provide valid password\");\r\n    }\r\n  },\r\n  logout: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    tokenModel.findOneAndUpdate({\r\n      $and: [{\r\n        'email': decoded.email\r\n      }, {\r\n        'isActive': 'active'\r\n      }, {\r\n        'token': req.headers['authorization']\r\n      }]\r\n    }, {\r\n      $set: {\r\n        'isActive': 'inactive',\r\n        'userInactiveTime': new Date()\r\n      }\r\n    }, (err, data) => {\r\n      if (err) {\r\n        res.json({\r\n          success: false,\r\n          data: err\r\n        });\r\n      } else {\r\n        res.json({\r\n          success: true,\r\n          data: data\r\n        });\r\n      }\r\n    })\r\n  },\r\n};\r\n\r\nexport default authController;"]}
{"version":3,"sources":["../../src/controller/usersController.js"],"names":["nodemailer","require","mongoose","encode","hashCode","usersController","getAllUnreadMessages","req","res","next","decoded","verify","headers","App_key","find","email","err","messages","json","isError","data","getAllMessagesWithFriend","friend","query","date","temp","limit","$or","$and","sender","reciever","$lt","sort","exec","turstUser","trustUserTo","body","dataObj","senderEmail","senderFirstName","first_name","status","update","turstByList","$not","$elemMatch","$push","upsert","result","nModified","unblockUser","unblockUserTo","friends","$set","findOneAndUpdate","blockUserTo","blockBy","users","blockUser","setMsgRead","arrMsgID","_id","arrMsgIDList","map","aField","bulk","collection","initializeUnorderedBulkOp","forEach","item","index","Types","ObjectId","updateOne","isRead","execute","getFriendsList","getUserInfo","redirect","acceptFriendRequest","addUserProfilePic","imgURL","addMessage","Date","create","message","friendReq","to","To","errParent","resultParent","friendsList","isFound","length","unfriend","unfriendTo","getAll","addUserInfo","console","log","updateQuery","last_name","phone_no","new","user","success","userProfile","id","findOne","tokenData","getOne","delete","isActive","ok","forgetPassword","host","d","v","setMinutes","getMinutes","token","sign","exp","Math","floor","createTestAccount","account","transporter","createTransport","service","auth","pass","mailOptions","from","subject","text","html","sendMail","error","info","information","JSON","stringify","mail_response","messageId","getTestMessageUrl","storeBasicUserInfo","isVerified","emailVerification","htmlforemail","emailVerified","params","dt","checkDate","varifyToken","changePassword","password","value","new_pasword","recoverPassword","changeEmail","new_email","old_password"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,aAAaC,QAAQ,YAAR,CAAnB;AACA,IAAIC,WAAWD,QAAQ,UAAR,CAAf;AACA,IAAIE,SAASF,QAAQ,UAAR,EAAoBG,QAAjC;AACA,IAAMC,kBAAkB;AACtBC,wBAAsB,8BAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxC,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA;AACA,4BAAcC,IAAd,CAAmB;AACjB,kBAAYJ,QAAQK,KADH;AAEjB,gBAAU;AAFO,KAAnB,EAGG,UAACC,GAAD,EAAMC,QAAN,EAAmB;AACpB,UAAID,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBC,iBAAS,IADc;AAEvBC,cAAMJ;AAFiB,OAAT,CAAP;AAITR,UAAIU,IAAJ,CAAS;AACPC,iBAAS,KADF;AAEPC,cAAMH;AAFC,OAAT;AAKD,KAbD;AAcD,GAlBqB;;AAqBtBI,4BAA0B,kCAACd,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;;AAE5C,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA;AACA,QAAIS,SAASf,IAAIgB,KAAJ,CAAUH,IAAV,CAAeE,MAA5B;AACA,QAAIE,OAAOjB,IAAIgB,KAAJ,CAAUH,IAAV,CAAeI,IAA1B;AACA,QAAIC,OAAOlB,IAAIgB,KAAJ,CAAUH,IAAV,CAAeM,KAA1B;AACA,QAAIA,QAAQ,EAAZ;;AAEA,QAAIH,QAAQ,EAAZ;AACA,QAAIC,IAAJ,EAAU;AACRD,cAAQ;AACNI,aAAK,CACH,EAAEC,MAAM,CAAC,EAAEC,QAAQnB,QAAQK,KAAlB,EAAD,EAA4B,EAAEe,UAAUR,MAAZ,EAA5B,CAAR,EADG,EAEH,EAAEM,MAAM,CAAC,EAAEC,QAAQP,MAAV,EAAD,EAAqB,EAAEQ,UAAUpB,QAAQK,KAApB,EAArB,CAAR,EAFG,CADC;AAKN,gBAAQ,EAAEgB,KAAKP,IAAP;AALF,OAAR;AAOD,KARD,MAQO;AACLD,cAAQ;AACNI,aAAK,CACH,EAAEC,MAAM,CAAC,EAAEC,QAAQnB,QAAQK,KAAlB,EAAD,EAA4B,EAAEe,UAAUR,MAAZ,EAA5B,CAAR,EADG,EAEH,EAAEM,MAAM,CAAC,EAAEC,QAAQP,MAAV,EAAD,EAAqB,EAAEQ,UAAUpB,QAAQK,KAApB,EAArB,CAAR,EAFG;AADC,OAAR;AAMD;AACD,4BAAcD,IAAd,CACES,KADF,EAEES,IAFF,CAEO,EAAE,QAAQ,CAAC,CAAX,EAFP,EAEuBN,KAFvB,CAE6B,EAF7B,EAKCO,IALD,CAKM,UAASjB,GAAT,EAAcC,QAAd,EAAwB;AAC5B,UAAID,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBC,iBAAS,IADc;AAEvBC,cAAMJ;AAFiB,OAAT,CAAP;AAITR,UAAIU,IAAJ,CAAS;AACPC,iBAAS,KADF;AAEPC,cAAMH;AAFC,OAAT;AAID,KAdD;AAeD,GA9DqB;;AAgEtBiB,aAAW,mBAAC3B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7B,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;;AAEA,QAAIsB,cAAc5B,IAAI6B,IAAJ,CAASD,WAA3B;AACE;;AAEF,QAAIE,UAAU;AACVC,mBAAa5B,QAAQK,KADX;AAEVwB,uBAAiB7B,QAAQ8B,UAFf;AAGVC,cAAQ;AAEV;;AALY,KAAd,CAOA,qBAAWC,MAAX,CAAkB;AAChBd,YAAM,CAAC,EAAEb,OAAOoB,WAAT,EAAD,EAAyB,EAAEQ,aAAa,EAAEC,MAAM,EAAEC,YAAY,EAAE,eAAenC,QAAQK,KAAzB,EAAd,EAAR,EAAf,EAAzB;;AADU,KAAlB,EAGG,EAAE+B,OAAO,EAAE,WAAWT,OAAb,EAAT,EAHH,EAGsC;AACpCU,cAAQ;AAD4B,KAHtC,EAKG,UAAS/B,GAAT,EAAcgC,MAAd,EAAsB;AACvB,UAAIhC,GAAJ,EAAS;AACPR,YAAIU,IAAJ,CAAS;AACPC,mBAAS,IADF;AAEPC,gBAAM4B;AAFC,SAAT;AAIA;AACD,OAND,MAMO;AACL;AACA,YAAIA,OAAOC,SAAX,EAAsB;AACpBzC,cAAIU,IAAJ,CAAS;AACPC,qBAAS,KADF;AAEPC,kBAAM4B;AAFC,WAAT;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,SAnBD,MAmBO;AACLxC,cAAIU,IAAJ,CAAS;AACPC,qBAAS,IADF;AAEPC,kBAAMJ;AAFC,WAAT;AAKD;AACF;AACF,KAzCD;AA4CD,GAzHqB;;AA2HtBkC,eAAa,qBAAC3C,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/B,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,QAAIsC,gBAAgB5C,IAAI6B,IAAJ,CAASe,aAA7B;AACA,QAAId,UAAU;AACVC,mBAAa5B,QAAQK,KADX;AAEVwB,uBAAiB7B,QAAQ8B,UAFf;AAGVC,cAAQ;AAEV;;AALY,KAAd,CAOA,qBAAWC,MAAX,CAAkB;AAChBd,YAAM,CAAC,EAAEb,OAAOL,QAAQK,KAAjB,EAAD,EAA2B,EAAEqC,SAAS,EAAEP,YAAY,EAAE,eAAeM,aAAjB,EAAd,EAAX,EAA3B;;AADU,KAAlB,EAGG,EAAEE,MAAM,EAAE,oBAAoB,QAAtB,EAAR,EAHH,EAG+C,UAASrC,GAAT,EAAcgC,MAAd,EAAsB;AACnE,UAAIhC,GAAJ,EAAS;AACP;AACD,OAFD,MAEO;AACL;AACA,YAAIgC,OAAOC,SAAX,EAAsB;AACpB,+BAAWK,gBAAX,CAA4B;AAC1B,qBAASC;AADiB,WAA5B,EAEG,EAAET,OAAO,EAAEU,SAASnB,OAAX,EAAT,EAFH,EAEoC;AAClCU,oBAAQ;AAD0B,WAFpC,EAIG,UAAC/B,GAAD,EAAMyC,KAAN,EAAgB;AACjB,gBAAIzC,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBC,uBAAS,IADc;AAEvBC,oBAAMJ;AAFiB,aAAT,CAAP;AAITR,gBAAIU,IAAJ,CAAS;AACPC,uBAAS,KADF;AAEPC,oBAAM4B;AAFC,aAAT;AAID,WAbD;AAcD;AACF;AACF,KAzBD;AA6BD,GAlKqB;AAmKtBU,aAAW,mBAACnD,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7B,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,QAAI0C,cAAchD,IAAI6B,IAAJ,CAASmB,WAA3B;AACA,QAAIlB,UAAU;AACZC,mBAAa5B,QAAQK,KADT;AAEZwB,uBAAiB7B,QAAQ8B,UAFb;AAGZC,cAAQ;AAHI,KAAd;AAKA,yBAAWC,MAAX,CAAkB;AAChBd,YAAM,CAAC,EAAEb,OAAOL,QAAQK,KAAjB,EAAD,EAA2B,EAAEqC,SAAS,EAAEP,YAAY,EAAE,eAAeU,WAAjB,EAAd,EAAX,EAA3B;;AADU,KAAlB,EAGG,EAAEF,MAAM,EAAE,oBAAoB,SAAtB,EAAR,EAHH,EAGgD,UAASrC,GAAT,EAAcgC,MAAd,EAAsB;AACpE,UAAIhC,GAAJ,EAAS;AACP;AACD,OAFD,MAEO;AACL;AACA,YAAIgC,OAAOC,SAAX,EAAsB;AACpB,+BAAWK,gBAAX,CAA4B;AAC1B,qBAASC;AADiB,WAA5B,EAEG,EAAET,OAAO,EAAEM,SAASf,OAAX,EAAT,EAFH,EAEoC;AAClCU,oBAAQ;AAD0B,WAFpC,EAIG,UAAC/B,GAAD,EAAMyC,KAAN,EAAgB;AACjB,gBAAIzC,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBC,uBAAS,IADc;AAEvBC,oBAAMJ;AAFiB,aAAT,CAAP;AAITR,gBAAIU,IAAJ,CAAS;AACPC,uBAAS,KADF;AAEPC,oBAAM4B;AAFC,aAAT;AAID,WAbD;AAcD;AACF;AACF,KAzBD;AA4BD,GAvMqB;AAwMtBW,cAAY,oBAACpD,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC9B;AACA,QAAImD,WAAW,EAAf;AACAA,eAAWrD,IAAI6B,IAAJ,CAAShB,IAApB;AACA;AACA,QAAIyC,MAAM,EAAV;AACA,QAAIC,eAAeF,SAASG,GAAT,CAAa,UAASC,MAAT,EAAiB;;AAE/C,aAAOA,MAAP;AACE;AACH,KAJkB,CAAnB;;AAOA,QAAIC,OAAO,wBAAcC,UAAd,CAAyBC,yBAAzB,EAAX;;AAEAP,aAASQ,OAAT,CAAiB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAChCT,YAAM3D,SAASqE,KAAT,CAAeC,QAAf,CAAwBH,IAAxB,CAAN;AACE;AACFJ,WAAKnD,IAAL,CAAU,EAAE+C,KAAKA,GAAP,EAAV,EAAwBY,SAAxB,CAAkC,EAAEpB,MAAM,EAAEqB,QAAQ,IAAV,EAAR,EAAlC;AAED,KALD;AAMAT,SAAKU,OAAL,CAAa,UAAC3D,GAAD,EAAMC,QAAN,EAAmB;AAC9B,UAAID,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBC,iBAAS,IADc;AAEvBC,cAAMJ;AAFiB,OAAT,CAAP;AAITR,UAAIU,IAAJ,CAAS;AACPC,iBAAS,KADF;AAEPC,cAAMH;AAFC,OAAT;AAID,KATD;AAiBD,GA9OqB;AA+OtB2D,kBAAgB,wBAACrE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClC,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA;AACA,yBAAWC,IAAX,CAAgB;AACd,eAASJ,QAAQK;AADH,KAAhB,EAEG,EAAE,WAAW,CAAb,EAAgB,OAAO,CAAvB,EAFH,EAE+B,UAACC,GAAD,EAAMyC,KAAN,EAAgB;AAC7C,UAAIzC,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBC,iBAAS,IADc;AAEvBC,cAAMJ;AAFiB,OAAT,CAAP;AAITR,UAAIU,IAAJ,CAAS;AACPC,iBAAS,KADF;AAEPC,cAAMqC;AAFC,OAAT;AAID,KAXD;AAYD,GA9PqB;AA+PtBoB,eAAa,qBAACtE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/B,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA;AACA,yBAAWC,IAAX,CAAgB;AACd,eAASJ,QAAQK;AADH,KAAhB,EAEG,UAACC,GAAD,EAAMyC,KAAN,EAAgB;AACjB,UAAIzC,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBC,iBAAS,IADc;AAEvBC,cAAMJ;AAFiB,OAAT,CAAP;AAIT;AACA,UAAIyC,KAAJ,EAAW;AACTjD,YAAIU,IAAJ,CAAS;AACPC,mBAAS,KADF;AAEPC,gBAAMqC;AAFC,SAAT;AAID,OALD,MAKO;AACLjD,YAAIsE,QAAJ,CAAa,UAAb;AACD;AAEF,KAjBD;AAkBD,GApRqB;;AAuRtBC,uBAAqB,6BAACxE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvC,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,QAAIyB,cAAc/B,IAAI6B,IAAJ,CAASE,WAA3B;AACA,QAAID,UAAU;AACZC,mBAAa5B,QAAQK,KADT;AAEZwB,uBAAiB7B,QAAQ8B,UAFb;AAGZC,cAAQ;AAHI,KAAd;;AAMA,yBAAWC,MAAX,CAAkB;AAChBd,YAAM,CAAC,EAAEb,OAAOL,QAAQK,KAAjB,EAAD,EAA2B,EAAEqC,SAAS,EAAEP,YAAY,EAAE,eAAeP,WAAjB,EAAd,EAAX,EAA3B;;AADU,KAAlB,EAGG,EAAEe,MAAM,EAAE,oBAAoB,QAAtB,EAAR,EAHH,EAG+C,UAASrC,GAAT,EAAcgC,MAAd,EAAsB;AACnE,UAAIhC,GAAJ,EAAS;AACPR,YAAIU,IAAJ,CAAS;AACPC,mBAAS,IADF;AAEPC,gBAAMJ;AAFC,SAAT;AAID,OALD,MAKO;AACL;AACA,YAAIgC,OAAOC,SAAX,EAAsB;AACpB,+BAAWK,gBAAX,CAA4B;AAC1B,qBAAShB;AADiB,WAA5B,EAEG,EAAEQ,OAAO,EAAEM,SAASf,OAAX,EAAT,EAFH,EAEoC;AAClCU,oBAAQ;AAD0B,WAFpC,EAIG,UAAC/B,GAAD,EAAMyC,KAAN,EAAgB;AACjB,gBAAIzC,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBC,uBAAS,IADc;AAEvBC,oBAAMJ;AAFiB,aAAT,CAAP;AAITR,gBAAIU,IAAJ,CAAS;AACPC,uBAAS,KADF;AAEPC,oBAAM4B;AAFC,aAAT;AAID,WAbD;AAcD;AACF;AACF,KA5BD;AA8BD,GA9TqB;;AAkUtBgC,qBAAmB,2BAACzE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrC,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,QAAIoE,SAAS1E,IAAI6B,IAAJ,CAAS6C,MAAtB;AACA,yBAAW3B,gBAAX,CAA4B;AAC1B,eAAS5C,QAAQK;AADS,KAA5B,EAEG;AACDsC,YAAM;AACJ4B,gBAAQA;AADJ;AADL,KAFH,EAMG,UAACjE,GAAD,EAAMI,IAAN,EAAe;AAChB,UAAIJ,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBC,iBAAS,IADc;AAEvBC,cAAMJ;AAFiB,OAAT,CAAP,CAAT,KAIK;AACHR,YAAIU,IAAJ,CAAS;AACPC,mBAAS,KADF;AAEPC,gBAAMA;AAFC,SAAT;AAID;AACF,KAjBD;AAkBD,GAvVqB;AAwVtB8D,cAAY,oBAAC3E,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC9B,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,QAAIgB,SAASnB,QAAQK,KAArB;AACA,QAAIK,OAAOb,IAAI6B,IAAf;AACAhB,SAAKS,MAAL,GAAcA,MAAd;AACAT,SAAKI,IAAL,GAAY,IAAI2D,IAAJ,EAAZ;AACA;AACA,4BAAcC,MAAd,CAAqBhE,IAArB,EAA2B,UAASJ,GAAT,EAAcqE,OAAd,EAAuB;AAChD,UAAIrE,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBC,iBAAS,IADc;AAEvBC,cAAMJ;AAFiB,OAAT,CAAP;AAITR,UAAIU,IAAJ,CAAS;AACPC,iBAAS,KADF;AAEPC,cAAMiE;AAFC,OAAT;AAID,KATD;AAUD,GAzWqB;;AA2WtBC,aAAW,mBAAC/E,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7B,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,QAAI0E,KAAKhF,IAAI6B,IAAJ,CAASoD,EAAlB;AACA;;AAEA,QAAInD,UAAU;AACVC,mBAAa5B,QAAQK,KADX;AAEVwB,uBAAiB7B,QAAQ8B,UAFf;AAGVC,cAAQ;AAEV;AALY,KAAd,CAMA,qBAAW3B,IAAX,CAAgB,EAAE,SAASyE,EAAX,EAAhB,EAAiC,UAACE,SAAD,EAAYC,YAAZ,EAA6B;AAC5D,UAAI,CAACD,SAAL,EAAgB;AACd,YAAIE,cAAcD,aAAa,CAAb,EAAgBtC,OAAhB,IAA2B,EAA7C;AACA;AACA,YAAIwC,UAAUD,YAAY7E,IAAZ,CAAiB,UAACuD,IAAD;AAAA,iBAAUA,KAAK/B,WAAL,IAAoB5B,QAAQK,KAAtC;AAAA,SAAjB,CAAd;AACA,YAAI6E,OAAJ,EAAa;AACXpF,cAAIU,IAAJ,CAAS;AACPC,qBAAS,KADF;AAEPyE,qBAAS;AAFF,WAAT;AAID;AACD;AACA,YAAI,CAACA,OAAD,IAAYD,YAAYE,MAAZ,KAAuB,CAAvC,EAA0C;AACxC;AACA,+BAAWvC,gBAAX,CAA4B;AAC1B,qBAASiC;AADiB,WAA5B,EAEG,EAAEzC,OAAO,EAAEM,SAASf,OAAX,EAAT,EAFH,EAEoC;AAClCU,oBAAQ;AAD0B,WAFpC,EAIG,UAAC/B,GAAD,EAAMyC,KAAN,EAAgB;AACjB,gBAAIzC,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBC,uBAAS,IADc;AAEvBC,oBAAMJ;AAFiB,aAAT,CAAP;AAITR,gBAAIU,IAAJ,CAAS;AACPC,uBAAS,KADF;AAEPC,oBAAMqC;AAFC,aAAT;AAID,WAbD;AAcD;AACF;AACF,KA9BD;AA+BD,GArZqB;AAsZtBqC,YAAU,kBAACvF,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC5B,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,QAAIkF,aAAaxF,IAAI6B,IAAJ,CAAS2D,UAA1B;;AAEA;;;AAGA,yBAAWrD,MAAX,CAAkB;AAChBd,YAAM,CAAC,EAAEb,OAAOL,QAAQK,KAAjB,EAAD,EAA2B,EAAEqC,SAAS,EAAEP,YAAY,EAAE,eAAekD,UAAjB,EAAd,EAAX,EAA3B;;AADU,KAAlB,EAGG,EAAE1C,MAAM,EAAE,oBAAoB,UAAtB,EAAR,EAHH,EAGiD,UAASrC,GAAT,EAAcgC,MAAd,EAAsB;AACrE,UAAIhC,GAAJ,EAAS;AACPR,YAAIU,IAAJ,CAAS;AACPC,mBAAS,IADF;AAEPC,gBAAMJ;AAFC,SAAT;AAID,OALD,MAKO;AACL;AACA,YAAIgC,OAAOC,SAAX,EAAsB;AACpB,+BAAWK,gBAAX,CAA4B;AAC1B,qBAASC;AADiB,WAA5B,EAEG,EAAET,OAAO,EAAEM,SAASf,OAAX,EAAT,EAFH,EAEoC;AAClCU,oBAAQ;AAD0B,WAFpC,EAIG,UAAC/B,GAAD,EAAMyC,KAAN,EAAgB;AACjB,gBAAIzC,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBC,uBAAS,IADc;AAEvBC,oBAAMJ;AAFiB,aAAT,CAAP;AAITR,gBAAIU,IAAJ,CAAS;AACPC,uBAAS,KADF;AAEPC,oBAAM4B;AAFC,aAAT;AAID,WAbD;AAcD;AACF;AACF,KA5BD;AAkCD,GA/bqB;;AAictBgD;AAAA,uEAAQ,iBAAMzF,GAAN,EAAWC,GAAX,EAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AACN,mCAAWK,IAAX,CAAgB,EAAhB,EAAoB,UAACE,GAAD,EAAMyC,KAAN,EAAgB;AAClC,oBAAIzC,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBC,2BAAS,IADc;AAEvBC,wBAAMJ;AAFiB,iBAAT,CAAP;AAITR,oBAAIU,IAAJ,CAAS;AACPC,2BAAS,KADF;AAEPC,wBAAMqC;AAFC,iBAAT;AAID,eATD;;AADM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,KAjcsB;AA8ctBwC,eAAa,qBAAC1F,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/B,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACAqF,YAAQC,GAAR,CAAY,iBAAZ,EAA+BzF,QAAQK,KAAvC,EAA8CR,IAAI6B,IAAlD,EAAwD7B,IAAIgB,KAA5D;;AAEA,QAAI6E,cAAc;AAChB5D,kBAAYjC,IAAI6B,IAAJ,CAASI,UADL;AAEhB6D,iBAAW9F,IAAI6B,IAAJ,CAASiE,SAFJ;AAGhBC,gBAAU/F,IAAI6B,IAAJ,CAASkE,QAHH;AAIhBvF,aAAOR,IAAI6B,IAAJ,CAASrB;AAJA,KAAlB;AAMA,yBAAWuC,gBAAX,CAA4B;;AAE1B,eAAS5C,QAAQK;AAFS,KAA5B,EAGG;AACDsC,YAAM+C;AADL,KAHH,EAKG;AACDG,WAAK;AADJ,KALH,EAOG,UAACvF,GAAD,EAAMwF,IAAN,EAAe;AAChB,UAAIxF,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBuF,iBAAS,KADc;AAEvBrF,cAAMJ;AAFiB,OAAT,CAAP;AAITR,UAAIU,IAAJ,CAAS;AACPuF,iBAAS,IADF;AAEPrF,cAAMoF;AAFC,OAAT;AAID,KAhBD;AAkBD,GA1eqB;AA2etBE,eAAa,qBAACnG,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/B;;AAEA,QAAIoD,MAAM3D,SAASqE,KAAT,CAAeC,QAAf,CAAwBjE,IAAIgB,KAAJ,CAAUoF,EAAlC,CAAV;AACA;AACA,yBAAWC,OAAX,CAAmB;AACjB/C,WAAKA;AADY,KAAnB,EAEG,UAAC7C,GAAD,EAAMwF,IAAN,EAAe;;AAEhB,UAAIxF,GAAJ,EAAS;AACPR,YAAIU,IAAJ,CAAS;AACPC,mBAAS,IADF;AAEPC,gBAAMJ;AAFC,SAAT;AAID,OALD,MAKO;AACL,YAAID,QAAQyF,KAAKzF,KAAjB;AACA;AACA,YAAIyF,IAAJ,EAAU;AACR,+BAAWI,OAAX,CAAmB,EAAE,SAAS7F,KAAX,EAAnB,EAAuC,UAACC,GAAD,EAAM6F,SAAN,EAAoB;AACzDrG,gBAAIU,IAAJ,CAAS;AACPC,uBAAS,KADF;AAEPC,oBAAM,EAAEoF,MAAMA,IAAR,EAAcK,WAAWA,SAAzB;AAFC,aAAT;AAID,WALD,EAKG7E,IALH,CAKQ,EAAE6B,KAAK,CAAC,CAAR,EALR,EAKqBnC,KALrB,CAK2B,CAL3B;AAMD;AAGF;AACF,KAvBD;AAwBD,GAxgBqB;;AA2gBtBoF,UAAQ,gBAACvG,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B;AACA,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,yBAAW+F,OAAX,CAAmB;AACjB,eAASlG,QAAQK;AADA,KAAnB,EAEG,UAACC,GAAD,EAAMwF,IAAN,EAAe;AAChB,UAAIxF,GAAJ,EAAS;AACPR,YAAIU,IAAJ,CAAS;AACPC,mBAAS,IADF;AAEPC,gBAAMJ;AAFC,SAAT;AAID,OALD,MAKO;AACLR,YAAIU,IAAJ,CAAS;AACPC,mBAAS,KADF;AAEPC,gBAAMoF;AAFC,SAAT;AAID;AACF,KAdD;AAeD,GA7hBqB;;AA+hBtBpB,UAAQ,gBAAC7E,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B,yBAAW2E,MAAX,CAAkB7E,IAAI6B,IAAtB,EAA4B,UAASpB,GAAT,EAAcwF,IAAd,EAAoB;AAC9C,UAAIxF,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBC,iBAAS,IADc;AAEvBC,cAAMJ;AAFiB,OAAT,CAAP;AAITR,UAAIU,IAAJ,CAAS;AACPC,iBAAS,KADF;AAEPC,cAAMoF;AAFC,OAAT;AAID,KATD;AAUD,GA1iBqB;;AA4iBtB9D,UAAQ,gBAACnC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B;AACA,yBAAW6C,gBAAX,CAA4B;AAC1B,aAAO/C,IAAI6B,IAAJ,CAASuE;AADU,KAA5B,EAEGpG,IAAI6B,IAFP,EAEa;AACXmE,WAAK;AADM,KAFb,EAIG,UAACvF,GAAD,EAAMwF,IAAN,EAAe;AAChB,UAAIxF,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBC,iBAAS,IADc;AAEvBC,cAAMJ;AAFiB,OAAT,CAAP;AAITR,UAAIU,IAAJ,CAAS;AACPC,iBAAS,KADF;AAEPC,cAAMoF;AAFC,OAAT;AAID,KAbD;AAcD,GA5jBqB;;AA8jBtBO,UAAQ,iBAACxG,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,yBAAWyC,gBAAX,CAA4B;AAC1B,eAAS5C,QAAQK;AADS,KAA5B,EAEG;AACDiG,gBAAU;AADT,KAFH,EAIG,UAAChG,GAAD,EAAMiG,EAAN,EAAa;AACd,UAAIjG,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBC,iBAAS,IADc;AAEvBC,cAAMJ;AAFiB,OAAT,CAAP,CAAT,KAIK;AACHR,YAAIU,IAAJ,CAAS;AACPC,mBAAS,IADF;AAEPC,gBAAM;AAFC,SAAT;AAID;AACF,KAfD;AAgBD,GAhlBqB;AAilBtB8F,kBAAgB,wBAAC3G,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClC,QAAIM,QAAQR,IAAI6B,IAAJ,CAASrB,KAArB;AACA,QAAIoG,OAAO5G,IAAIK,OAAJ,CAAYuG,IAAvB;;AAEA,yBAAWrG,IAAX,CAAgB;AACd,eAASP,IAAI6B,IAAJ,CAASrB;AADJ,KAAhB,EAEG,UAASC,GAAT,EAAcgC,MAAd,EAAsB;AACvB,UAAIhC,GAAJ,EAAS;AACPR,YAAIU,IAAJ,CAAS;AACPC,mBAAS,IADF;AAEPC,gBAAMJ;AAFC,SAAT;AAID,OALD,MAKO;AACL,YAAIgC,UAAU,EAAd,EAAkB;AAChB,cAAIoE,IAAI,IAAIjC,IAAJ,EAAR;AACA,cAAIkC,IAAI,IAAIlC,IAAJ,EAAR;AACAkC,YAAEC,UAAF,CAAaF,EAAEG,UAAF,KAAiB,EAA9B;AACA,cAAMC,QAAQ,uBAAIC,IAAJ,CAAS;AACrBC,iBAAKC,KAAKC,KAAL,CAAWP,CAAX,CADgB;AAErBtG,mBAAOR,IAAI6B,IAAJ,CAASrB;AAFK,WAAT,EAGX,cAAIF,OAHO,CAAd;AAIA;AACAb,qBAAW6H,iBAAX,CAA6B,UAAC7G,GAAD,EAAM8G,OAAN,EAAkB;AAC7C;AACA,gBAAIC,cAAc/H,WAAWgI,eAAX,CAA2B;AAC3CC,uBAAS,OADkC;AAE3CC,oBAAM;AACJ1B,sBAAM,0BADF;AAEJ2B,sBAAM;AAFF;AAFqC,aAA3B,CAAlB;;AAQA;AACA,gBAAIC,cAAc;AAChBC,oBAAM,0BADU,EACkB;AAClC9C,kBAAIxE,KAFY,EAEL;AACXuH,uBAAS,qBAHO,EAGgB;AAChCC,oBAAM,mEAJU,EAI2D;AAC3EC,oBAAM,oBAAoBrB,IAApB,GAA2B,uBAA3B,GAAqDK,KAArD,GAA6D,gCALnD,CAKoF;;AAEpG;AAPgB,aAAlB;AASA;;AAEA;AACAO,wBAAYU,QAAZ,CAAqBL,WAArB,EAAkC,UAACM,KAAD,EAAQC,IAAR,EAAiB;AACjD,kBAAIC,cAAcC,KAAKC,SAAL,CAAeH,IAAf,CAAlB;;AAEA;AACA,2CAAmBvD,MAAnB,CAA0B;AACxB,yBAASrE,KADe;AAExB,yBAAS2H,KAFe;AAGxB,wBAAQE;AAHgB,eAA1B,EAIG,UAAS5H,GAAT,EAAc+H,aAAd,EAA6B;AAC9B,oBAAI/H,GAAJ,EAAS;AACPR,sBAAIU,IAAJ,CAAS;AACPC,6BAAS,IADF;AAEPC,0BAAMJ;AAFC,mBAAT;AAIAkF,0BAAQC,GAAR,CAAY,4BAAZ,EAA0CnF,GAA1C;AACD;AACF,eAZD;;AAeA,kBAAI0H,KAAJ,EAAW;AACT,uBADS,CACF;AACPlI,oBAAIU,IAAJ,CAAS;AACPC,2BAAS,IADF;AAEPC,wBAAMsH;AAFC,iBAAT;AAID,eAND,MAMO;AACLxC,wBAAQC,GAAR,CAAY,kBAAZ,EAAgCwC,KAAKK,SAArC;AACA9C,wBAAQC,GAAR,CAAY,iBAAZ,EAA+BnG,WAAWiJ,iBAAX,CAA6BN,IAA7B,CAA/B;AACAnI,oBAAIU,IAAJ,CAAS;AACPC,2BAAS,KADF;AAEPC,wBAAM;AAFC,iBAAT;AAKD;;AAED;AACA;AACA;AACD,aAtCD;;AAwCA;;AAEA;AACD,WAlED;AAmED,SA5ED,MA4EO;AACLZ,cAAIU,IAAJ,CAAS;AACPC,qBAAS,IADF;AAEPC,kBAAM;AAFC,WAAT;AAID;AACF;AACF,KA5FD;AA6FD,GAlrBqB;;AAorBtB8H,sBAAoB,4BAAC3I,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACtC,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,QAAI8F,KAAKpG,IAAI6B,IAAJ,CAASuE,EAAlB;AACA,yBAAWrD,gBAAX,CAA4B;AAC1B,eAAS5C,QAAQK;AADS,KAA5B,EAEG;AACD,mBAAaR,IAAI6B;AADhB,KAFH,EAIG;AACDmE,WAAK;AADJ,KAJH,EAMG,UAACvF,GAAD,EAAMwF,IAAN,EAAe;AAChB,UAAIxF,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBC,iBAAS,IADc;AAEvBC,cAAMJ;AAFiB,OAAT,CAAP;AAITR,UAAIU,IAAJ,CAAS;AACPC,iBAAS,KADF;AAEPC,cAAMoF;AAFC,OAAT;AAID,KAfD;AAgBD,GAvsBqB;;AA0sBtB2C,cAAY,oBAAC5I,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC9B,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA;;AAEA,yBAAWyC,gBAAX,CAA4B;AAC1B,eAAS5C,QAAQK;AADS,KAA5B,EAEG,UAACC,GAAD,EAAMwF,IAAN,EAAe;AAChB,UAAIxF,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBC,iBAAS,IADc;AAEvBC,cAAMJ;AAFiB,OAAT,CAAP;AAITR,UAAIU,IAAJ,CAAS;AACPC,iBAAS,KADF;AAEPC,cAAMoF;AAFC,OAAT;AAID,KAXD;AAaD,GA3tBqB;;AA6tBtB4C,qBAAmB,2BAAC7I,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrC,QAAI0G,OAAO5G,IAAIK,OAAJ,CAAYuG,IAAvB;AACA,QAAIzG,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA;AACA,yBAAWC,IAAX,CAAgB;AACd,eAASJ,QAAQK;AADH,KAAhB,EAEG,UAASC,GAAT,EAAcgC,MAAd,EAAsB;AACvB,UAAIhC,GAAJ,EAAS;AACPR,YAAIU,IAAJ,CAAS;AACPC,mBAAS,IADF;AAEPC,gBAAMJ;AAFC,SAAT;AAID,OALD,MAKO;AACL,YAAIgC,UAAU,EAAd,EAAkB;AAChB,cAAIoE,IAAI,IAAIjC,IAAJ,EAAR;AACA,cAAIkC,IAAI,IAAIlC,IAAJ,EAAR;AACAkC,YAAEC,UAAF,CAAaF,EAAEG,UAAF,KAAiB,EAA9B;AACA,cAAMC,QAAQ,uBAAIC,IAAJ,CAAS;AACrBC,iBAAKC,KAAKC,KAAL,CAAWP,CAAX,CADgB;AAErBtG,mBAAOL,QAAQK;AAFM,WAAT,EAGX,cAAIF,OAHO,CAAd;AAIA;AACAb,qBAAW6H,iBAAX,CAA6B,UAAC7G,GAAD,EAAM8G,OAAN,EAAkB;AAC7C;AACA,gBAAIC,cAAc/H,WAAWgI,eAAX,CAA2B;AAC3CC,uBAAS,OADkC;AAE3CC,oBAAM;AACJ1B,sBAAM,0BADF;AAEJ2B,sBAAM;AAFF;AAFqC,aAA3B,CAAlB;AAOA,gBAAIkB,iBAAJ;AACA,gBAAIjB,cAAc;AAChBC,oBAAM,0BADU,EACkB;AAClC9C,kBAAI7E,QAAQK,KAFI,EAEG;AACnBuH,uBAAS,oBAHO,EAGe;AAC/BC,oBAAM,sDAJU,EAI8C;AAC9DC,oBAAM,wCAAwCrB,IAAxC,GAA+C,MAA/C,GAAwDK,KAAxD,GAAgE;AALtD,aAAlB;AAOAO,wBAAYU,QAAZ,CAAqBL,WAArB,EAAkC,UAACM,KAAD,EAAQC,IAAR,EAAiB;AACjD,2CAAmBvD,MAAnB,CAA0B;AACxB,yBAAS1E,QAAQK,KADO;AAExB,yBAAS2H,KAFe;AAGxB,wBAAQC;AAHgB,eAA1B,EAIG,UAAS3H,GAAT,EAAc+H,aAAd,EAA6B;AAC9B,oBAAI/H,GAAJ,EAAS;AACPkF,0BAAQC,GAAR,CAAY,4BAAZ,EAA0CnF,GAA1C;AACD,iBAFD,MAEO;AACLkF,0BAAQC,GAAR,CAAY,qBAAZ,EAAmC4C,aAAnC;AACD;AACF,eAVD;;AAYA,kBAAIL,KAAJ,EAAW;AACTlI,oBAAIU,IAAJ,CAAS;AACPC,2BAAS,IADF;AAEPC,wBAAMsH;AAFC,iBAAT;AAIA,uBALS,CAKF;AACR,eAND,MAMO;;AAEL;AACA;AACAlI,oBAAIU,IAAJ,CAAS;AACPC,2BAAS,KADF;AAEPC,wBAAM;AAFC,iBAAT;AAID;AACF,aA5BD;AA6BD,WA9CD;AA+CD,SAxDD,MAwDO;AACLZ,cAAIU,IAAJ,CAAS;AACPC,qBAAS,IADF;AAEPC,kBAAM;AAFC,WAAT;AAID;AACF;AACF,KAxED;AAyED,GA1yBqB;;AA4yBtBkI,iBAAe,uBAAC/I,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjC,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIgJ,MAAJ,CAAW/B,KAAtB,EAA6B,cAAI3G,OAAjC,CAAd;AACA,QAAI2I,KAAK,IAAIrE,IAAJ,EAAT;AACA,QAAIsE,YAAY,IAAItE,IAAJ,CAASzE,QAAQgH,GAAjB,CAAhB;AACA,QAAI8B,KAAKC,SAAT,EAAoB;AAClB;AACA,2BAAWnG,gBAAX,CAA4B;AAC1B,iBAAS5C,QAAQK;AADS,OAA5B,EAEG;AACDsC,cAAM;AACJ,yCAA+B;AAD3B;AADL,OAFH,EAMG,UAACrC,GAAD,EAAMwF,IAAN,EAAe;AAChB,YAAIxF,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBC,mBAAS,IADc;AAEvBC,gBAAMJ;AAFiB,SAAT,CAAP;AAITR,YAAIsE,QAAJ,CAAa,YAAb;AACA;AACA;AAED,OAfD;AAgBD,KAlBD,MAkBO;AACLtE,UAAIU,IAAJ,CAAS;AACPC,iBAAS,IADF;AAEPC,cAAM;AAFC,OAAT;AAID;AACF,GAx0BqB;;AA00BtBsI,eAAa,qBAACnJ,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/B;AACA,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIgJ,MAAJ,CAAW/B,KAAtB,EAA6B,cAAI3G,OAAjC,CAAd;AACA,QAAI2I,KAAK,IAAIrE,IAAJ,EAAT;AACA,QAAIsE,YAAY,IAAItE,IAAJ,CAASzE,QAAQgH,GAAjB,CAAhB;AACA,QAAI8B,KAAKC,SAAT,EAAoB;AAClB;AACA,UAAIrC,IAAI,IAAIjC,IAAJ,EAAR;AACA,UAAIkC,IAAI,IAAIlC,IAAJ,EAAR;AACAkC,QAAEC,UAAF,CAAaF,EAAEG,UAAF,KAAiB,EAA9B;AACA,UAAMC,QAAQ,uBAAIC,IAAJ,CAAS;AACrBC,aAAKC,KAAKC,KAAL,CAAWP,CAAX,CADgB;AAErBtG,eAAOL,QAAQK;AAFM,OAAT,EAGX,cAAIF,OAHO,CAAd;AAIAL,UAAIsE,QAAJ,CAAa,cAAc0C,KAA3B;AACD,KAVD,MAUO;AACLhH,UAAIU,IAAJ,CAAS;AACPC,iBAAS,IADF;AAEPC,cAAM;AAFC,OAAT;AAID;AACF,GA/1BqB;AAg2BtBuI,kBAAgB,wBAACpJ,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClC;AACA,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACAN,QAAI6B,IAAJ,CAASwH,QAAT,GAAoBzJ,SAAS0J,KAAT,CAAetJ,IAAI6B,IAAJ,CAASwH,QAAxB,CAApB;AACArJ,QAAI6B,IAAJ,CAAS0H,WAAT,GAAuB3J,SAAS0J,KAAT,CAAetJ,IAAI6B,IAAJ,CAAS0H,WAAxB,CAAvB;AACA,yBAAWxG,gBAAX,CAA4B;AAC1B1B,YAAM,CAAC;AACL,oBAAYrB,IAAI6B,IAAJ,CAASwH;AADhB,OAAD,EAEH;AACD,iBAASlJ,QAAQK;AADhB,OAFG;AADoB,KAA5B,EAMG;AACDsC,YAAM;AACJ,oBAAY9C,IAAI6B,IAAJ,CAAS0H;AADjB;AADL,KANH,EAUG,UAAC9I,GAAD,EAAMwF,IAAN,EAAe;AAChB,UAAIxF,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBC,iBAAS,IADc;AAEvBC,cAAMJ;AAFiB,OAAT,CAAP;AAITR,UAAIU,IAAJ,CAAS;AACPC,iBAAS,KADF;AAEPC,cAAMoF;AAFC,OAAT;AAIA;AACD,KApBD;AAqBD,GA13BqB;AA23BtBuD,mBAAiB,yBAACxJ,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnC;AACA,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,QAAIN,IAAI6B,IAAJ,CAASwH,QAAT,IAAqB,EAArB,IAA2BrJ,IAAI6B,IAAJ,CAASwH,QAAT,CAAkB/D,MAAlB,GAA2B,CAA1D,EAA6D;AAC3DtF,UAAI6B,IAAJ,CAASwH,QAAT,GAAoBzJ,SAAS0J,KAAT,CAAetJ,IAAI6B,IAAJ,CAASwH,QAAxB,CAApB;AACA,UAAIH,YAAY,IAAItE,IAAJ,CAASzE,QAAQgH,GAAjB,CAAhB;AACA,UAAI8B,KAAK,IAAIrE,IAAJ,EAAT;AACA;AACA,UAAIqE,KAAKC,SAAT,EAAoB;AAClB,6BAAWnG,gBAAX,CAA4B;AAC1B,mBAAS5C,QAAQK;AADS,SAA5B,EAEG;AACDsC,gBAAM;AACJ,wBAAY9C,IAAI6B,IAAJ,CAASwH;AADjB;AADL,SAFH,EAMG,UAAC5I,GAAD,EAAMwF,IAAN,EAAe;AAChB,cAAIxF,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAASF,GAAT,CAAP;AACTR,cAAIU,IAAJ,CAAS;AACPC,qBAAS,KADF;AAEPC,kBAAMoF;AAFC,WAAT;AAID,SAZD;AAaD,OAdD,MAcO;AACLhG,YAAIU,IAAJ,CAAS;AACPC,mBAAS,IADF;AAEPC,gBAAM;AAFC,SAAT;AAID;AACF,KAzBD,MAyBO;AACLZ,UAAIU,IAAJ,CAAS;AACPC,iBAAS,IADF;AAEPC,cAAM;AAFC,OAAT;AAID;AAEF,GA95BqB;AA+5BtB4I,eAAa,qBAACzJ,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/B,QAAIF,IAAI6B,IAAJ,CAAS6H,SAAb,EAAwB;AACtB1J,UAAI6B,IAAJ,CAASwH,QAAT,GAAoBzJ,SAAS0J,KAAT,CAAetJ,IAAI6B,IAAJ,CAAS8H,YAAxB,CAApB;AACA,2BAAW5G,gBAAX,CAA4B;AAC1B1B,cAAM,CAAC;AACL,sBAAYrB,IAAI6B,IAAJ,CAASwH;AADhB,SAAD,EAEH;AACD,mBAASrJ,IAAI6B,IAAJ,CAASrB;AADjB,SAFG;AADoB,OAA5B,EAMG;AACDsC,cAAM;AACJ,mBAAS9C,IAAI6B,IAAJ,CAAS6H;AADd;AADL,OANH,EAUG,UAACjJ,GAAD,EAAMwF,IAAN,EAAe;AAChB,YAAIxF,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS;AACvBC,mBAAS,IADc;AAEvBC,gBAAMJ;AAFiB,SAAT,CAAP;AAITR,YAAIU,IAAJ,CAAS;AACPC,mBAAS,KADF;AAEPC,gBAAMoF;AAFC,SAAT;AAID,OAnBD;AAoBD,KAtBD,MAsBO;AACLhG,UAAIU,IAAJ,CAAS;AACPC,iBAAS,IADF;AAEPC,cAAM;AAFC,OAAT;AAID;AACF;;AA57BqB,CAAxB;;kBAk8Bef,e","file":"usersController.js","sourcesContent":["import usersModel from '../models/usersModel'\r\nimport tokenModel from './../models/tokenModel';\r\nimport messagesModel from '../models/messagesModel'\r\n\r\nimport mail_responseModel from '../models/mail_responseModel'\r\nimport postatrade from '../models/postatrade'\r\nimport jwt from 'jsonwebtoken';\r\nimport env from \"../env\";\r\n\r\nconst nodemailer = require('nodemailer');\r\nvar mongoose = require('mongoose');\r\nvar encode = require('hashcode').hashCode;\r\nconst usersController = {\r\n  getAllUnreadMessages: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    //console.log(\"getAllMessages reqest from==>\", decoded.email)\r\n    messagesModel.find({\r\n      'reciever': decoded.email,\r\n      'isRead': false,\r\n    }, (err, messages) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: messages\r\n      });\r\n\r\n    });\r\n  },\r\n\r\n\r\n  getAllMessagesWithFriend: (req, res, next) => {\r\n\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    // //console.log(\"getAllMessagesWithFriend reqest from==>\", decoded.email, req.query.data)\r\n    var friend = req.query.data.friend;\r\n    var date = req.query.data.date;\r\n    var temp = req.query.data.limit;\r\n    var limit = '';\r\n\r\n    var query = '';\r\n    if (date) {\r\n      query = {\r\n        $or: [\r\n          { $and: [{ sender: decoded.email }, { reciever: friend }] },\r\n          { $and: [{ sender: friend }, { reciever: decoded.email }] }\r\n        ],\r\n        \"date\": { $lt: date }\r\n      }\r\n    } else {\r\n      query = {\r\n        $or: [\r\n          { $and: [{ sender: decoded.email }, { reciever: friend }] },\r\n          { $and: [{ sender: friend }, { reciever: decoded.email }] }\r\n        ]\r\n      }\r\n    }\r\n    messagesModel.find(\r\n      query\r\n    ).sort({ 'date': -1 }).limit(10)\r\n\r\n\r\n    .exec(function(err, messages) {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: messages\r\n      });\r\n    });\r\n  },\r\n\r\n  turstUser: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n\r\n    var trustUserTo = req.body.trustUserTo\r\n      //console.log(\"turstUser==>\", req.body);\r\n\r\n    var dataObj = {\r\n        senderEmail: decoded.email,\r\n        senderFirstName: decoded.first_name,\r\n        status: 'trust'\r\n      }\r\n      //console.log(\"turstUser==>\", trustUserTo, dataObj);\r\n\r\n    usersModel.update({\r\n      $and: [{ email: trustUserTo }, { turstByList: { $not: { $elemMatch: { 'senderEmail': decoded.email } } } }]\r\n\r\n    }, { $push: { 'trustBy': dataObj } }, {\r\n      upsert: true\r\n    }, function(err, result) {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: result\r\n        });\r\n        //console.log(err);\r\n      } else {\r\n        //console.log(result);\r\n        if (result.nModified) {\r\n          res.json({\r\n            isError: false,\r\n            data: result\r\n          });\r\n          // usersModel.findOneAndUpdate({\r\n          //   'email': blockUserTo\r\n          // }, { $push: { blockBy: dataObj } }, {\r\n          //   upsert: true\r\n          // }, (err, users) => {\r\n          //   if (err) return res.json({\r\n          //     isError: true,\r\n          //     data: err\r\n          //   });\r\n          //   res.json({\r\n          //     isError: false,\r\n          //     data: result\r\n          //   });\r\n          // });\r\n        } else {\r\n          res.json({\r\n            isError: true,\r\n            data: err\r\n          });\r\n\r\n        }\r\n      }\r\n    })\r\n\r\n\r\n  },\r\n\r\n  unblockUser: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var unblockUserTo = req.body.unblockUserTo\r\n    var dataObj = {\r\n        senderEmail: decoded.email,\r\n        senderFirstName: decoded.first_name,\r\n        status: 'Unblocked'\r\n      }\r\n      //console.log(\"unblockUser=>\", decoded.email, dataObj);\r\n\r\n    usersModel.update({\r\n      $and: [{ email: decoded.email }, { friends: { $elemMatch: { 'senderEmail': unblockUserTo } } }]\r\n\r\n    }, { $set: { \"friends.$.status\": 'Friend' } }, function(err, result) {\r\n      if (err) {\r\n        //console.log(err);\r\n      } else {\r\n        //console.log(result);\r\n        if (result.nModified) {\r\n          usersModel.findOneAndUpdate({\r\n            'email': blockUserTo\r\n          }, { $push: { blockBy: dataObj } }, {\r\n            upsert: true\r\n          }, (err, users) => {\r\n            if (err) return res.json({\r\n              isError: true,\r\n              data: err\r\n            });\r\n            res.json({\r\n              isError: false,\r\n              data: result\r\n            });\r\n          });\r\n        }\r\n      }\r\n    })\r\n\r\n\r\n\r\n  },\r\n  blockUser: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var blockUserTo = req.body.blockUserTo\r\n    var dataObj = {\r\n      senderEmail: decoded.email,\r\n      senderFirstName: decoded.first_name,\r\n      status: 'blocked'\r\n    }\r\n    usersModel.update({\r\n      $and: [{ email: decoded.email }, { friends: { $elemMatch: { 'senderEmail': blockUserTo } } }]\r\n\r\n    }, { $set: { \"friends.$.status\": 'Blocked' } }, function(err, result) {\r\n      if (err) {\r\n        //console.log(err);\r\n      } else {\r\n        //console.log(result);\r\n        if (result.nModified) {\r\n          usersModel.findOneAndUpdate({\r\n            'email': blockUserTo\r\n          }, { $push: { friends: dataObj } }, {\r\n            upsert: true\r\n          }, (err, users) => {\r\n            if (err) return res.json({\r\n              isError: true,\r\n              data: err\r\n            });\r\n            res.json({\r\n              isError: false,\r\n              data: result\r\n            });\r\n          });\r\n        }\r\n      }\r\n    })\r\n\r\n\r\n  },\r\n  setMsgRead: (req, res, next) => {\r\n    // //console.log(\"setMsgRead ==>\", req.body, req.query);\r\n    var arrMsgID = [];\r\n    arrMsgID = req.body.data;\r\n    //console.log(\"arrMsgID\", arrMsgID);\r\n    var _id = '';\r\n    var arrMsgIDList = arrMsgID.map(function(aField) {\r\n\r\n      return aField\r\n        //console.log(aField);\r\n    })\r\n\r\n\r\n    var bulk = messagesModel.collection.initializeUnorderedBulkOp();\r\n\r\n    arrMsgID.forEach((item, index) => {\r\n      _id = mongoose.Types.ObjectId(item)\r\n        // var id = arrMsgID[index];\r\n      bulk.find({ _id: _id }).updateOne({ $set: { isRead: true } });\r\n\r\n    })\r\n    bulk.execute((err, messages) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: messages\r\n      });\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  },\r\n  getFriendsList: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    //console.log(\"getFriendsList=>\", decoded.email)\r\n    usersModel.find({\r\n      'email': decoded.email\r\n    }, { \"friends\": 1, \"_id\": 0 }, (err, users) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: users\r\n      });\r\n    });\r\n  },\r\n  getUserInfo: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    //console.log(\"decoded.email=>\", decoded.email);\r\n    usersModel.find({\r\n      'email': decoded.email\r\n    }, (err, users) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      //console.log(\"users==>\", users);\r\n      if (users) {\r\n        res.json({\r\n          isError: false,\r\n          data: users\r\n        });\r\n      } else {\r\n        res.redirect('/#/login');\r\n      }\r\n\r\n    });\r\n  },\r\n\r\n\r\n  acceptFriendRequest: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var senderEmail = req.body.senderEmail\r\n    var dataObj = {\r\n      senderEmail: decoded.email,\r\n      senderFirstName: decoded.first_name,\r\n      status: 'Friend'\r\n    }\r\n\r\n    usersModel.update({\r\n      $and: [{ email: decoded.email }, { friends: { $elemMatch: { 'senderEmail': senderEmail } } }]\r\n\r\n    }, { $set: { \"friends.$.status\": 'Friend' } }, function(err, result) {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n      } else {\r\n        //console.log(result);\r\n        if (result.nModified) {\r\n          usersModel.findOneAndUpdate({\r\n            'email': senderEmail\r\n          }, { $push: { friends: dataObj } }, {\r\n            upsert: true\r\n          }, (err, users) => {\r\n            if (err) return res.json({\r\n              isError: true,\r\n              data: err\r\n            });\r\n            res.json({\r\n              isError: false,\r\n              data: result\r\n            });\r\n          });\r\n        }\r\n      }\r\n    })\r\n\r\n  },\r\n\r\n\r\n\r\n  addUserProfilePic: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var imgURL = req.body.imgURL;\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, {\r\n      $set: {\r\n        imgURL: imgURL\r\n      }\r\n    }, (err, data) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      else {\r\n        res.json({\r\n          isError: false,\r\n          data: data\r\n        })\r\n      }\r\n    });\r\n  },\r\n  addMessage: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var sender = decoded.email;\r\n    var data = req.body;\r\n    data.sender = sender;\r\n    data.date = new Date();\r\n    //console.log(\"Data for message==>\", data);\r\n    messagesModel.create(data, function(err, message) {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: message,\r\n      })\r\n    })\r\n  },\r\n\r\n  friendReq: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var to = req.body.To;\r\n    //console.log(\"To  Details=>\", to);\r\n\r\n    var dataObj = {\r\n        senderEmail: decoded.email,\r\n        senderFirstName: decoded.first_name,\r\n        status: 'Pending'\r\n      }\r\n      //console.log(\"Senders Details=>\", dataObj);\r\n    usersModel.find({ 'email': to }, (errParent, resultParent) => {\r\n      if (!errParent) {\r\n        var friendsList = resultParent[0].friends || [];\r\n        //console.log(\"friendList==>\", friendsList);\r\n        var isFound = friendsList.find((item) => item.senderEmail == decoded.email);\r\n        if (isFound) {\r\n          res.json({\r\n            isError: false,\r\n            isFound: true\r\n          });\r\n        }\r\n        //console.log(\"isfound==>\", isFound);\r\n        if (!isFound || friendsList.length === 0) {\r\n          //console.log(\"not found\");\r\n          usersModel.findOneAndUpdate({\r\n            'email': to\r\n          }, { $push: { friends: dataObj } }, {\r\n            upsert: true\r\n          }, (err, users) => {\r\n            if (err) return res.json({\r\n              isError: true,\r\n              data: err\r\n            });\r\n            res.json({\r\n              isError: false,\r\n              data: users\r\n            });\r\n          });\r\n        }\r\n      }\r\n    })\r\n  },\r\n  unfriend: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var unfriendTo = req.body.unfriendTo;\r\n\r\n    //console.log(\"unfriend==>\", query, req.body);\r\n\r\n\r\n    usersModel.update({\r\n      $and: [{ email: decoded.email }, { friends: { $elemMatch: { 'senderEmail': unfriendTo } } }]\r\n\r\n    }, { $set: { \"friends.$.status\": 'unFriend' } }, function(err, result) {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n      } else {\r\n        //console.log(result);\r\n        if (result.nModified) {\r\n          usersModel.findOneAndUpdate({\r\n            'email': blockUserTo\r\n          }, { $push: { friends: dataObj } }, {\r\n            upsert: true\r\n          }, (err, users) => {\r\n            if (err) return res.json({\r\n              isError: true,\r\n              data: err\r\n            });\r\n            res.json({\r\n              isError: false,\r\n              data: result\r\n            });\r\n          });\r\n        }\r\n      }\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n  },\r\n\r\n  getAll: async(req, res, next) => {\r\n    usersModel.find({}, (err, users) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: users\r\n      });\r\n    });\r\n\r\n  },\r\n  addUserInfo: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"addUserInfo ==>\", decoded.email, req.body, req.query);\r\n\r\n    var updateQuery = {\r\n      first_name: req.body.first_name,\r\n      last_name: req.body.last_name,\r\n      phone_no: req.body.phone_no,\r\n      email: req.body.email,\r\n    }\r\n    usersModel.findOneAndUpdate({\r\n\r\n      'email': decoded.email\r\n    }, {\r\n      $set: updateQuery\r\n    }, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        success: false,\r\n        data: err\r\n      });\r\n      res.json({\r\n        success: true,\r\n        data: user\r\n      })\r\n    });\r\n\r\n  },\r\n  userProfile: (req, res, next) => {\r\n    // var _id = Number(req.query.id);\r\n\r\n    var _id = mongoose.Types.ObjectId(req.query.id);\r\n    //console.log(\"id=>\", _id);\r\n    usersModel.findOne({\r\n      _id: _id\r\n    }, (err, user) => {\r\n\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n      } else {\r\n        var email = user.email;\r\n        //console.log(\"Email==>\", email);\r\n        if (user) {\r\n          tokenModel.findOne({ 'email': email }, (err, tokenData) => {\r\n            res.json({\r\n              isError: false,\r\n              data: { user: user, tokenData: tokenData }\r\n            });\r\n          }).sort({ _id: -1 }).limit(1)\r\n        }\r\n\r\n\r\n      }\r\n    });\r\n  },\r\n\r\n\r\n  getOne: (req, res, next) => {\r\n    // //console.log(\"------------\",next);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    usersModel.findOne({\r\n      'email': decoded.email\r\n    }, (err, user) => {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n      } else {\r\n        res.json({\r\n          isError: false,\r\n          data: user\r\n        });\r\n      }\r\n    });\r\n  },\r\n\r\n  create: (req, res, next) => {\r\n    usersModel.create(req.body, function(err, user) {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    // var id = mongoose.Types.ObjectId(req.body.id);\r\n    usersModel.findOneAndUpdate({\r\n      '_id': req.body.id\r\n    }, req.body, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    });\r\n  },\r\n\r\n  delete: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, {\r\n      isActive: 'inactive'\r\n    }, (err, ok) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      else {\r\n        res.json({\r\n          isError: true,\r\n          data: true\r\n        })\r\n      }\r\n    });\r\n  },\r\n  forgetPassword: (req, res, next) => {\r\n    var email = req.body.email;\r\n    var host = req.headers.host;\r\n\r\n    usersModel.find({\r\n      'email': req.body.email\r\n    }, function(err, result) {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        })\r\n      } else {\r\n        if (result != \"\") {\r\n          var d = new Date();\r\n          var v = new Date();\r\n          v.setMinutes(d.getMinutes() + 30);\r\n          const token = jwt.sign({\r\n            exp: Math.floor(v),\r\n            email: req.body.email,\r\n          }, env.App_key);\r\n          //console.log(result);\r\n          nodemailer.createTestAccount((err, account) => {\r\n            // create reusable transporter object using the default SMTP transport\r\n            var transporter = nodemailer.createTransport({\r\n              service: 'gmail',\r\n              auth: {\r\n                user: 'itstechinvento@gmail.com',\r\n                pass: 'techinvento123'\r\n              }\r\n            });\r\n\r\n            // setup email data with unicode symbols\r\n            let mailOptions = {\r\n              from: 'itstechinvento@gmail.com', // sender address\r\n              to: email, // list of receivers\r\n              subject: 'Create New Password', // Subject line\r\n              text: 'As requested,here is a link to allow you to select a new password', // plain text body\r\n              html: '<a href=http://' + host + '/recover?accessToken=' + token + '>Click to recover password</a>' // html body\r\n\r\n              // html: '<a href=http://localhost:3000/recover?accessToken=' + token + '>Click to recover password</a>' // html body\r\n            };\r\n            //console.log(\"Mailoptions\", mailOptions);\r\n\r\n            // send mail with defined transport object\r\n            transporter.sendMail(mailOptions, (error, info) => {\r\n              var information = JSON.stringify(info);\r\n\r\n              //console.log('Transporter', err, information);\r\n              mail_responseModel.create({\r\n                'email': email,\r\n                'error': error,\r\n                'info': information\r\n              }, function(err, mail_response) {\r\n                if (err) {\r\n                  res.json({\r\n                    isError: true,\r\n                    data: err\r\n                  });\r\n                  console.log(\"mail_responseModel error=>\", err);\r\n                }\r\n              })\r\n\r\n\r\n              if (error) {\r\n                return //console.log(\"error--11--\", error);\r\n                res.json({\r\n                  isError: true,\r\n                  data: error\r\n                });\r\n              } else {\r\n                console.log('Message sent: %s', info.messageId);\r\n                console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\r\n                res.json({\r\n                  isError: false,\r\n                  data: 'Please check your Email'\r\n                });\r\n\r\n              }\r\n\r\n              // Preview only available when sending through an Ethereal account\r\n              // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>\r\n              // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...\r\n            });\r\n\r\n            // res.json({ isError: false, data: 'Please check your Email' });\r\n\r\n            //    res.json(mailOptions);\r\n          });\r\n        } else {\r\n          res.json({\r\n            isError: true,\r\n            data: 'please provide a valid mail'\r\n          });\r\n        }\r\n      }\r\n    })\r\n  },\r\n\r\n  storeBasicUserInfo: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var id = req.body.id;\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, {\r\n      'basicInfo': req.body\r\n    }, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    });\r\n  },\r\n\r\n\r\n  isVerified: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    //console.log(\"isVerified==>\", decoded.email);\r\n\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      });\r\n    });\r\n\r\n  },\r\n\r\n  emailVerification: (req, res, next) => {\r\n    var host = req.headers.host;\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    //console.log(\"Emailverification==>\", decoded.email);\r\n    usersModel.find({\r\n      'email': decoded.email\r\n    }, function(err, result) {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        })\r\n      } else {\r\n        if (result != \"\") {\r\n          var d = new Date();\r\n          var v = new Date();\r\n          v.setMinutes(d.getMinutes() + 30);\r\n          const token = jwt.sign({\r\n            exp: Math.floor(v),\r\n            email: decoded.email,\r\n          }, env.App_key);\r\n          //console.log(result);\r\n          nodemailer.createTestAccount((err, account) => {\r\n            // create reusable transporter object using the default SMTP transport\r\n            var transporter = nodemailer.createTransport({\r\n              service: 'gmail',\r\n              auth: {\r\n                user: 'itstechinvento@gmail.com',\r\n                pass: 'techinvento123'\r\n              }\r\n            });\r\n            var htmlforemail = ``;\r\n            let mailOptions = {\r\n              from: 'itstechinvento@gmail.com', // sender address\r\n              to: decoded.email, // list of receivers\r\n              subject: 'Email Verification', // Subject line\r\n              text: 'Please Click below link to Verify Your Email address', // plain text body\r\n              html: 'Please<a id =\"varified\"href=http://' + host + '/ev/' + token + '>Click Here to processed email verification</a>',\r\n            };\r\n            transporter.sendMail(mailOptions, (error, info) => {\r\n              mail_responseModel.create({\r\n                'email': decoded.email,\r\n                'error': error,\r\n                'info': info\r\n              }, function(err, mail_response) {\r\n                if (err) {\r\n                  console.log(\"mail_responseModel error=>\", err);\r\n                } else {\r\n                  console.log(\"mail_responseModel \", mail_response);\r\n                }\r\n              })\r\n\r\n              if (error) {\r\n                res.json({\r\n                  isError: true,\r\n                  data: error\r\n                });\r\n                return //console.log(\"error--11--\", error);\r\n              } else {\r\n\r\n                //console.log('Message sent: %s', info.messageId);\r\n                //console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\r\n                res.json({\r\n                  isError: false,\r\n                  data: 'Please check your email'\r\n                });\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          res.json({\r\n            isError: true,\r\n            data: 'please provide a valid mail'\r\n          });\r\n        }\r\n      }\r\n    })\r\n  },\r\n\r\n  emailVerified: (req, res, next) => {\r\n    var decoded = jwt.verify(req.params.token, env.App_key);\r\n    var dt = new Date();\r\n    var checkDate = new Date(decoded.exp);\r\n    if (dt < checkDate) {\r\n      //console.log(\"----------\");\r\n      usersModel.findOneAndUpdate({\r\n        \"email\": decoded.email\r\n      }, {\r\n        $set: {\r\n          \"verification.email_verified\": true\r\n        }\r\n      }, (err, user) => {\r\n        if (err) return res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n        res.redirect('/#/profile');\r\n        // res.send('verified')\r\n        //res.json({ isError: false, data: \"your E-Mail address is verified sucessfully\" });\r\n\r\n      });\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"session expire\"\r\n      });\r\n    }\r\n  },\r\n\r\n  varifyToken: (req, res, next) => {\r\n    //console.log(\"in verify Token=>\");\r\n    var decoded = jwt.verify(req.params.token, env.App_key);\r\n    var dt = new Date();\r\n    var checkDate = new Date(decoded.exp);\r\n    if (dt < checkDate) {\r\n      //console.log(\"----\");\r\n      var d = new Date();\r\n      var v = new Date();\r\n      v.setMinutes(d.getMinutes() + 60);\r\n      const token = jwt.sign({\r\n        exp: Math.floor(v),\r\n        email: decoded.email,\r\n      }, env.App_key);\r\n      res.redirect('/recover/' + token)\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"session expire\"\r\n      });\r\n    }\r\n  },\r\n  changePassword: (req, res, next) => {\r\n    // //console.log(\"req.headers--->\", req.headers['authorization'], req.body);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    req.body.password = encode().value(req.body.password);\r\n    req.body.new_pasword = encode().value(req.body.new_pasword);\r\n    usersModel.findOneAndUpdate({\r\n      $and: [{\r\n        \"password\": req.body.password\r\n      }, {\r\n        \"email\": decoded.email\r\n      }]\r\n    }, {\r\n      $set: {\r\n        \"password\": req.body.new_pasword,\r\n      }\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      });\r\n      //console.log(\"user=>\", user);\r\n    })\r\n  },\r\n  recoverPassword: (req, res, next) => {\r\n    //console.log(\"req in recover password api=>\", req.body, req.query, req.params);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    if (req.body.password != \"\" && req.body.password.length > 6) {\r\n      req.body.password = encode().value(req.body.password);\r\n      var checkDate = new Date(decoded.exp);\r\n      var dt = new Date();\r\n      //console.log(dt, \"------\", checkDate);\r\n      if (dt < checkDate) {\r\n        usersModel.findOneAndUpdate({\r\n          \"email\": decoded.email\r\n        }, {\r\n          $set: {\r\n            \"password\": req.body.password\r\n          }\r\n        }, (err, user) => {\r\n          if (err) return res.json(err);\r\n          res.json({\r\n            isError: false,\r\n            data: user\r\n          });\r\n        });\r\n      } else {\r\n        res.json({\r\n          isError: true,\r\n          data: \"session expire\"\r\n        });\r\n      }\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"Please provide valid password\"\r\n      });\r\n    }\r\n\r\n  },\r\n  changeEmail: (req, res, next) => {\r\n    if (req.body.new_email) {\r\n      req.body.password = encode().value(req.body.old_password);\r\n      usersModel.findOneAndUpdate({\r\n        $and: [{\r\n          \"password\": req.body.password\r\n        }, {\r\n          \"email\": req.body.email\r\n        }]\r\n      }, {\r\n        $set: {\r\n          \"email\": req.body.new_email,\r\n        }\r\n      }, (err, user) => {\r\n        if (err) return res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n        res.json({\r\n          isError: false,\r\n          data: user\r\n        });\r\n      })\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"NULL\"\r\n      });\r\n    }\r\n  },\r\n\r\n\r\n};\r\n\r\n\r\nexport default usersController;"]}
{"version":3,"sources":["../../src/controller/usersController.js"],"names":["nodemailer","require","mongoose","encode","hashCode","usersController","getAllUnreadMessages","req","res","next","decoded","verify","headers","App_key","console","log","email","find","err","messages","json","isError","data","getAllMessagesWithFriend","friend","query","date","temp","limit","$or","$and","sender","reciever","$lt","sort","exec","turstUser","trustUserTo","body","dataObj","senderEmail","senderFirstName","first_name","status","update","turstByList","$elemMatch","$push","upsert","result","nModified","unblockUser","unblockUserTo","friends","$set","findOneAndUpdate","blockUserTo","blockBy","users","blockUser","setMsgRead","arrMsgID","_id","arrMsgIDList","map","aField","bulk","collection","initializeUnorderedBulkOp","forEach","item","index","Types","ObjectId","updateOne","isRead","execute","getFriendsList","getUserInfo","redirect","acceptFriendRequest","addUserProfilePic","imgURL","addMessage","Date","create","message","friendReq","to","To","errParent","resultParent","friendsList","isFound","length","unfriend","unfriendTo","getAll","addUserInfo","updateQuery","last_name","phone_no","new","user","success","userProfile","id","findOne","tokenData","getOne","delete","isActive","ok","forgetPassword","host","d","v","setMinutes","getMinutes","token","sign","exp","Math","floor","createTestAccount","account","transporter","createTransport","service","auth","pass","mailOptions","from","subject","text","html","sendMail","error","info","information","JSON","stringify","mail_response","messageId","getTestMessageUrl","storeBasicUserInfo","isVerified","emailVerification","htmlforemail","emailVerified","params","dt","checkDate","varifyToken","changePassword","password","value","new_pasword","recoverPassword","changeEmail","new_email","old_password"],"mappings":"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","file":"usersController.js","sourcesContent":["import usersModel from '../models/usersModel'\r\nimport tokenModel from './../models/tokenModel';\r\nimport messagesModel from '../models/messagesModel'\r\n\r\nimport mail_responseModel from '../models/mail_responseModel'\r\nimport postatrade from '../models/postatrade'\r\nimport jwt from 'jsonwebtoken';\r\nimport env from \"../env\";\r\n\r\nconst nodemailer = require('nodemailer');\r\nvar mongoose = require('mongoose');\r\nvar encode = require('hashcode').hashCode;\r\nconst usersController = {\r\n  getAllUnreadMessages: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"getAllMessages reqest from==>\", decoded.email)\r\n    messagesModel.find({\r\n      'reciever': decoded.email,\r\n      'isRead': false,\r\n    }, (err, messages) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: messages\r\n      });\r\n\r\n    });\r\n  },\r\n\r\n\r\n  getAllMessagesWithFriend: (req, res, next) => {\r\n\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    // console.log(\"getAllMessagesWithFriend reqest from==>\", decoded.email, req.query.data)\r\n    var friend = req.query.data.friend;\r\n    var date = req.query.data.date;\r\n    var temp = req.query.data.limit;\r\n    var limit = '';\r\n\r\n    var query = '';\r\n    if (date) {\r\n      query = {\r\n        $or: [\r\n          { $and: [{ sender: decoded.email }, { reciever: friend }] },\r\n          { $and: [{ sender: friend }, { reciever: decoded.email }] }\r\n        ],\r\n        \"date\": { $lt: date }\r\n      }\r\n    } else {\r\n      query = {\r\n        $or: [\r\n          { $and: [{ sender: decoded.email }, { reciever: friend }] },\r\n          { $and: [{ sender: friend }, { reciever: decoded.email }] }\r\n        ]\r\n      }\r\n    }\r\n    messagesModel.find(\r\n      query\r\n    ).sort({ 'date': -1 }).limit(10)\r\n\r\n\r\n    .exec(function(err, messages) {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: messages\r\n      });\r\n    });\r\n  },\r\n\r\n  turstUser: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n\r\n    var trustUserTo = req.body.trustUserTo\r\n    console.log(\"turstUser==>\", req.body);\r\n\r\n    var dataObj = {\r\n      senderEmail: decoded.email,\r\n      senderFirstName: decoded.first_name,\r\n      status: 'trust'\r\n    }\r\n    console.log(\"turstUser==>\", trustUserTo, dataObj);\r\n\r\n    // usersModel.find({ 'email': trustUserTo }, (errParent, resultParent) => {\r\n\r\n    //   if (!errParent) {\r\n    //     var turstByList = resultParent[0].trustBy || [];\r\n    //     console.log(\"turstByList==> resultParent\", turstByList);\r\n    //     var isFound = turstByList.find((item) => item.senderEmail == decoded.email);\r\n    //     if (isFound) {\r\n    //       res.json({\r\n    //         isError: false,\r\n    //         isFound: true\r\n    //       });\r\n    //     }\r\n    //     if (!isFound || turstByList.length === 0) {\r\n    //       console.log(\"not found\");\r\n    //       usersModel.findOneAndUpdate({\r\n    //         'email': trustUserTo\r\n    //       }, { $push: { 'trustBy': dataObj } }, {\r\n    //         upsert: true\r\n    //       }, (err, users) => {\r\n    //         if (err) return res.json({\r\n    //           isError: true,\r\n    //           data: err\r\n    //         });\r\n    //         res.json({\r\n    //           isError: false,\r\n    //           data: users\r\n    //         });\r\n    //       });\r\n    //     }\r\n    //   }\r\n    // })\r\n\r\n\r\n\r\n\r\n\r\n    usersModel.update({\r\n      $and: [{ email: trustUserTo }, { turstByList: { $elemMatch: { 'senderEmail': decoded.email } } }]\r\n\r\n    }, { $push: { 'trustBy': dataObj } }, {\r\n      upsert: true\r\n    }, function(err, result) {\r\n      if (err) {\r\n        console.log(err);\r\n      } else {\r\n        console.log(result);\r\n        if (result.nModified) {\r\n          res.json({\r\n            isError: false,\r\n            data: result\r\n          });\r\n          // usersModel.findOneAndUpdate({\r\n          //   'email': blockUserTo\r\n          // }, { $push: { blockBy: dataObj } }, {\r\n          //   upsert: true\r\n          // }, (err, users) => {\r\n          //   if (err) return res.json({\r\n          //     isError: true,\r\n          //     data: err\r\n          //   });\r\n          //   res.json({\r\n          //     isError: false,\r\n          //     data: result\r\n          //   });\r\n          // });\r\n        } else {\r\n          res.json({\r\n            isError: true,\r\n            data: err\r\n          });\r\n\r\n        }\r\n      }\r\n    })\r\n\r\n\r\n  },\r\n\r\n  unblockUser: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var unblockUserTo = req.body.unblockUserTo\r\n    var dataObj = {\r\n      senderEmail: decoded.email,\r\n      senderFirstName: decoded.first_name,\r\n      status: 'Unblocked'\r\n    }\r\n    console.log(\"unblockUser=>\", decoded.email, dataObj);\r\n\r\n    usersModel.update({\r\n      $and: [{ email: decoded.email }, { friends: { $elemMatch: { 'senderEmail': unblockUserTo } } }]\r\n\r\n    }, { $set: { \"friends.$.status\": 'Friend' } }, function(err, result) {\r\n      if (err) {\r\n        console.log(err);\r\n      } else {\r\n        console.log(result);\r\n        if (result.nModified) {\r\n          usersModel.findOneAndUpdate({\r\n            'email': blockUserTo\r\n          }, { $push: { blockBy: dataObj } }, {\r\n            upsert: true\r\n          }, (err, users) => {\r\n            if (err) return res.json({\r\n              isError: true,\r\n              data: err\r\n            });\r\n            res.json({\r\n              isError: false,\r\n              data: result\r\n            });\r\n          });\r\n        }\r\n      }\r\n    })\r\n\r\n\r\n\r\n  },\r\n  blockUser: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var blockUserTo = req.body.blockUserTo\r\n    var dataObj = {\r\n      senderEmail: decoded.email,\r\n      senderFirstName: decoded.first_name,\r\n      status: 'blocked'\r\n    }\r\n    usersModel.update({\r\n      $and: [{ email: decoded.email }, { friends: { $elemMatch: { 'senderEmail': blockUserTo } } }]\r\n\r\n    }, { $set: { \"friends.$.status\": 'Blocked' } }, function(err, result) {\r\n      if (err) {\r\n        console.log(err);\r\n      } else {\r\n        console.log(result);\r\n        if (result.nModified) {\r\n          usersModel.findOneAndUpdate({\r\n            'email': blockUserTo\r\n          }, { $push: { friends: dataObj } }, {\r\n            upsert: true\r\n          }, (err, users) => {\r\n            if (err) return res.json({\r\n              isError: true,\r\n              data: err\r\n            });\r\n            res.json({\r\n              isError: false,\r\n              data: result\r\n            });\r\n          });\r\n        }\r\n      }\r\n    })\r\n\r\n\r\n  },\r\n  setMsgRead: (req, res, next) => {\r\n    // console.log(\"setMsgRead ==>\", req.body, req.query);\r\n    var arrMsgID = [];\r\n    arrMsgID = req.body.data;\r\n    console.log(\"arrMsgID\", arrMsgID);\r\n    var _id = '';\r\n    var arrMsgIDList = arrMsgID.map(function(aField) {\r\n\r\n      return aField\r\n      console.log(aField);\r\n    })\r\n\r\n\r\n    var bulk = messagesModel.collection.initializeUnorderedBulkOp();\r\n\r\n    arrMsgID.forEach((item, index) => {\r\n      _id = mongoose.Types.ObjectId(item)\r\n        // var id = arrMsgID[index];\r\n      bulk.find({ _id: _id }).updateOne({ $set: { isRead: true } });\r\n\r\n    })\r\n    bulk.execute((err, messages) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: messages\r\n      });\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  },\r\n  getFriendsList: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"getFriendsList=>\", decoded.email)\r\n    usersModel.find({\r\n      'email': decoded.email\r\n    }, { \"friends\": 1, \"_id\": 0 }, (err, users) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: users\r\n      });\r\n    });\r\n  },\r\n  getUserInfo: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"decoded.email=>\", decoded.email);\r\n    usersModel.find({\r\n      'email': decoded.email\r\n    }, (err, users) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      console.log(\"users==>\", users);\r\n      if (users) {\r\n        res.json({\r\n          isError: false,\r\n          data: users\r\n        });\r\n      } else {\r\n        res.redirect('/#/login');\r\n      }\r\n\r\n    });\r\n  },\r\n\r\n\r\n  acceptFriendRequest: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var senderEmail = req.body.senderEmail\r\n    var dataObj = {\r\n      senderEmail: decoded.email,\r\n      senderFirstName: decoded.first_name,\r\n      status: 'Friend'\r\n    }\r\n\r\n    usersModel.update({\r\n      $and: [{ email: decoded.email }, { friends: { $elemMatch: { 'senderEmail': senderEmail } } }]\r\n\r\n    }, { $set: { \"friends.$.status\": 'Friend' } }, function(err, result) {\r\n      if (err) {\r\n        console.log(err);\r\n      } else {\r\n        console.log(result);\r\n        if (result.nModified) {\r\n          usersModel.findOneAndUpdate({\r\n            'email': senderEmail\r\n          }, { $push: { friends: dataObj } }, {\r\n            upsert: true\r\n          }, (err, users) => {\r\n            if (err) return res.json({\r\n              isError: true,\r\n              data: err\r\n            });\r\n            res.json({\r\n              isError: false,\r\n              data: result\r\n            });\r\n          });\r\n        }\r\n      }\r\n    })\r\n\r\n  },\r\n\r\n\r\n\r\n  addUserProfilePic: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var imgURL = req.body.imgURL;\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, {\r\n      $set: {\r\n        imgURL: imgURL\r\n      }\r\n    }, (err, data) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      else {\r\n        res.json({\r\n          isError: false,\r\n          data: data\r\n        })\r\n      }\r\n    });\r\n  },\r\n  addMessage: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var sender = decoded.email;\r\n    var data = req.body;\r\n    data.sender = sender;\r\n    data.date = new Date();\r\n    console.log(\"Data for message==>\", data);\r\n    messagesModel.create(data, function(err, message) {\r\n      if (err) return res.json(err);\r\n      res.json({\r\n        isError: false,\r\n        data: message,\r\n      })\r\n    })\r\n  },\r\n\r\n  friendReq: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var to = req.body.To;\r\n    console.log(\"To  Details=>\", to);\r\n\r\n    var dataObj = {\r\n      senderEmail: decoded.email,\r\n      senderFirstName: decoded.first_name,\r\n      status: 'Pending'\r\n    }\r\n    console.log(\"Senders Details=>\", dataObj);\r\n    usersModel.find({ 'email': to }, (errParent, resultParent) => {\r\n      if (!errParent) {\r\n        var friendsList = resultParent[0].friends || [];\r\n        console.log(\"friendList==>\", friendsList);\r\n        var isFound = friendsList.find((item) => item.senderEmail == decoded.email);\r\n        if (isFound) {\r\n          res.json({\r\n            isError: false,\r\n            isFound: true\r\n          });\r\n        }\r\n        console.log(\"isfound==>\", isFound);\r\n        if (!isFound || friendsList.length === 0) {\r\n          console.log(\"not found\");\r\n          usersModel.findOneAndUpdate({\r\n            'email': to\r\n          }, { $push: { friends: dataObj } }, {\r\n            upsert: true\r\n          }, (err, users) => {\r\n            if (err) return res.json({\r\n              isError: true,\r\n              data: err\r\n            });\r\n            res.json({\r\n              isError: false,\r\n              data: users\r\n            });\r\n          });\r\n        }\r\n      }\r\n    })\r\n  },\r\n  unfriend: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var unfriendTo = req.body.unfriendTo;\r\n\r\n    console.log(\"unfriend==>\", query, req.body);\r\n\r\n\r\n    usersModel.update({\r\n      $and: [{ email: decoded.email }, { friends: { $elemMatch: { 'senderEmail': unfriendTo } } }]\r\n\r\n    }, { $set: { \"friends.$.status\": 'unFriend' } }, function(err, result) {\r\n      if (err) {\r\n        console.log(err);\r\n      } else {\r\n        console.log(result);\r\n        if (result.nModified) {\r\n          usersModel.findOneAndUpdate({\r\n            'email': blockUserTo\r\n          }, { $push: { friends: dataObj } }, {\r\n            upsert: true\r\n          }, (err, users) => {\r\n            if (err) return res.json({\r\n              isError: true,\r\n              data: err\r\n            });\r\n            res.json({\r\n              isError: false,\r\n              data: result\r\n            });\r\n          });\r\n        }\r\n      }\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n  },\r\n\r\n  getAll: async(req, res, next) => {\r\n    usersModel.find({}, (err, users) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: users\r\n      });\r\n    });\r\n\r\n  },\r\n  addUserInfo: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"addUserInfo ==>\", decoded.email, req.body, req.query);\r\n\r\n    var updateQuery = {\r\n      first_name: first_name,\r\n      last_name: last_name,\r\n      phone_no: phone_no,\r\n      email: email,\r\n    }\r\n    usersModel.findOneAndUpdate({\r\n\r\n      'email': decoded.email\r\n    }, {\r\n      $set: updateQuery\r\n    }, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        success: false,\r\n        data: err\r\n      });\r\n      res.json({\r\n        success: true,\r\n        data: user\r\n      })\r\n    });\r\n\r\n  },\r\n  userProfile: (req, res, next) => {\r\n    // var _id = Number(req.query.id);\r\n\r\n    var _id = mongoose.Types.ObjectId(req.query.id);\r\n    console.log(\"id=>\", _id);\r\n    usersModel.findOne({\r\n      _id: _id\r\n    }, (err, user) => {\r\n\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n      } else {\r\n        var email = user.email;\r\n        console.log(\"Email==>\", email);\r\n        if (user) {\r\n          tokenModel.findOne({ 'email': email }, (err, tokenData) => {\r\n            res.json({\r\n              isError: false,\r\n              data: { user: user, tokenData: tokenData }\r\n            });\r\n          }).sort({ _id: -1 }).limit(1)\r\n        }\r\n\r\n\r\n      }\r\n    });\r\n  },\r\n\r\n\r\n  getOne: (req, res, next) => {\r\n    // console.log(\"------------\",next);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    usersModel.findOne({\r\n      'email': decoded.email\r\n    }, (err, user) => {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n      } else {\r\n        res.json({\r\n          isError: false,\r\n          data: user\r\n        });\r\n      }\r\n    });\r\n  },\r\n\r\n  create: (req, res, next) => {\r\n    usersModel.create(req.body, function(err, user) {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    // var id = mongoose.Types.ObjectId(req.body.id);\r\n    usersModel.findOneAndUpdate({\r\n      '_id': req.body.id\r\n    }, req.body, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    });\r\n  },\r\n\r\n  delete: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, {\r\n      isActive: 'inactive'\r\n    }, (err, ok) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      else {\r\n        res.json({\r\n          isError: true,\r\n          data: true\r\n        })\r\n      }\r\n    });\r\n  },\r\n  forgetPassword: (req, res, next) => {\r\n    var email = req.body.email;\r\n    var host = req.headers.host;\r\n\r\n    usersModel.find({\r\n      'email': req.body.email\r\n    }, function(err, result) {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        })\r\n      } else {\r\n        if (result != \"\") {\r\n          var d = new Date();\r\n          var v = new Date();\r\n          v.setMinutes(d.getMinutes() + 30);\r\n          const token = jwt.sign({\r\n            exp: Math.floor(v),\r\n            email: req.body.email,\r\n          }, env.App_key);\r\n          console.log(result);\r\n          nodemailer.createTestAccount((err, account) => {\r\n            // create reusable transporter object using the default SMTP transport\r\n            var transporter = nodemailer.createTransport({\r\n              service: 'gmail',\r\n              auth: {\r\n                user: 'itstechinvento@gmail.com',\r\n                pass: 'techinvento123'\r\n              }\r\n            });\r\n\r\n            // setup email data with unicode symbols\r\n            let mailOptions = {\r\n              from: 'itstechinvento@gmail.com', // sender address\r\n              to: email, // list of receivers\r\n              subject: 'Create New Password', // Subject line\r\n              text: 'As requested,here is a link to allow you to select a new password', // plain text body\r\n              html: '<a href=http://' + host + '/recover?accessToken=' + token + '>Click to recover password</a>' // html body\r\n\r\n              // html: '<a href=http://localhost:3000/recover?accessToken=' + token + '>Click to recover password</a>' // html body\r\n            };\r\n            console.log(\"Mailoptions\", mailOptions);\r\n\r\n            // send mail with defined transport object\r\n            transporter.sendMail(mailOptions, (error, info) => {\r\n              var information = JSON.stringify(info);\r\n\r\n              console.log('Transporter', err, information);\r\n              mail_responseModel.create({\r\n                'email': email,\r\n                'error': error,\r\n                'info': information\r\n              }, function(err, mail_response) {\r\n                if (err) {\r\n                  console.log(\"mail_responseModel error=>\", err);\r\n                } else {\r\n                  console.log(\"mail_responseModel No error\", mail_response);\r\n                }\r\n              })\r\n\r\n\r\n              if (error) {\r\n                return console.log(\"error--11--\", error);\r\n                res.json({\r\n                  isError: true,\r\n                  data: error\r\n                });\r\n              } else {\r\n                console.log('Message sent: %s', info.messageId);\r\n                console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\r\n                res.json({\r\n                  isError: false,\r\n                  data: 'Please check your Email'\r\n                });\r\n\r\n              }\r\n\r\n              // Preview only available when sending through an Ethereal account\r\n              // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>\r\n              // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...\r\n            });\r\n\r\n            // res.json({ isError: false, data: 'Please check your Email' });\r\n\r\n            //    res.json(mailOptions);\r\n          });\r\n        } else {\r\n          res.json({\r\n            isError: true,\r\n            data: 'please provide a valid mail'\r\n          });\r\n        }\r\n      }\r\n    })\r\n  },\r\n\r\n  storeBasicUserInfo: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var id = req.body.id;\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, {\r\n      'basicInfo': req.body\r\n    }, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    });\r\n  },\r\n\r\n\r\n  isVerified: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"isVerified==>\", decoded.email);\r\n\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      });\r\n    });\r\n\r\n  },\r\n\r\n  emailVerification: (req, res, next) => {\r\n    var host = req.headers.host;\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"Emailverification==>\", decoded.email);\r\n    usersModel.find({\r\n      'email': decoded.email\r\n    }, function(err, result) {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        })\r\n      } else {\r\n        if (result != \"\") {\r\n          var d = new Date();\r\n          var v = new Date();\r\n          v.setMinutes(d.getMinutes() + 30);\r\n          const token = jwt.sign({\r\n            exp: Math.floor(v),\r\n            email: decoded.email,\r\n          }, env.App_key);\r\n          console.log(result);\r\n          nodemailer.createTestAccount((err, account) => {\r\n            // create reusable transporter object using the default SMTP transport\r\n            var transporter = nodemailer.createTransport({\r\n              service: 'gmail',\r\n              auth: {\r\n                user: 'itstechinvento@gmail.com',\r\n                pass: 'techinvento123'\r\n              }\r\n            });\r\n            var htmlforemail = ``;\r\n            let mailOptions = {\r\n              from: 'itstechinvento@gmail.com', // sender address\r\n              to: decoded.email, // list of receivers\r\n              subject: 'Email Verification', // Subject line\r\n              text: 'Please Click below link to Verify Your Email address', // plain text body\r\n              html: 'Please<a id =\"varified\"href=http://' + host + '/ev/' + token + '>Click Here to processed email verification</a>',\r\n            };\r\n            transporter.sendMail(mailOptions, (error, info) => {\r\n              mail_responseModel.create({\r\n                'email': decoded.email,\r\n                'error': error,\r\n                'info': info\r\n              }, function(err, mail_response) {\r\n                if (err) {\r\n                  console.log(\"mail_responseModel error=>\", err);\r\n                } else {\r\n                  console.log(\"mail_responseModel \", mail_response);\r\n                }\r\n              })\r\n\r\n              if (error) {\r\n                res.json({\r\n                  isError: true,\r\n                  data: error\r\n                });\r\n                return console.log(\"error--11--\", error);\r\n              } else {\r\n\r\n                console.log('Message sent: %s', info.messageId);\r\n                console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\r\n                res.json({\r\n                  isError: false,\r\n                  data: 'Please check your email'\r\n                });\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          res.json({\r\n            isError: true,\r\n            data: 'please provide a valid mail'\r\n          });\r\n        }\r\n      }\r\n    })\r\n  },\r\n\r\n  emailVerified: (req, res, next) => {\r\n    var decoded = jwt.verify(req.params.token, env.App_key);\r\n    var dt = new Date();\r\n    var checkDate = new Date(decoded.exp);\r\n    if (dt < checkDate) {\r\n      console.log(\"----------\");\r\n      usersModel.findOneAndUpdate({\r\n        \"email\": decoded.email\r\n      }, {\r\n        $set: {\r\n          \"verification.email_verified\": true\r\n        }\r\n      }, (err, user) => {\r\n        if (err) return res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n        res.redirect('/#/profile');\r\n        // res.send('verified')\r\n        //res.json({ isError: false, data: \"your E-Mail address is verified sucessfully\" });\r\n\r\n      });\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"session expire\"\r\n      });\r\n    }\r\n  },\r\n\r\n  varifyToken: (req, res, next) => {\r\n    console.log(\"in verify Token=>\");\r\n    var decoded = jwt.verify(req.params.token, env.App_key);\r\n    var dt = new Date();\r\n    var checkDate = new Date(decoded.exp);\r\n    if (dt < checkDate) {\r\n      console.log(\"----\");\r\n      var d = new Date();\r\n      var v = new Date();\r\n      v.setMinutes(d.getMinutes() + 60);\r\n      const token = jwt.sign({\r\n        exp: Math.floor(v),\r\n        email: decoded.email,\r\n      }, env.App_key);\r\n      res.redirect('/recover/' + token)\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"session expire\"\r\n      });\r\n    }\r\n  },\r\n  changePassword: (req, res, next) => {\r\n    // console.log(\"req.headers--->\", req.headers['authorization'], req.body);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    req.body.password = encode().value(req.body.password);\r\n    req.body.new_pasword = encode().value(req.body.new_pasword);\r\n    usersModel.findOneAndUpdate({\r\n      $and: [{\r\n        \"password\": req.body.password\r\n      }, {\r\n        \"email\": decoded.email\r\n      }]\r\n    }, {\r\n      $set: {\r\n        \"password\": req.body.new_pasword,\r\n      }\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      });\r\n      console.log(\"user=>\", user);\r\n    })\r\n  },\r\n  recoverPassword: (req, res, next) => {\r\n    console.log(\"req in recover password api=>\", req.body, req.query, req.params);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    if (req.body.password != \"\" && req.body.password.length > 6) {\r\n      req.body.password = encode().value(req.body.password);\r\n      var checkDate = new Date(decoded.exp);\r\n      var dt = new Date();\r\n      console.log(dt, \"------\", checkDate);\r\n      if (dt < checkDate) {\r\n        usersModel.findOneAndUpdate({\r\n          \"email\": decoded.email\r\n        }, {\r\n          $set: {\r\n            \"password\": req.body.password\r\n          }\r\n        }, (err, user) => {\r\n          if (err) return res.json(err);\r\n          res.json({\r\n            isError: false,\r\n            data: user\r\n          });\r\n        });\r\n      } else {\r\n        res.json({\r\n          isError: true,\r\n          data: \"session expire\"\r\n        });\r\n      }\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"Please provide valid password\"\r\n      });\r\n    }\r\n\r\n  },\r\n  changeEmail: (req, res, next) => {\r\n    if (req.body.new_email) {\r\n      req.body.password = encode().value(req.body.old_password);\r\n      usersModel.findOneAndUpdate({\r\n        $and: [{\r\n          \"password\": req.body.password\r\n        }, {\r\n          \"email\": req.body.email\r\n        }]\r\n      }, {\r\n        $set: {\r\n          \"email\": req.body.new_email,\r\n        }\r\n      }, (err, user) => {\r\n        if (err) return res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n        res.json({\r\n          isError: false,\r\n          data: user\r\n        });\r\n      })\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"NULL\"\r\n      });\r\n    }\r\n  },\r\n\r\n\r\n};\r\n\r\n\r\nexport default usersController;"]}
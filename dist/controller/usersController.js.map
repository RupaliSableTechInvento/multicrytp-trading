{"version":3,"sources":["../../src/controller/usersController.js"],"names":["nodemailer","require","mongoose","encode","hashCode","usersController","getAll","req","res","next","console","log","body","params","query","find","err","users","json","isError","data","addUserInfo","decoded","verify","headers","App_key","decoaded","email","findOneAndUpdate","new","user","success","userProfile","_id","Number","id","findOne","tokenData","sort","limit","getOne","create","update","delete","isActive","ok","forgetPassword","host","result","d","Date","v","setMinutes","getMinutes","token","sign","exp","Math","floor","createTestAccount","account","transporter","createTransport","service","auth","pass","mailOptions","from","to","subject","text","html","sendMail","error","info","information","JSON","stringify","mail_response","messageId","getTestMessageUrl","storeBasicUserInfo","isVerified","emailVerification","emailVerified","dt","checkDate","$set","send","varifyToken","redirect","changePassword","password","value","new_pasword","$and","recoverPassword","length","changeEmail","new_email","old_password"],"mappings":"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","file":"usersController.js","sourcesContent":["import usersModel from '../models/usersModel'\r\nimport tokenModel from './../models/tokenModel';\r\n\r\nimport mail_responseModel from '../models/mail_responseModel'\r\nimport postatrade from '../models/postatrade'\r\nimport jwt from 'jsonwebtoken';\r\nimport env from \"../env\";\r\n\r\nconst nodemailer = require('nodemailer');\r\nvar mongoose = require('mongoose');\r\nvar encode = require('hashcode').hashCode;\r\nconst usersController = {\r\n\r\n  getAll: async(req, res, next) => {\r\n    console.log(\"get all web service=>\", req.body, req.params, req.query)\r\n    usersModel.find({}, (err, users) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: users\r\n      });\r\n    });\r\n\r\n  },\r\n  addUserInfo: async(req, res, next) => {\r\n    console.log(\"addUserInfo=>>\", req.body, req.params, req.query)\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"addUserInfo\", decoaded.email)\r\n    usersModel.findOneAndUpdate({\r\n\r\n      'email': decoded.email\r\n    }, req.body, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        success: false,\r\n        data: err\r\n      });\r\n      res.json({\r\n        success: true,\r\n        data: user\r\n      })\r\n    });\r\n\r\n  },\r\n  userProfile: (req, res, next) => {\r\n    var _id = Number(req.query.id);\r\n    console.log(\"id=>\", _id);\r\n    usersModel.findOne({\r\n      _id: _id\r\n    }, (err, user) => {\r\n\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n      } else {\r\n        var email = user.email;\r\n        console.log(\"Email==>\", email);\r\n        tokenModel.findOne({ 'email': email }, (err, tokenData) => {\r\n          res.json({\r\n            isError: false,\r\n            data: { user: user, tokenData: tokenData }\r\n          });\r\n        }).sort({ _id: -1 }).limit(1)\r\n\r\n      }\r\n    });\r\n  },\r\n\r\n\r\n  getOne: (req, res, next) => {\r\n    // console.log(\"------------\",next);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    usersModel.findOne({\r\n      'email': decoded.email\r\n    }, (err, user) => {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n      } else {\r\n        res.json({\r\n          isError: false,\r\n          data: user\r\n        });\r\n      }\r\n    });\r\n  },\r\n\r\n  create: (req, res, next) => {\r\n    usersModel.create(req.body, function(err, user) {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    // var id = mongoose.Types.ObjectId(req.body.id);\r\n    usersModel.findOneAndUpdate({\r\n      '_id': req.body.id\r\n    }, req.body, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    });\r\n  },\r\n\r\n  delete: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, {\r\n      isActive: 'inactive'\r\n    }, (err, ok) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      else {\r\n        res.json({\r\n          isError: true,\r\n          data: true\r\n        })\r\n      }\r\n    });\r\n  },\r\n  forgetPassword: (req, res, next) => {\r\n    var email = req.body.email;\r\n    var host = req.headers.host;\r\n    console.log(\"req.domain=>\", req.headers.host);\r\n    console.log(\"email\", email);\r\n    usersModel.find({\r\n      'email': req.body.email\r\n    }, function(err, result) {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        })\r\n      } else {\r\n        if (result != \"\") {\r\n          var d = new Date();\r\n          var v = new Date();\r\n          v.setMinutes(d.getMinutes() + 30);\r\n          const token = jwt.sign({\r\n            exp: Math.floor(v),\r\n            email: req.body.email,\r\n          }, env.App_key);\r\n          console.log(result);\r\n          nodemailer.createTestAccount((err, account) => {\r\n            // create reusable transporter object using the default SMTP transport\r\n            var transporter = nodemailer.createTransport({\r\n              service: 'gmail',\r\n              auth: {\r\n                user: 'itstechinvento@gmail.com',\r\n                pass: 'techinvento123'\r\n              }\r\n            });\r\n\r\n            // setup email data with unicode symbols\r\n            let mailOptions = {\r\n              from: 'itstechinvento@gmail.com', // sender address\r\n              to: email, // list of receivers\r\n              subject: 'Change Password', // Subject line\r\n              text: 'Please Click below link to change password', // plain text body\r\n              html: '<a href=http://' + host + '/recover?accessToken=' + token + '>Click to recover password</a>' // html body\r\n\r\n              // html: '<a href=http://localhost:3000/recover?accessToken=' + token + '>Click to recover password</a>' // html body\r\n            };\r\n            console.log(\"Mailoptions\", mailOptions);\r\n\r\n            // send mail with defined transport object\r\n            transporter.sendMail(mailOptions, (error, info) => {\r\n              var information = JSON.stringify(info);\r\n\r\n              console.log('Transporter', err, information);\r\n              mail_responseModel.create({\r\n                'email': email,\r\n                'error': error,\r\n                'info': information\r\n              }, function(err, mail_response) {\r\n                if (err) {\r\n                  console.log(\"mail_responseModel error=>\", err);\r\n                } else {\r\n                  console.log(\"mail_responseModel No error\", mail_response);\r\n                }\r\n              })\r\n\r\n\r\n              if (error) {\r\n                return console.log(\"error--11--\", error);\r\n                res.json({\r\n                  isError: true,\r\n                  data: error\r\n                });\r\n              } else {\r\n                console.log('Message sent: %s', info.messageId);\r\n                console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\r\n                res.json({\r\n                  isError: false,\r\n                  data: 'Please check your Email'\r\n                });\r\n\r\n              }\r\n\r\n              // Preview only available when sending through an Ethereal account\r\n              // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>\r\n              // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...\r\n            });\r\n\r\n            // res.json({ isError: false, data: 'Please check your Email' });\r\n\r\n            //    res.json(mailOptions);\r\n          });\r\n        } else {\r\n          res.json({\r\n            isError: true,\r\n            data: 'please provide a valid mail'\r\n          });\r\n        }\r\n      }\r\n    })\r\n  },\r\n\r\n  storeBasicUserInfo: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var id = req.body.id;\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, {\r\n      'basicInfo': req.body\r\n    }, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    });\r\n  },\r\n\r\n\r\n  isVerified: (req, res, next) => {\r\n    var decoded = jwt.verify(req.query.token, env.App_key);\r\n    usersModel.find({\r\n      'email': decoded.email\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      });\r\n    });\r\n\r\n  },\r\n\r\n  emailVerification: (req, res, next) => {\r\n    console.log(\"Email Verification=>\", req.body, req.params, req.query);\r\n    var email = req.body.email;\r\n    var host = req.headers.host;\r\n\r\n    usersModel.find({\r\n      'email': req.body.email\r\n    }, function(err, result) {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        })\r\n      } else {\r\n        if (result != \"\") {\r\n          var d = new Date();\r\n          var v = new Date();\r\n          v.setMinutes(d.getMinutes() + 30);\r\n          const token = jwt.sign({\r\n            exp: Math.floor(v),\r\n            email: req.body.email,\r\n          }, env.App_key);\r\n          console.log(result);\r\n          nodemailer.createTestAccount((err, account) => {\r\n            // create reusable transporter object using the default SMTP transport\r\n            var transporter = nodemailer.createTransport({\r\n              service: 'gmail',\r\n              auth: {\r\n                user: 'itstechinvento@gmail.com',\r\n                pass: 'techinvento123'\r\n              }\r\n            });\r\n            let mailOptions = {\r\n              from: 'itstechinvento@gmail.com', // sender address\r\n              to: email, // list of receivers\r\n              subject: 'Email Verification', // Subject line\r\n              text: 'Please Click below link to Verify Your Email address', // plain text body\r\n              html: 'Please<a href=http://' + host + '/ev/' + token + '>Click Here to processed email verification</a>' // html body\r\n            };\r\n            transporter.sendMail(mailOptions, (error, info) => {\r\n\r\n              mail_responseModel.create({\r\n                'email': email,\r\n                'error': error,\r\n                'info': info\r\n              }, function(err, mail_response) {\r\n                if (err) {\r\n                  console.log(\"mail_responseModel error=>\", err);\r\n                } else {\r\n                  console.log(\"mail_responseModel \", mail_response);\r\n                }\r\n              })\r\n              if (error) {\r\n                res.json({\r\n                  isError: true,\r\n                  data: error\r\n                });\r\n                return console.log(\"error--11--\", error);\r\n              } else {\r\n                console.log('Message sent: %s', info.messageId);\r\n                console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\r\n                res.json({\r\n                  isError: false,\r\n                  data: 'Please check your email'\r\n                });\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          res.json({\r\n            isError: true,\r\n            data: 'please provide a valid mail'\r\n          });\r\n        }\r\n      }\r\n    })\r\n  },\r\n\r\n  emailVerified: (req, res, next) => {\r\n    var decoded = jwt.verify(req.params.token, env.App_key);\r\n    var dt = new Date();\r\n    var checkDate = new Date(decoded.exp);\r\n    if (dt < checkDate) {\r\n      console.log(\"----------\");\r\n      usersModel.findOneAndUpdate({\r\n        \"email\": decoded.email\r\n      }, {\r\n        $set: {\r\n          \"verification.email_verified\": true\r\n        }\r\n      }, (err, user) => {\r\n        if (err) return res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n        //  res.redirect('/#/profile');\r\n        res.send('verified')\r\n          //res.json({ isError: false, data: \"your E-Mail address is verified sucessfully\" });\r\n\r\n      });\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"session expire\"\r\n      });\r\n    }\r\n  },\r\n\r\n  varifyToken: (req, res, next) => {\r\n    console.log(\"in verify Token=>\");\r\n    var decoded = jwt.verify(req.params.token, env.App_key);\r\n    var dt = new Date();\r\n    var checkDate = new Date(decoded.exp);\r\n    if (dt < checkDate) {\r\n      console.log(\"----\");\r\n      var d = new Date();\r\n      var v = new Date();\r\n      v.setMinutes(d.getMinutes() + 60);\r\n      const token = jwt.sign({\r\n        exp: Math.floor(v),\r\n        email: decoded.email,\r\n      }, env.App_key);\r\n      res.redirect('/recover/' + token)\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"session expire\"\r\n      });\r\n    }\r\n  },\r\n  changePassword: (req, res, next) => {\r\n    // console.log(\"req.headers--->\", req.headers['authorization'], req.body);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    req.body.password = encode().value(req.body.password);\r\n    req.body.new_pasword = encode().value(req.body.new_pasword);\r\n    usersModel.findOneAndUpdate({\r\n      $and: [{\r\n        \"password\": req.body.password\r\n      }, {\r\n        \"email\": decoded.email\r\n      }]\r\n    }, {\r\n      $set: {\r\n        \"password\": req.body.new_pasword,\r\n      }\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      });\r\n      console.log(\"user=>\", user);\r\n    })\r\n  },\r\n  recoverPassword: (req, res, next) => {\r\n    console.log(\"req in recover password api=>\", req.body, req.query, req.params);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    if (req.body.password != \"\" && req.body.password.length > 6) {\r\n      req.body.password = encode().value(req.body.password);\r\n      var checkDate = new Date(decoded.exp);\r\n      var dt = new Date();\r\n      console.log(dt, \"------\", checkDate);\r\n      if (dt < checkDate) {\r\n        usersModel.findOneAndUpdate({\r\n          \"email\": decoded.email\r\n        }, {\r\n          $set: {\r\n            \"password\": req.body.password\r\n          }\r\n        }, (err, user) => {\r\n          if (err) return res.json(err);\r\n          res.json({\r\n            isError: false,\r\n            data: user\r\n          });\r\n        });\r\n      } else {\r\n        res.json({\r\n          isError: true,\r\n          data: \"session expire\"\r\n        });\r\n      }\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"Please provide valid password\"\r\n      });\r\n    }\r\n\r\n  },\r\n  changeEmail: (req, res, next) => {\r\n    if (req.body.new_email) {\r\n      req.body.password = encode().value(req.body.old_password);\r\n      usersModel.findOneAndUpdate({\r\n        $and: [{\r\n          \"password\": req.body.password\r\n        }, {\r\n          \"email\": req.body.email\r\n        }]\r\n      }, {\r\n        $set: {\r\n          \"email\": req.body.new_email,\r\n        }\r\n      }, (err, user) => {\r\n        if (err) return res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n        res.json({\r\n          isError: false,\r\n          data: user\r\n        });\r\n      })\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"NULL\"\r\n      });\r\n    }\r\n  },\r\n\r\n\r\n};\r\n\r\n\r\nexport default usersController;"]}
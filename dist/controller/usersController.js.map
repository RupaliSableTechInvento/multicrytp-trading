{"version":3,"sources":["../../src/controller/usersController.js"],"names":["nodemailer","require","mongoose","encode","hashCode","usersController","getAllUnreadMessages","req","res","next","decoded","verify","headers","App_key","console","log","email","find","err","messages","json","isError","data","getAllMessagesWithFriend","friend","query","date","temp","limit","$or","$and","sender","reciever","$lt","sort","exec","setMsgRead","arrMsgID","body","_id","arrMsgIDList","map","aField","bulk","collection","initializeUnorderedBulkOp","forEach","item","index","Types","ObjectId","updateOne","$set","isRead","execute","getFriendsList","users","getUserInfo","redirect","acceptFriendRequest","senderEmail","result","friendsList","friends","findOneAndUpdate","errFriend","resultFriend","dataObj","senderFirstName","first_name","status","$push","upsert","addUserProfilePic","imgURL","addMessage","Date","create","message","friendReq","to","To","errParent","resultParent","isFound","length","getAll","addUserInfo","new","user","success","userProfile","id","findOne","tokenData","getOne","update","delete","isActive","ok","forgetPassword","host","d","v","setMinutes","getMinutes","token","sign","exp","Math","floor","createTestAccount","account","transporter","createTransport","service","auth","pass","mailOptions","from","subject","text","html","sendMail","error","info","information","JSON","stringify","mail_response","messageId","getTestMessageUrl","storeBasicUserInfo","isVerified","emailVerification","htmlforemail","emailVerified","params","dt","checkDate","varifyToken","changePassword","password","value","new_pasword","recoverPassword","changeEmail","new_email","old_password"],"mappings":"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","file":"usersController.js","sourcesContent":["import usersModel from '../models/usersModel'\r\nimport tokenModel from './../models/tokenModel';\r\nimport messagesModel from '../models/messagesModel'\r\n\r\nimport mail_responseModel from '../models/mail_responseModel'\r\nimport postatrade from '../models/postatrade'\r\nimport jwt from 'jsonwebtoken';\r\nimport env from \"../env\";\r\n\r\nconst nodemailer = require('nodemailer');\r\nvar mongoose = require('mongoose');\r\nvar encode = require('hashcode').hashCode;\r\nconst usersController = {\r\n  getAllUnreadMessages: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"getAllMessages reqest from==>\", decoded.email)\r\n    messagesModel.find({\r\n      'reciever': decoded.email,\r\n      'isRead': false,\r\n    }, (err, messages) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: messages\r\n      });\r\n\r\n    });\r\n  },\r\n\r\n\r\n  getAllMessagesWithFriend: (req, res, next) => {\r\n\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    // console.log(\"getAllMessagesWithFriend reqest from==>\", decoded.email, req.query.data)\r\n    var friend = req.query.data.friend;\r\n    var date = req.query.data.date;\r\n    var temp = req.query.data.limit;\r\n    var limit = '';\r\n\r\n    var query = '';\r\n    if (date) {\r\n      query = {\r\n        $or: [\r\n          { $and: [{ sender: decoded.email }, { reciever: friend }] },\r\n          { $and: [{ sender: friend }, { reciever: decoded.email }] }\r\n        ],\r\n        \"date\": { $lt: date }\r\n      }\r\n    } else {\r\n      query = {\r\n        $or: [\r\n          { $and: [{ sender: decoded.email }, { reciever: friend }] },\r\n          { $and: [{ sender: friend }, { reciever: decoded.email }] }\r\n        ]\r\n      }\r\n    }\r\n\r\n\r\n\r\n    messagesModel.find(\r\n      query\r\n    ).sort({ 'date': -1 }).limit(10)\r\n\r\n\r\n    .exec(function(err, messages) {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: messages\r\n      });\r\n    });\r\n  },\r\n  setMsgRead: (req, res, next) => {\r\n    // console.log(\"setMsgRead ==>\", req.body, req.query);\r\n    var arrMsgID = [];\r\n    arrMsgID = req.body.data;\r\n    console.log(\"arrMsgID\", arrMsgID);\r\n    var _id = '';\r\n    var arrMsgIDList = arrMsgID.map(function(aField) {\r\n      // return mongoose.Types.ObjectId(aField);\r\n      return aField\r\n      console.log(aField);\r\n    })\r\n\r\n\r\n    var bulk = messagesModel.collection.initializeUnorderedBulkOp();\r\n\r\n    arrMsgID.forEach((item, index) => {\r\n      _id = mongoose.Types.ObjectId(item)\r\n        // var id = arrMsgID[index];\r\n      bulk.find({ _id: _id }).updateOne({ $set: { isRead: true } });\r\n\r\n    })\r\n    bulk.execute((err, messages) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: messages\r\n      });\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  },\r\n  getFriendsList: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"addUserInfo\", decoded.email)\r\n    usersModel.find({\r\n      'email': decoded.email\r\n    }, { \"friends\": 1, \"_id\": 0 }, (err, users) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: users\r\n      });\r\n    });\r\n  },\r\n  getUserInfo: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"decoded.email=>\", decoded.email);\r\n    usersModel.find({\r\n      'email': decoded.email\r\n    }, (err, users) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      console.log(\"users==>\", users);\r\n      if (users) {\r\n        res.json({\r\n          isError: false,\r\n          data: users\r\n        });\r\n      } else {\r\n        res.redirect('/#/login');\r\n      }\r\n\r\n    });\r\n  },\r\n\r\n\r\n  acceptFriendRequest: (req, res, next) => {\r\n\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var senderEmail = req.body.senderEmail;\r\n    console.log(\"acceptFriendRequest senderEmail==>\", senderEmail);\r\n\r\n    var query = {\r\n      'email': decoded.email\r\n    }\r\n    usersModel.find(query, (err, result) => {\r\n      if (!err) {\r\n        console.log(\"friends list\", result);\r\n        var friendsList = result[0].friends;\r\n        friendsList.forEach((item, index) => {\r\n          if (item.senderEmail == senderEmail) {\r\n            usersModel.findOneAndUpdate({\r\n              [`friends.${index}.senderEmail`]: item.senderEmail\r\n            }, {\r\n              $set: {\r\n                [`friends.${index}.status`]: 'Friend'\r\n              }\r\n            }, (errFriend, resultFriend) => {\r\n\r\n              if (errFriend) return res.json({\r\n                isError: true,\r\n                data: err\r\n              });\r\n              // res.json({\r\n              //   isError: false,\r\n              //   data: resultFriend\r\n              // });\r\n\r\n              var dataObj = {\r\n                senderEmail: decoded.email,\r\n                senderFirstName: decoded.first_name,\r\n                status: 'Friend'\r\n              }\r\n\r\n              usersModel.findOneAndUpdate({\r\n                'email': senderEmail\r\n              }, { $push: { friends: dataObj } }, {\r\n                upsert: true\r\n              }, (err, users) => {\r\n                if (err) return res.json({\r\n                  isError: true,\r\n                  data: err\r\n                });\r\n                res.json({\r\n                  isError: false,\r\n                  data: users\r\n                });\r\n              });\r\n\r\n\r\n            })\r\n          }\r\n        })\r\n\r\n\r\n      }\r\n    })\r\n\r\n  },\r\n\r\n  addUserProfilePic: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var imgURL = req.body.imgURL;\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, {\r\n      $set: {\r\n        imgURL: imgURL\r\n      }\r\n    }, (err, data) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      else {\r\n        res.json({\r\n          isError: false,\r\n          data: data\r\n        })\r\n      }\r\n    });\r\n  },\r\n  addMessage: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var sender = decoded.email;\r\n    var data = req.body;\r\n    data.sender = sender;\r\n    data.date = new Date();\r\n    console.log(\"Data for message==>\", data);\r\n    messagesModel.create(data, function(err, message) {\r\n      if (err) return res.json(err);\r\n      res.json({\r\n        isError: false,\r\n        data: message,\r\n      })\r\n    })\r\n  },\r\n\r\n  friendReq: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var to = req.body.To;\r\n    console.log(\"To  Details=>\", to);\r\n\r\n    var dataObj = {\r\n      senderEmail: decoded.email,\r\n      senderFirstName: decoded.first_name,\r\n      status: 'Pending'\r\n    }\r\n    console.log(\"Senders Details=>\", dataObj);\r\n    usersModel.find({ 'email': to }, (errParent, resultParent) => {\r\n      if (!errParent) {\r\n        var friendsList = resultParent[0].friends || [];\r\n        console.log(\"friendList==>\", friendsList);\r\n        var isFound = friendsList.find((item) => item.senderEmail == decoded.email);\r\n        if (isFound) {\r\n          res.json({\r\n            isError: false,\r\n            isFound: true\r\n          });\r\n        }\r\n        console.log(\"isfound==>\", isFound);\r\n        if (!isFound || friendsList.length === 0) {\r\n          console.log(\"not found\");\r\n          usersModel.findOneAndUpdate({\r\n            'email': to\r\n          }, { $push: { friends: dataObj } }, {\r\n            upsert: true\r\n          }, (err, users) => {\r\n            if (err) return res.json({\r\n              isError: true,\r\n              data: err\r\n            });\r\n            res.json({\r\n              isError: false,\r\n              data: users\r\n            });\r\n          });\r\n        }\r\n      }\r\n    })\r\n  },\r\n\r\n\r\n  getAll: async(req, res, next) => {\r\n    usersModel.find({}, (err, users) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: users\r\n      });\r\n    });\r\n\r\n  },\r\n  addUserInfo: async(req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    usersModel.findOneAndUpdate({\r\n\r\n      'email': decoded.email\r\n    }, req.body, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        success: false,\r\n        data: err\r\n      });\r\n      res.json({\r\n        success: true,\r\n        data: user\r\n      })\r\n    });\r\n\r\n  },\r\n  userProfile: (req, res, next) => {\r\n    // var _id = Number(req.query.id);\r\n\r\n    var _id = mongoose.Types.ObjectId(req.query.id);\r\n    console.log(\"id=>\", _id);\r\n    usersModel.findOne({\r\n      _id: _id\r\n    }, (err, user) => {\r\n\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n      } else {\r\n        var email = user.email;\r\n        console.log(\"Email==>\", email);\r\n        tokenModel.findOne({ 'email': email }, (err, tokenData) => {\r\n          res.json({\r\n            isError: false,\r\n            data: { user: user, tokenData: tokenData }\r\n          });\r\n        }).sort({ _id: -1 }).limit(1)\r\n\r\n      }\r\n    });\r\n  },\r\n\r\n\r\n  getOne: (req, res, next) => {\r\n    // console.log(\"------------\",next);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    usersModel.findOne({\r\n      'email': decoded.email\r\n    }, (err, user) => {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n      } else {\r\n        res.json({\r\n          isError: false,\r\n          data: user\r\n        });\r\n      }\r\n    });\r\n  },\r\n\r\n  create: (req, res, next) => {\r\n    usersModel.create(req.body, function(err, user) {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    // var id = mongoose.Types.ObjectId(req.body.id);\r\n    usersModel.findOneAndUpdate({\r\n      '_id': req.body.id\r\n    }, req.body, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    });\r\n  },\r\n\r\n  delete: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, {\r\n      isActive: 'inactive'\r\n    }, (err, ok) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      else {\r\n        res.json({\r\n          isError: true,\r\n          data: true\r\n        })\r\n      }\r\n    });\r\n  },\r\n  forgetPassword: (req, res, next) => {\r\n    var email = req.body.email;\r\n    var host = req.headers.host;\r\n\r\n    usersModel.find({\r\n      'email': req.body.email\r\n    }, function(err, result) {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        })\r\n      } else {\r\n        if (result != \"\") {\r\n          var d = new Date();\r\n          var v = new Date();\r\n          v.setMinutes(d.getMinutes() + 30);\r\n          const token = jwt.sign({\r\n            exp: Math.floor(v),\r\n            email: req.body.email,\r\n          }, env.App_key);\r\n          console.log(result);\r\n          nodemailer.createTestAccount((err, account) => {\r\n            // create reusable transporter object using the default SMTP transport\r\n            var transporter = nodemailer.createTransport({\r\n              service: 'gmail',\r\n              auth: {\r\n                user: 'itstechinvento@gmail.com',\r\n                pass: 'techinvento123'\r\n              }\r\n            });\r\n\r\n            // setup email data with unicode symbols\r\n            let mailOptions = {\r\n              from: 'itstechinvento@gmail.com', // sender address\r\n              to: email, // list of receivers\r\n              subject: 'Create New Password', // Subject line\r\n              text: 'As requested,here is a link to allow you to select a new password', // plain text body\r\n              html: '<a href=http://' + host + '/recover?accessToken=' + token + '>Click to recover password</a>' // html body\r\n\r\n              // html: '<a href=http://localhost:3000/recover?accessToken=' + token + '>Click to recover password</a>' // html body\r\n            };\r\n            console.log(\"Mailoptions\", mailOptions);\r\n\r\n            // send mail with defined transport object\r\n            transporter.sendMail(mailOptions, (error, info) => {\r\n              var information = JSON.stringify(info);\r\n\r\n              console.log('Transporter', err, information);\r\n              mail_responseModel.create({\r\n                'email': email,\r\n                'error': error,\r\n                'info': information\r\n              }, function(err, mail_response) {\r\n                if (err) {\r\n                  console.log(\"mail_responseModel error=>\", err);\r\n                } else {\r\n                  console.log(\"mail_responseModel No error\", mail_response);\r\n                }\r\n              })\r\n\r\n\r\n              if (error) {\r\n                return console.log(\"error--11--\", error);\r\n                res.json({\r\n                  isError: true,\r\n                  data: error\r\n                });\r\n              } else {\r\n                console.log('Message sent: %s', info.messageId);\r\n                console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\r\n                res.json({\r\n                  isError: false,\r\n                  data: 'Please check your Email'\r\n                });\r\n\r\n              }\r\n\r\n              // Preview only available when sending through an Ethereal account\r\n              // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>\r\n              // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...\r\n            });\r\n\r\n            // res.json({ isError: false, data: 'Please check your Email' });\r\n\r\n            //    res.json(mailOptions);\r\n          });\r\n        } else {\r\n          res.json({\r\n            isError: true,\r\n            data: 'please provide a valid mail'\r\n          });\r\n        }\r\n      }\r\n    })\r\n  },\r\n\r\n  storeBasicUserInfo: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var id = req.body.id;\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, {\r\n      'basicInfo': req.body\r\n    }, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    });\r\n  },\r\n\r\n\r\n  isVerified: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"isVerified==>\", decoded.email);\r\n\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      });\r\n    });\r\n\r\n  },\r\n\r\n  emailVerification: (req, res, next) => {\r\n    var host = req.headers.host;\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"Emailverification==>\", decoded.email);\r\n    usersModel.find({\r\n      'email': decoded.email\r\n    }, function(err, result) {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        })\r\n      } else {\r\n        if (result != \"\") {\r\n          var d = new Date();\r\n          var v = new Date();\r\n          v.setMinutes(d.getMinutes() + 30);\r\n          const token = jwt.sign({\r\n            exp: Math.floor(v),\r\n            email: decoded.email,\r\n          }, env.App_key);\r\n          console.log(result);\r\n          nodemailer.createTestAccount((err, account) => {\r\n            // create reusable transporter object using the default SMTP transport\r\n            var transporter = nodemailer.createTransport({\r\n              service: 'gmail',\r\n              auth: {\r\n                user: 'itstechinvento@gmail.com',\r\n                pass: 'techinvento123'\r\n              }\r\n            });\r\n            var htmlforemail = ``;\r\n            let mailOptions = {\r\n              from: 'itstechinvento@gmail.com', // sender address\r\n              to: decoded.email, // list of receivers\r\n              subject: 'Email Verification', // Subject line\r\n              text: 'Please Click below link to Verify Your Email address', // plain text body\r\n              html: 'Please<a id =\"varified\"href=http://' + host + '/ev/' + token + '>Click Here to processed email verification</a>',\r\n            };\r\n            transporter.sendMail(mailOptions, (error, info) => {\r\n              // mail_responseModel.create({\r\n              //   'email': decoded.email,\r\n              //   'error': error,\r\n              //   'info': info\r\n              // }, function(err, mail_response) {\r\n              //   if (err) {\r\n              //     console.log(\"mail_responseModel error=>\", err);\r\n              //   } else {\r\n              //     console.log(\"mail_responseModel \", mail_response);\r\n              //   }\r\n              // })\r\n              if (error) {\r\n                res.json({\r\n                  isError: true,\r\n                  data: error\r\n                });\r\n                return console.log(\"error--11--\", error);\r\n              } else {\r\n                console.log('Message sent: %s', info.messageId);\r\n                console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\r\n                res.json({\r\n                  isError: false,\r\n                  data: 'Please check your email'\r\n                });\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          res.json({\r\n            isError: true,\r\n            data: 'please provide a valid mail'\r\n          });\r\n        }\r\n      }\r\n    })\r\n  },\r\n\r\n  emailVerified: (req, res, next) => {\r\n    var decoded = jwt.verify(req.params.token, env.App_key);\r\n    var dt = new Date();\r\n    var checkDate = new Date(decoded.exp);\r\n    if (dt < checkDate) {\r\n      console.log(\"----------\");\r\n      usersModel.findOneAndUpdate({\r\n        \"email\": decoded.email\r\n      }, {\r\n        $set: {\r\n          \"verification.email_verified\": true\r\n        }\r\n      }, (err, user) => {\r\n        if (err) return res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n        res.redirect('/#/profile');\r\n        // res.send('verified')\r\n        //res.json({ isError: false, data: \"your E-Mail address is verified sucessfully\" });\r\n\r\n      });\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"session expire\"\r\n      });\r\n    }\r\n  },\r\n\r\n  varifyToken: (req, res, next) => {\r\n    console.log(\"in verify Token=>\");\r\n    var decoded = jwt.verify(req.params.token, env.App_key);\r\n    var dt = new Date();\r\n    var checkDate = new Date(decoded.exp);\r\n    if (dt < checkDate) {\r\n      console.log(\"----\");\r\n      var d = new Date();\r\n      var v = new Date();\r\n      v.setMinutes(d.getMinutes() + 60);\r\n      const token = jwt.sign({\r\n        exp: Math.floor(v),\r\n        email: decoded.email,\r\n      }, env.App_key);\r\n      res.redirect('/recover/' + token)\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"session expire\"\r\n      });\r\n    }\r\n  },\r\n  changePassword: (req, res, next) => {\r\n    // console.log(\"req.headers--->\", req.headers['authorization'], req.body);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    req.body.password = encode().value(req.body.password);\r\n    req.body.new_pasword = encode().value(req.body.new_pasword);\r\n    usersModel.findOneAndUpdate({\r\n      $and: [{\r\n        \"password\": req.body.password\r\n      }, {\r\n        \"email\": decoded.email\r\n      }]\r\n    }, {\r\n      $set: {\r\n        \"password\": req.body.new_pasword,\r\n      }\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      });\r\n      console.log(\"user=>\", user);\r\n    })\r\n  },\r\n  recoverPassword: (req, res, next) => {\r\n    console.log(\"req in recover password api=>\", req.body, req.query, req.params);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    if (req.body.password != \"\" && req.body.password.length > 6) {\r\n      req.body.password = encode().value(req.body.password);\r\n      var checkDate = new Date(decoded.exp);\r\n      var dt = new Date();\r\n      console.log(dt, \"------\", checkDate);\r\n      if (dt < checkDate) {\r\n        usersModel.findOneAndUpdate({\r\n          \"email\": decoded.email\r\n        }, {\r\n          $set: {\r\n            \"password\": req.body.password\r\n          }\r\n        }, (err, user) => {\r\n          if (err) return res.json(err);\r\n          res.json({\r\n            isError: false,\r\n            data: user\r\n          });\r\n        });\r\n      } else {\r\n        res.json({\r\n          isError: true,\r\n          data: \"session expire\"\r\n        });\r\n      }\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"Please provide valid password\"\r\n      });\r\n    }\r\n\r\n  },\r\n  changeEmail: (req, res, next) => {\r\n    if (req.body.new_email) {\r\n      req.body.password = encode().value(req.body.old_password);\r\n      usersModel.findOneAndUpdate({\r\n        $and: [{\r\n          \"password\": req.body.password\r\n        }, {\r\n          \"email\": req.body.email\r\n        }]\r\n      }, {\r\n        $set: {\r\n          \"email\": req.body.new_email,\r\n        }\r\n      }, (err, user) => {\r\n        if (err) return res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n        res.json({\r\n          isError: false,\r\n          data: user\r\n        });\r\n      })\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"NULL\"\r\n      });\r\n    }\r\n  },\r\n\r\n\r\n};\r\n\r\n\r\nexport default usersController;"]}
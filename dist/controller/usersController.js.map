{"version":3,"sources":["../../src/controller/usersController.js"],"names":["nodemailer","require","mongoose","encode","hashCode","usersController","getAllUnreadMessages","req","res","next","decoded","verify","headers","App_key","console","log","email","find","err","messages","json","isError","data","getAllMessagesWithFriend","friend","query","date","temp","limit","$or","$and","sender","reciever","$lt","sort","parseInt","exec","setMsgRead","arrMsgID","body","arrMsgIDList","map","aField","Types","ObjectId","$in","$set","isRead","lean","getFriendsList","users","getUserInfo","acceptFriendRequest","senderEmail","result","friendsList","friends","forEach","item","index","findOneAndUpdate","errFriend","resultFriend","dataObj","senderFirstName","first_name","status","$push","upsert","addUserProfilePic","imgURL","addMessage","Date","create","message","friendReq","to","To","errParent","resultParent","isFound","length","getAll","addUserInfo","new","user","success","userProfile","_id","id","findOne","tokenData","getOne","update","delete","isActive","ok","forgetPassword","host","d","v","setMinutes","getMinutes","token","sign","exp","Math","floor","createTestAccount","account","transporter","createTransport","service","auth","pass","mailOptions","from","subject","text","html","sendMail","error","info","information","JSON","stringify","mail_response","messageId","getTestMessageUrl","storeBasicUserInfo","isVerified","emailVerification","htmlforemail","emailVerified","params","dt","checkDate","redirect","varifyToken","changePassword","password","value","new_pasword","recoverPassword","changeEmail","new_email","old_password"],"mappings":"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","file":"usersController.js","sourcesContent":["import usersModel from '../models/usersModel'\r\nimport tokenModel from './../models/tokenModel';\r\nimport messagesModel from '../models/messagesModel'\r\n\r\nimport mail_responseModel from '../models/mail_responseModel'\r\nimport postatrade from '../models/postatrade'\r\nimport jwt from 'jsonwebtoken';\r\nimport env from \"../env\";\r\n\r\nconst nodemailer = require('nodemailer');\r\nvar mongoose = require('mongoose');\r\nvar encode = require('hashcode').hashCode;\r\nconst usersController = {\r\n  getAllUnreadMessages: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"getAllMessages reqest from==>\", decoded.email)\r\n    messagesModel.find({\r\n      'reciever': decoded.email,\r\n      'isRead': false,\r\n    }, (err, messages) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: messages\r\n      });\r\n\r\n    });\r\n  },\r\n\r\n\r\n  getAllMessagesWithFriend: (req, res, next) => {\r\n\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    // console.log(\"getAllMessagesWithFriend reqest from==>\", decoded.email, req.query.data)\r\n    var friend = req.query.data.friend;\r\n    var date = req.query.data.date;\r\n    var temp = req.query.data.limit;\r\n    var limit = '';\r\n    // var limit=parseInt(temp)\r\n    if (temp && temp < 10) {\r\n      limit = temp\r\n    } else {\r\n      limit = 10;\r\n    }\r\n    var query = '';\r\n    if (date) {\r\n      query = {\r\n        $or: [\r\n          { $and: [{ sender: decoded.email }, { reciever: friend }] },\r\n          { $and: [{ sender: friend }, { reciever: decoded.email }] }\r\n        ],\r\n        \"date\": { $lt: date }\r\n      }\r\n    } else {\r\n      query = {\r\n        $or: [\r\n          { $and: [{ sender: decoded.email }, { reciever: friend }] },\r\n          { $and: [{ sender: friend }, { reciever: decoded.email }] }\r\n        ]\r\n      }\r\n    }\r\n\r\n\r\n\r\n    messagesModel.find(\r\n      query\r\n    ).sort({ 'date': -1 }).limit(parseInt(limit))\r\n\r\n\r\n    .exec(function(err, messages) {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: messages\r\n      });\r\n    });\r\n\r\n\r\n\r\n    // messagesModel.find({\r\n    //   $or: [\r\n    //     { $and: [{ sender: decoded.email }, { reciever: friend }] },\r\n    //     { $and: [{ sender: friend }, { reciever: decoded.email }] }\r\n    //   ]\r\n\r\n    // }, (err, messages) => {\r\n    //   if (err) return res.json({\r\n    //     isError: true,\r\n    //     data: err\r\n    //   });\r\n    //   res.json({\r\n    //     isError: false,\r\n    //     data: messages\r\n    //   });\r\n    // }).limit(10);\r\n\r\n  },\r\n  setMsgRead: (req, res, next) => {\r\n    // console.log(\"setMsgRead ==>\", req.body, req.query);\r\n    var arrMsgID = [];\r\n    arrMsgID = req.body.data;\r\n    console.log(\"arrMsgID\", arrMsgID);\r\n\r\n    var arrMsgIDList = arrMsgID.map(function(aField) {\r\n      return mongoose.Types.ObjectId(aField);\r\n      console.log(aField);\r\n    })\r\n    messagesModel.find({ \"_id\": { $in: arrMsgIDList } }, {\r\n      $set: {\r\n        isRead: true\r\n      },\r\n    }).lean().exec(function(err, isRead) {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: isRead\r\n      });\r\n    });\r\n\r\n\r\n    // arrMsgID.forEach((item) => {\r\n    //   var _id = mongoose.Types.ObjectId(item)\r\n    //   messagesModel.findOneAndUpdate({\r\n    //     _id: _id\r\n    //   }, {\r\n    //     $set: {\r\n    //       isRead: true\r\n    //     }\r\n    //   }, (err, isRead) => {\r\n\r\n    //     if (err) return\r\n    //     res.json({\r\n    //       isError: true,\r\n    //       data: err\r\n    //     });\r\n    //     res.json({\r\n    //       isError: false,\r\n    //       data: isRead\r\n    //     });\r\n\r\n\r\n    //   })\r\n\r\n    // })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  },\r\n  getFriendsList: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"addUserInfo\", decoded.email)\r\n    usersModel.find({\r\n      'email': decoded.email\r\n    }, { \"friends\": 1, \"_id\": 0 }, (err, users) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: users\r\n      });\r\n    });\r\n  },\r\n  getUserInfo: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    usersModel.find({\r\n      'email': decoded.email\r\n    }, (err, users) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: users\r\n      });\r\n    });\r\n  },\r\n\r\n\r\n  acceptFriendRequest: (req, res, next) => {\r\n\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var senderEmail = req.body.senderEmail;\r\n    console.log(\"senderEmail==>\", senderEmail);\r\n\r\n    var query = {\r\n      'email': decoded.email\r\n    }\r\n\r\n    usersModel.find(query, (err, result) => {\r\n      if (!err) {\r\n        console.log(\"friends list\", result);\r\n        var friendsList = result[0].friends;\r\n        friendsList.forEach((item, index) => {\r\n          if (item.senderEmail == senderEmail) {\r\n            usersModel.findOneAndUpdate({\r\n              [`friends.${index}.senderEmail`]: item.senderEmail\r\n            }, {\r\n              $set: {\r\n                [`friends.${index}.status`]: 'Friend'\r\n              }\r\n            }, (errFriend, resultFriend) => {\r\n\r\n              if (errFriend) return res.json({\r\n                isError: true,\r\n                data: err\r\n              });\r\n              // res.json({\r\n              //   isError: false,\r\n              //   data: resultFriend\r\n              // });\r\n\r\n              var dataObj = {\r\n                senderEmail: decoded.email,\r\n                senderFirstName: decoded.first_name,\r\n                status: 'Friend'\r\n              }\r\n\r\n              usersModel.findOneAndUpdate({\r\n                'email': senderEmail\r\n              }, { $push: { friends: dataObj } }, {\r\n                upsert: true\r\n              }, (err, users) => {\r\n                if (err) return res.json({\r\n                  isError: true,\r\n                  data: err\r\n                });\r\n                res.json({\r\n                  isError: false,\r\n                  data: users\r\n                });\r\n              });\r\n\r\n\r\n            })\r\n          }\r\n        })\r\n\r\n\r\n      }\r\n    })\r\n\r\n  },\r\n\r\n  addUserProfilePic: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n\r\n    var imgURL = req.body.imgURL;\r\n\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, {\r\n      $set: {\r\n        imgURL: imgURL\r\n      }\r\n    }, (err, data) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      else {\r\n        res.json({\r\n          isError: false,\r\n          data: data\r\n        })\r\n      }\r\n    });\r\n  },\r\n  addMessage: (req, res, next) => {\r\n\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var sender = decoded.email;\r\n    console.log(\"in addmessage\");\r\n    var data = req.body;\r\n    data.sender = sender;\r\n    data.date = new Date();\r\n    console.log(\"Data for message==>\", data);\r\n    messagesModel.create(data, function(err, message) {\r\n      if (err) return res.json(err);\r\n      res.json({\r\n        isError: false,\r\n        data: message,\r\n      })\r\n    })\r\n  },\r\n\r\n  friendReq: (req, res, next) => {\r\n\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var to = req.body.To;\r\n    console.log(\"To  Details=>\", to);\r\n\r\n    var dataObj = {\r\n      senderEmail: decoded.email,\r\n      senderFirstName: decoded.first_name,\r\n      status: 'Pending'\r\n    }\r\n    console.log(\"Senders Details=>\", dataObj);\r\n    usersModel.find({ 'email': to }, (errParent, resultParent) => {\r\n      if (!errParent) {\r\n        var friendsList = resultParent[0].friends || [];\r\n        console.log(\"friendList==>\", friendsList);\r\n        var isFound = friendsList.find((item) => item.senderEmail == decoded.email);\r\n        if (isFound) {\r\n          res.json({\r\n            isError: false,\r\n            isFound: true\r\n          });\r\n        }\r\n        console.log(\"isfound==>\", isFound);\r\n        if (!isFound || friendsList.length === 0) {\r\n          console.log(\"not found\");\r\n          usersModel.findOneAndUpdate({\r\n            'email': to\r\n          }, { $push: { friends: dataObj } }, {\r\n            upsert: true\r\n          }, (err, users) => {\r\n            if (err) return res.json({\r\n              isError: true,\r\n              data: err\r\n            });\r\n            res.json({\r\n              isError: false,\r\n              data: users\r\n            });\r\n          });\r\n        }\r\n      }\r\n    })\r\n\r\n\r\n  },\r\n\r\n\r\n  getAll: async(req, res, next) => {\r\n    usersModel.find({}, (err, users) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: users\r\n      });\r\n    });\r\n\r\n  },\r\n  addUserInfo: async(req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    usersModel.findOneAndUpdate({\r\n\r\n      'email': decoded.email\r\n    }, req.body, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        success: false,\r\n        data: err\r\n      });\r\n      res.json({\r\n        success: true,\r\n        data: user\r\n      })\r\n    });\r\n\r\n  },\r\n  userProfile: (req, res, next) => {\r\n    // var _id = Number(req.query.id);\r\n\r\n    var _id = mongoose.Types.ObjectId(req.query.id);\r\n    console.log(\"id=>\", _id);\r\n    usersModel.findOne({\r\n      _id: _id\r\n    }, (err, user) => {\r\n\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n      } else {\r\n        var email = user.email;\r\n        console.log(\"Email==>\", email);\r\n        tokenModel.findOne({ 'email': email }, (err, tokenData) => {\r\n          res.json({\r\n            isError: false,\r\n            data: { user: user, tokenData: tokenData }\r\n          });\r\n        }).sort({ _id: -1 }).limit(1)\r\n\r\n      }\r\n    });\r\n  },\r\n\r\n\r\n  getOne: (req, res, next) => {\r\n    // console.log(\"------------\",next);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    usersModel.findOne({\r\n      'email': decoded.email\r\n    }, (err, user) => {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n      } else {\r\n        res.json({\r\n          isError: false,\r\n          data: user\r\n        });\r\n      }\r\n    });\r\n  },\r\n\r\n  create: (req, res, next) => {\r\n    usersModel.create(req.body, function(err, user) {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    // var id = mongoose.Types.ObjectId(req.body.id);\r\n    usersModel.findOneAndUpdate({\r\n      '_id': req.body.id\r\n    }, req.body, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    });\r\n  },\r\n\r\n  delete: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, {\r\n      isActive: 'inactive'\r\n    }, (err, ok) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      else {\r\n        res.json({\r\n          isError: true,\r\n          data: true\r\n        })\r\n      }\r\n    });\r\n  },\r\n  forgetPassword: (req, res, next) => {\r\n    var email = req.body.email;\r\n    var host = req.headers.host;\r\n\r\n    usersModel.find({\r\n      'email': req.body.email\r\n    }, function(err, result) {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        })\r\n      } else {\r\n        if (result != \"\") {\r\n          var d = new Date();\r\n          var v = new Date();\r\n          v.setMinutes(d.getMinutes() + 30);\r\n          const token = jwt.sign({\r\n            exp: Math.floor(v),\r\n            email: req.body.email,\r\n          }, env.App_key);\r\n          console.log(result);\r\n          nodemailer.createTestAccount((err, account) => {\r\n            // create reusable transporter object using the default SMTP transport\r\n            var transporter = nodemailer.createTransport({\r\n              service: 'gmail',\r\n              auth: {\r\n                user: 'itstechinvento@gmail.com',\r\n                pass: 'techinvento123'\r\n              }\r\n            });\r\n\r\n            // setup email data with unicode symbols\r\n            let mailOptions = {\r\n              from: 'itstechinvento@gmail.com', // sender address\r\n              to: email, // list of receivers\r\n              subject: 'Create New Password', // Subject line\r\n              text: 'As requested,here is a link to allow you to select a new password', // plain text body\r\n              html: '<a href=http://' + host + '/recover?accessToken=' + token + '>Click to recover password</a>' // html body\r\n\r\n              // html: '<a href=http://localhost:3000/recover?accessToken=' + token + '>Click to recover password</a>' // html body\r\n            };\r\n            console.log(\"Mailoptions\", mailOptions);\r\n\r\n            // send mail with defined transport object\r\n            transporter.sendMail(mailOptions, (error, info) => {\r\n              var information = JSON.stringify(info);\r\n\r\n              console.log('Transporter', err, information);\r\n              mail_responseModel.create({\r\n                'email': email,\r\n                'error': error,\r\n                'info': information\r\n              }, function(err, mail_response) {\r\n                if (err) {\r\n                  console.log(\"mail_responseModel error=>\", err);\r\n                } else {\r\n                  console.log(\"mail_responseModel No error\", mail_response);\r\n                }\r\n              })\r\n\r\n\r\n              if (error) {\r\n                return console.log(\"error--11--\", error);\r\n                res.json({\r\n                  isError: true,\r\n                  data: error\r\n                });\r\n              } else {\r\n                console.log('Message sent: %s', info.messageId);\r\n                console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\r\n                res.json({\r\n                  isError: false,\r\n                  data: 'Please check your Email'\r\n                });\r\n\r\n              }\r\n\r\n              // Preview only available when sending through an Ethereal account\r\n              // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>\r\n              // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...\r\n            });\r\n\r\n            // res.json({ isError: false, data: 'Please check your Email' });\r\n\r\n            //    res.json(mailOptions);\r\n          });\r\n        } else {\r\n          res.json({\r\n            isError: true,\r\n            data: 'please provide a valid mail'\r\n          });\r\n        }\r\n      }\r\n    })\r\n  },\r\n\r\n  storeBasicUserInfo: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var id = req.body.id;\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, {\r\n      'basicInfo': req.body\r\n    }, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    });\r\n  },\r\n\r\n\r\n  isVerified: (req, res, next) => {\r\n    var decoded = jwt.verify(req.query.token, env.App_key);\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      });\r\n    });\r\n\r\n  },\r\n\r\n  emailVerification: (req, res, next) => {\r\n    var host = req.headers.host;\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"Emailverification==>\", decoded.email);\r\n    usersModel.find({\r\n      'email': decoded.email\r\n    }, function(err, result) {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        })\r\n      } else {\r\n        if (result != \"\") {\r\n          var d = new Date();\r\n          var v = new Date();\r\n          v.setMinutes(d.getMinutes() + 30);\r\n          const token = jwt.sign({\r\n            exp: Math.floor(v),\r\n            email: decoded.email,\r\n          }, env.App_key);\r\n          console.log(result);\r\n          nodemailer.createTestAccount((err, account) => {\r\n            // create reusable transporter object using the default SMTP transport\r\n            var transporter = nodemailer.createTransport({\r\n              service: 'gmail',\r\n              auth: {\r\n                user: 'itstechinvento@gmail.com',\r\n                pass: 'techinvento123'\r\n              }\r\n            });\r\n            var htmlforemail = ``;\r\n            let mailOptions = {\r\n              from: 'itstechinvento@gmail.com', // sender address\r\n              to: decoded.email, // list of receivers\r\n              subject: 'Email Verification', // Subject line\r\n              text: 'Please Click below link to Verify Your Email address', // plain text body\r\n              html: 'Please<a id =\"varified\"href=http://' + host + '/ev/' + token + '>Click Here to processed email verification</a>',\r\n            };\r\n            transporter.sendMail(mailOptions, (error, info) => {\r\n              // mail_responseModel.create({\r\n              //   'email': decoded.email,\r\n              //   'error': error,\r\n              //   'info': info\r\n              // }, function(err, mail_response) {\r\n              //   if (err) {\r\n              //     console.log(\"mail_responseModel error=>\", err);\r\n              //   } else {\r\n              //     console.log(\"mail_responseModel \", mail_response);\r\n              //   }\r\n              // })\r\n              if (error) {\r\n                res.json({\r\n                  isError: true,\r\n                  data: error\r\n                });\r\n                return console.log(\"error--11--\", error);\r\n              } else {\r\n                console.log('Message sent: %s', info.messageId);\r\n                console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\r\n                res.json({\r\n                  isError: false,\r\n                  data: 'Please check your email'\r\n                });\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          res.json({\r\n            isError: true,\r\n            data: 'please provide a valid mail'\r\n          });\r\n        }\r\n      }\r\n    })\r\n  },\r\n\r\n  emailVerified: (req, res, next) => {\r\n    var decoded = jwt.verify(req.params.token, env.App_key);\r\n    var dt = new Date();\r\n    var checkDate = new Date(decoded.exp);\r\n    if (dt < checkDate) {\r\n      console.log(\"----------\");\r\n      usersModel.findOneAndUpdate({\r\n        \"email\": decoded.email\r\n      }, {\r\n        $set: {\r\n          \"verification.email_verified\": true\r\n        }\r\n      }, (err, user) => {\r\n        if (err) return res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n        res.redirect('/#/profile');\r\n        // res.send('verified')\r\n        //res.json({ isError: false, data: \"your E-Mail address is verified sucessfully\" });\r\n\r\n      });\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"session expire\"\r\n      });\r\n    }\r\n  },\r\n\r\n  varifyToken: (req, res, next) => {\r\n    console.log(\"in verify Token=>\");\r\n    var decoded = jwt.verify(req.params.token, env.App_key);\r\n    var dt = new Date();\r\n    var checkDate = new Date(decoded.exp);\r\n    if (dt < checkDate) {\r\n      console.log(\"----\");\r\n      var d = new Date();\r\n      var v = new Date();\r\n      v.setMinutes(d.getMinutes() + 60);\r\n      const token = jwt.sign({\r\n        exp: Math.floor(v),\r\n        email: decoded.email,\r\n      }, env.App_key);\r\n      res.redirect('/recover/' + token)\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"session expire\"\r\n      });\r\n    }\r\n  },\r\n  changePassword: (req, res, next) => {\r\n    // console.log(\"req.headers--->\", req.headers['authorization'], req.body);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    req.body.password = encode().value(req.body.password);\r\n    req.body.new_pasword = encode().value(req.body.new_pasword);\r\n    usersModel.findOneAndUpdate({\r\n      $and: [{\r\n        \"password\": req.body.password\r\n      }, {\r\n        \"email\": decoded.email\r\n      }]\r\n    }, {\r\n      $set: {\r\n        \"password\": req.body.new_pasword,\r\n      }\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      });\r\n      console.log(\"user=>\", user);\r\n    })\r\n  },\r\n  recoverPassword: (req, res, next) => {\r\n    console.log(\"req in recover password api=>\", req.body, req.query, req.params);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    if (req.body.password != \"\" && req.body.password.length > 6) {\r\n      req.body.password = encode().value(req.body.password);\r\n      var checkDate = new Date(decoded.exp);\r\n      var dt = new Date();\r\n      console.log(dt, \"------\", checkDate);\r\n      if (dt < checkDate) {\r\n        usersModel.findOneAndUpdate({\r\n          \"email\": decoded.email\r\n        }, {\r\n          $set: {\r\n            \"password\": req.body.password\r\n          }\r\n        }, (err, user) => {\r\n          if (err) return res.json(err);\r\n          res.json({\r\n            isError: false,\r\n            data: user\r\n          });\r\n        });\r\n      } else {\r\n        res.json({\r\n          isError: true,\r\n          data: \"session expire\"\r\n        });\r\n      }\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"Please provide valid password\"\r\n      });\r\n    }\r\n\r\n  },\r\n  changeEmail: (req, res, next) => {\r\n    if (req.body.new_email) {\r\n      req.body.password = encode().value(req.body.old_password);\r\n      usersModel.findOneAndUpdate({\r\n        $and: [{\r\n          \"password\": req.body.password\r\n        }, {\r\n          \"email\": req.body.email\r\n        }]\r\n      }, {\r\n        $set: {\r\n          \"email\": req.body.new_email,\r\n        }\r\n      }, (err, user) => {\r\n        if (err) return res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n        res.json({\r\n          isError: false,\r\n          data: user\r\n        });\r\n      })\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"NULL\"\r\n      });\r\n    }\r\n  },\r\n\r\n\r\n};\r\n\r\n\r\nexport default usersController;"]}
{"version":3,"sources":["../../src/controller/usersController.js"],"names":["nodemailer","require","mongoose","encode","hashCode","usersController","getAllMessages","req","res","next","decoded","verify","headers","App_key","console","log","email","find","err","messages","json","isError","data","getAllMessagesWithFriend","query","friend","$or","$and","sender","reciever","getFriendsList","users","acceptFriendRequest","senderEmail","body","result","friendsList","friends","forEach","item","index","findOneAndUpdate","$set","errFriend","resultFriend","dataObj","senderFirstName","first_name","status","$push","upsert","addMessage","date","Date","create","message","friendReq","to","To","errParent","resultParent","isFound","length","getAll","addUserInfo","new","user","success","userProfile","_id","Types","ObjectId","id","findOne","tokenData","sort","limit","getOne","update","delete","isActive","ok","forgetPassword","host","d","v","setMinutes","getMinutes","token","sign","exp","Math","floor","createTestAccount","account","transporter","createTransport","service","auth","pass","mailOptions","from","subject","text","html","sendMail","error","info","information","JSON","stringify","mail_response","messageId","getTestMessageUrl","storeBasicUserInfo","isVerified","emailVerification","params","emailVerified","dt","checkDate","send","varifyToken","redirect","changePassword","password","value","new_pasword","recoverPassword","changeEmail","new_email","old_password"],"mappings":"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","file":"usersController.js","sourcesContent":["import usersModel from '../models/usersModel'\r\nimport tokenModel from './../models/tokenModel';\r\nimport messagesModel from '../models/messagesModel'\r\n\r\nimport mail_responseModel from '../models/mail_responseModel'\r\nimport postatrade from '../models/postatrade'\r\nimport jwt from 'jsonwebtoken';\r\nimport env from \"../env\";\r\n\r\nconst nodemailer = require('nodemailer');\r\nvar mongoose = require('mongoose');\r\nvar encode = require('hashcode').hashCode;\r\nconst usersController = {\r\n  getAllMessages: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"getAllMessages reqest from==>\", decoded.email)\r\n    messagesModel.find({\r\n      'reciever': decoded.email,\r\n      'isRead': false,\r\n    }, (err, messages) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: messages\r\n      });\r\n    });\r\n\r\n  },\r\n\r\n\r\n  getAllMessagesWithFriend: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"getAllMessagesWithFriend reqest from==>\", decoded.email, req.query.friend)\r\n    var friend = req.query.friend;\r\n    messagesModel.find({\r\n      $or: [\r\n        { $and: [{ sender: decoded.email }, { reciever: friend }] },\r\n        { $and: [{ sender: friend }, { reciever: decoded.email }] }\r\n      ]\r\n\r\n    }, (err, messages) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: messages\r\n      });\r\n    });\r\n\r\n  },\r\n\r\n  getFriendsList: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"addUserInfo\", decoded.email)\r\n    usersModel.find({\r\n      'email': decoded.email\r\n    }, { \"friends\": 1, \"_id\": 0 }, (err, users) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: users\r\n      });\r\n    });\r\n  },\r\n\r\n\r\n  acceptFriendRequest: (req, res, next) => {\r\n\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var senderEmail = req.body.senderEmail;\r\n    console.log(\"senderEmail==>\", senderEmail);\r\n\r\n    var query = {\r\n      'email': decoded.email\r\n    }\r\n\r\n    usersModel.find(query, (err, result) => {\r\n      if (!err) {\r\n        console.log(\"friends list\", result);\r\n        var friendsList = result[0].friends;\r\n        friendsList.forEach((item, index) => {\r\n          if (item.senderEmail == senderEmail) {\r\n            usersModel.findOneAndUpdate({\r\n              [`friends.${index}.senderEmail`]: item.senderEmail\r\n            }, {\r\n              $set: {\r\n                [`friends.${index}.status`]: 'Friend'\r\n              }\r\n            }, (errFriend, resultFriend) => {\r\n\r\n              if (errFriend) return res.json({\r\n                isError: true,\r\n                data: err\r\n              });\r\n              // res.json({\r\n              //   isError: false,\r\n              //   data: resultFriend\r\n              // });\r\n\r\n              var dataObj = {\r\n                senderEmail: decoded.email,\r\n                senderFirstName: decoded.first_name,\r\n                status: 'Friend'\r\n              }\r\n\r\n              usersModel.findOneAndUpdate({\r\n                'email': senderEmail\r\n              }, { $push: { friends: dataObj } }, {\r\n                upsert: true\r\n              }, (err, users) => {\r\n                if (err) return res.json({\r\n                  isError: true,\r\n                  data: err\r\n                });\r\n                res.json({\r\n                  isError: false,\r\n                  data: users\r\n                });\r\n              });\r\n\r\n\r\n            })\r\n          }\r\n        })\r\n\r\n\r\n      }\r\n    })\r\n\r\n  },\r\n  addMessage: (req, res, next) => {\r\n\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var sender = decoded.email;\r\n    console.log(\"in addmessage\");\r\n    var data = req.body;\r\n    data.sender = sender;\r\n    data.date = new Date();\r\n    console.log(\"Data for message==>\", data);\r\n    messagesModel.create(data, function(err, message) {\r\n      if (err) return res.json(err);\r\n      res.json({\r\n        isError: false,\r\n        data: message,\r\n      })\r\n    })\r\n  },\r\n\r\n  friendReq: (req, res, next) => {\r\n\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var to = req.body.To;\r\n    console.log(\"To  Details=>\", to);\r\n\r\n    var dataObj = {\r\n      senderEmail: decoded.email,\r\n      senderFirstName: decoded.first_name,\r\n      status: 'Pending'\r\n    }\r\n    console.log(\"Senders Details=>\", dataObj);\r\n    usersModel.find({ 'email': to }, (errParent, resultParent) => {\r\n      if (!errParent) {\r\n        var friendsList = resultParent[0].friends || [];\r\n        console.log(\"friendList==>\", friendsList);\r\n        var isFound = friendsList.find((item) => item.senderEmail == decoded.email);\r\n        if (isFound) {\r\n          res.json({\r\n            isError: false,\r\n            isFound: true\r\n          });\r\n        }\r\n        console.log(\"isfound==>\", isFound);\r\n        if (!isFound || friendsList.length === 0) {\r\n          console.log(\"not found\");\r\n          usersModel.findOneAndUpdate({\r\n            'email': to\r\n          }, { $push: { friends: dataObj } }, {\r\n            upsert: true\r\n          }, (err, users) => {\r\n            if (err) return res.json({\r\n              isError: true,\r\n              data: err\r\n            });\r\n            res.json({\r\n              isError: false,\r\n              data: users\r\n            });\r\n          });\r\n        }\r\n      }\r\n    })\r\n\r\n\r\n  },\r\n\r\n\r\n  getAll: async(req, res, next) => {\r\n    usersModel.find({}, (err, users) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: users\r\n      });\r\n    });\r\n\r\n  },\r\n  addUserInfo: async(req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    usersModel.findOneAndUpdate({\r\n\r\n      'email': decoded.email\r\n    }, req.body, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        success: false,\r\n        data: err\r\n      });\r\n      res.json({\r\n        success: true,\r\n        data: user\r\n      })\r\n    });\r\n\r\n  },\r\n  userProfile: (req, res, next) => {\r\n    // var _id = Number(req.query.id);\r\n\r\n    var _id = mongoose.Types.ObjectId(req.query.id);\r\n    console.log(\"id=>\", _id);\r\n    usersModel.findOne({\r\n      _id: _id\r\n    }, (err, user) => {\r\n\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n      } else {\r\n        var email = user.email;\r\n        console.log(\"Email==>\", email);\r\n        tokenModel.findOne({ 'email': email }, (err, tokenData) => {\r\n          res.json({\r\n            isError: false,\r\n            data: { user: user, tokenData: tokenData }\r\n          });\r\n        }).sort({ _id: -1 }).limit(1)\r\n\r\n      }\r\n    });\r\n  },\r\n\r\n\r\n  getOne: (req, res, next) => {\r\n    // console.log(\"------------\",next);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    usersModel.findOne({\r\n      'email': decoded.email\r\n    }, (err, user) => {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n      } else {\r\n        res.json({\r\n          isError: false,\r\n          data: user\r\n        });\r\n      }\r\n    });\r\n  },\r\n\r\n  create: (req, res, next) => {\r\n    usersModel.create(req.body, function(err, user) {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    // var id = mongoose.Types.ObjectId(req.body.id);\r\n    usersModel.findOneAndUpdate({\r\n      '_id': req.body.id\r\n    }, req.body, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    });\r\n  },\r\n\r\n  delete: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, {\r\n      isActive: 'inactive'\r\n    }, (err, ok) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      else {\r\n        res.json({\r\n          isError: true,\r\n          data: true\r\n        })\r\n      }\r\n    });\r\n  },\r\n  forgetPassword: (req, res, next) => {\r\n    var email = req.body.email;\r\n    var host = req.headers.host;\r\n    console.log(\"req.domain=>\", req.headers.host);\r\n    console.log(\"email\", email);\r\n    usersModel.find({\r\n      'email': req.body.email\r\n    }, function(err, result) {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        })\r\n      } else {\r\n        if (result != \"\") {\r\n          var d = new Date();\r\n          var v = new Date();\r\n          v.setMinutes(d.getMinutes() + 30);\r\n          const token = jwt.sign({\r\n            exp: Math.floor(v),\r\n            email: req.body.email,\r\n          }, env.App_key);\r\n          console.log(result);\r\n          nodemailer.createTestAccount((err, account) => {\r\n            // create reusable transporter object using the default SMTP transport\r\n            var transporter = nodemailer.createTransport({\r\n              service: 'gmail',\r\n              auth: {\r\n                user: 'itstechinvento@gmail.com',\r\n                pass: 'techinvento123'\r\n              }\r\n            });\r\n\r\n            // setup email data with unicode symbols\r\n            let mailOptions = {\r\n              from: 'itstechinvento@gmail.com', // sender address\r\n              to: email, // list of receivers\r\n              subject: 'Change Password', // Subject line\r\n              text: 'Please Click below link to change password', // plain text body\r\n              html: '<a href=http://' + host + '/recover?accessToken=' + token + '>Click to recover password</a>' // html body\r\n\r\n              // html: '<a href=http://localhost:3000/recover?accessToken=' + token + '>Click to recover password</a>' // html body\r\n            };\r\n            console.log(\"Mailoptions\", mailOptions);\r\n\r\n            // send mail with defined transport object\r\n            transporter.sendMail(mailOptions, (error, info) => {\r\n              var information = JSON.stringify(info);\r\n\r\n              console.log('Transporter', err, information);\r\n              mail_responseModel.create({\r\n                'email': email,\r\n                'error': error,\r\n                'info': information\r\n              }, function(err, mail_response) {\r\n                if (err) {\r\n                  console.log(\"mail_responseModel error=>\", err);\r\n                } else {\r\n                  console.log(\"mail_responseModel No error\", mail_response);\r\n                }\r\n              })\r\n\r\n\r\n              if (error) {\r\n                return console.log(\"error--11--\", error);\r\n                res.json({\r\n                  isError: true,\r\n                  data: error\r\n                });\r\n              } else {\r\n                console.log('Message sent: %s', info.messageId);\r\n                console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\r\n                res.json({\r\n                  isError: false,\r\n                  data: 'Please check your Email'\r\n                });\r\n\r\n              }\r\n\r\n              // Preview only available when sending through an Ethereal account\r\n              // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>\r\n              // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...\r\n            });\r\n\r\n            // res.json({ isError: false, data: 'Please check your Email' });\r\n\r\n            //    res.json(mailOptions);\r\n          });\r\n        } else {\r\n          res.json({\r\n            isError: true,\r\n            data: 'please provide a valid mail'\r\n          });\r\n        }\r\n      }\r\n    })\r\n  },\r\n\r\n  storeBasicUserInfo: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var id = req.body.id;\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, {\r\n      'basicInfo': req.body\r\n    }, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    });\r\n  },\r\n\r\n\r\n  isVerified: (req, res, next) => {\r\n    var decoded = jwt.verify(req.query.token, env.App_key);\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      });\r\n    });\r\n\r\n  },\r\n\r\n  emailVerification: (req, res, next) => {\r\n    console.log(\"Email Verification=>\", req.body, req.params, req.query);\r\n    var email = req.body.email;\r\n    var host = req.headers.host;\r\n\r\n    usersModel.find({\r\n      'email': req.body.email\r\n    }, function(err, result) {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        })\r\n      } else {\r\n        if (result != \"\") {\r\n          var d = new Date();\r\n          var v = new Date();\r\n          v.setMinutes(d.getMinutes() + 30);\r\n          const token = jwt.sign({\r\n            exp: Math.floor(v),\r\n            email: req.body.email,\r\n          }, env.App_key);\r\n          console.log(result);\r\n          nodemailer.createTestAccount((err, account) => {\r\n            // create reusable transporter object using the default SMTP transport\r\n            var transporter = nodemailer.createTransport({\r\n              service: 'gmail',\r\n              auth: {\r\n                user: 'itstechinvento@gmail.com',\r\n                pass: 'techinvento123'\r\n              }\r\n            });\r\n            let mailOptions = {\r\n              from: 'itstechinvento@gmail.com', // sender address\r\n              to: email, // list of receivers\r\n              subject: 'Email Verification', // Subject line\r\n              text: 'Please Click below link to Verify Your Email address', // plain text body\r\n              html: 'Please<a href=http://' + host + '/ev/' + token + '>Click Here to processed email verification</a>' // html body\r\n            };\r\n            transporter.sendMail(mailOptions, (error, info) => {\r\n\r\n              mail_responseModel.create({\r\n                'email': email,\r\n                'error': error,\r\n                'info': info\r\n              }, function(err, mail_response) {\r\n                if (err) {\r\n                  console.log(\"mail_responseModel error=>\", err);\r\n                } else {\r\n                  console.log(\"mail_responseModel \", mail_response);\r\n                }\r\n              })\r\n              if (error) {\r\n                res.json({\r\n                  isError: true,\r\n                  data: error\r\n                });\r\n                return console.log(\"error--11--\", error);\r\n              } else {\r\n                console.log('Message sent: %s', info.messageId);\r\n                console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\r\n                res.json({\r\n                  isError: false,\r\n                  data: 'Please check your email'\r\n                });\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          res.json({\r\n            isError: true,\r\n            data: 'please provide a valid mail'\r\n          });\r\n        }\r\n      }\r\n    })\r\n  },\r\n\r\n  emailVerified: (req, res, next) => {\r\n    var decoded = jwt.verify(req.params.token, env.App_key);\r\n    var dt = new Date();\r\n    var checkDate = new Date(decoded.exp);\r\n    if (dt < checkDate) {\r\n      console.log(\"----------\");\r\n      usersModel.findOneAndUpdate({\r\n        \"email\": decoded.email\r\n      }, {\r\n        $set: {\r\n          \"verification.email_verified\": true\r\n        }\r\n      }, (err, user) => {\r\n        if (err) return res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n        //  res.redirect('/#/profile');\r\n        res.send('verified')\r\n          //res.json({ isError: false, data: \"your E-Mail address is verified sucessfully\" });\r\n\r\n      });\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"session expire\"\r\n      });\r\n    }\r\n  },\r\n\r\n  varifyToken: (req, res, next) => {\r\n    console.log(\"in verify Token=>\");\r\n    var decoded = jwt.verify(req.params.token, env.App_key);\r\n    var dt = new Date();\r\n    var checkDate = new Date(decoded.exp);\r\n    if (dt < checkDate) {\r\n      console.log(\"----\");\r\n      var d = new Date();\r\n      var v = new Date();\r\n      v.setMinutes(d.getMinutes() + 60);\r\n      const token = jwt.sign({\r\n        exp: Math.floor(v),\r\n        email: decoded.email,\r\n      }, env.App_key);\r\n      res.redirect('/recover/' + token)\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"session expire\"\r\n      });\r\n    }\r\n  },\r\n  changePassword: (req, res, next) => {\r\n    // console.log(\"req.headers--->\", req.headers['authorization'], req.body);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    req.body.password = encode().value(req.body.password);\r\n    req.body.new_pasword = encode().value(req.body.new_pasword);\r\n    usersModel.findOneAndUpdate({\r\n      $and: [{\r\n        \"password\": req.body.password\r\n      }, {\r\n        \"email\": decoded.email\r\n      }]\r\n    }, {\r\n      $set: {\r\n        \"password\": req.body.new_pasword,\r\n      }\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      });\r\n      console.log(\"user=>\", user);\r\n    })\r\n  },\r\n  recoverPassword: (req, res, next) => {\r\n    console.log(\"req in recover password api=>\", req.body, req.query, req.params);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    if (req.body.password != \"\" && req.body.password.length > 6) {\r\n      req.body.password = encode().value(req.body.password);\r\n      var checkDate = new Date(decoded.exp);\r\n      var dt = new Date();\r\n      console.log(dt, \"------\", checkDate);\r\n      if (dt < checkDate) {\r\n        usersModel.findOneAndUpdate({\r\n          \"email\": decoded.email\r\n        }, {\r\n          $set: {\r\n            \"password\": req.body.password\r\n          }\r\n        }, (err, user) => {\r\n          if (err) return res.json(err);\r\n          res.json({\r\n            isError: false,\r\n            data: user\r\n          });\r\n        });\r\n      } else {\r\n        res.json({\r\n          isError: true,\r\n          data: \"session expire\"\r\n        });\r\n      }\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"Please provide valid password\"\r\n      });\r\n    }\r\n\r\n  },\r\n  changeEmail: (req, res, next) => {\r\n    if (req.body.new_email) {\r\n      req.body.password = encode().value(req.body.old_password);\r\n      usersModel.findOneAndUpdate({\r\n        $and: [{\r\n          \"password\": req.body.password\r\n        }, {\r\n          \"email\": req.body.email\r\n        }]\r\n      }, {\r\n        $set: {\r\n          \"email\": req.body.new_email,\r\n        }\r\n      }, (err, user) => {\r\n        if (err) return res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n        res.json({\r\n          isError: false,\r\n          data: user\r\n        });\r\n      })\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"NULL\"\r\n      });\r\n    }\r\n  },\r\n\r\n\r\n};\r\n\r\n\r\nexport default usersController;"]}
{"version":3,"sources":["../../src/controller/usersController.js"],"names":["nodemailer","require","mongoose","encode","hashCode","usersController","getAll","req","res","next","console","log","body","params","query","find","err","users","json","isError","data","getOne","decoded","verify","headers","App_key","findOne","email","user","create","update","findOneAndUpdate","id","new","delete","isActive","ok","forgetPassword","host","result","d","Date","v","setMinutes","getMinutes","token","sign","exp","Math","floor","createTestAccount","account","transporter","createTransport","service","auth","pass","mailOptions","from","to","subject","text","html","sendMail","error","info","information","JSON","stringify","mail_response","messageId","getTestMessageUrl","storeBasicUserInfo","isVerified","emailVerification","emailVerified","dt","checkDate","$set","varifyToken","redirect","changePassword","password","value","new_pasword","$and","recoverPassword","length","changeEmail","new_email","old_password"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AACA,IAAMA,aAAaC,QAAQ,YAAR,CAAnB;AACA,IAAIC,WAAWD,QAAQ,UAAR,CAAf;AACA,IAAIE,SAASF,QAAQ,UAAR,EAAoBG,QAAjC;AACA,IAAMC,kBAAkB;;AAEtBC;AAAA,uEAAQ,iBAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AACNC,sBAAQC,GAAR,CAAY,uBAAZ,EAAqCJ,IAAIK,IAAzC,EAA+CL,IAAIM,MAAnD,EAA2DN,IAAIO,KAA/D;AACA,mCAAWC,IAAX,CAAgB,EAAhB,EAAoB,UAACC,GAAD,EAAMC,KAAN,EAAgB;AAClC,oBAAID,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMJ,GAAvB,EAAT,CAAP;AACTR,oBAAIU,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,MAAMH,KAAxB,EAAT;AACD,eAHD;;AAFM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,KAFsB;;AAWtBI,UAAQ,gBAACd,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B;AACA,QAAIa,UAAU,uBAAIC,MAAJ,CAAWhB,IAAIiB,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,yBAAWC,OAAX,CAAmB,EAAE,SAASJ,QAAQK,KAAnB,EAAnB,EAA+C,UAACX,GAAD,EAAMY,IAAN,EAAe;AAC5D,UAAIZ,GAAJ,EAAS;AACPR,YAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMJ,GAAvB,EAAT;AACD,OAFD,MAEO;AAAER,YAAIU,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,MAAMQ,IAAxB,EAAT;AAA2C;AACrD,KAJD;AAKD,GAnBqB;;AAqBtBC,UAAQ,gBAACtB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B,yBAAWoB,MAAX,CAAkBtB,IAAIK,IAAtB,EAA4B,UAASI,GAAT,EAAcY,IAAd,EAAoB;AAC9C,UAAIZ,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMJ,GAAvB,EAAT,CAAP;AACTR,UAAIU,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,MAAMQ,IAAxB,EAAT;AACD,KAHD;AAID,GA1BqB;;AA4BtBE,UAAQ,gBAACvB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B;AACA,yBAAWsB,gBAAX,CAA4B;AAC1B,aAAOxB,IAAIK,IAAJ,CAASoB;AADU,KAA5B,EAEGzB,IAAIK,IAFP,EAEa;AACXqB,WAAK;AADM,KAFb,EAIG,UAACjB,GAAD,EAAMY,IAAN,EAAe;AAChB,UAAIZ,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMJ,GAAvB,EAAT,CAAP;AACTR,UAAIU,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,MAAMQ,IAAxB,EAAT;AACD,KAPD;AAQD,GAtCqB;;AAwCtBM,UAAQ,iBAAC3B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B,QAAIa,UAAU,uBAAIC,MAAJ,CAAWhB,IAAIiB,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,yBAAWM,gBAAX,CAA4B;AAC1B,eAAST,QAAQK;AADS,KAA5B,EAEG,EAAEQ,UAAU,UAAZ,EAFH,EAE6B,UAACnB,GAAD,EAAMoB,EAAN,EAAa;AACxC,UAAIpB,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMJ,GAAvB,EAAT,CAAP,CAAT,KACK;AACHR,YAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAM,IAAvB,EAAT;AACD;AACF,KAPD;AAQD,GAlDqB;AAmDtBiB,kBAAgB,wBAAC9B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClC,QAAIkB,QAAQpB,IAAIK,IAAJ,CAASe,KAArB;AACA,QAAIW,OAAO/B,IAAIiB,OAAJ,CAAYc,IAAvB;AACA5B,YAAQC,GAAR,CAAY,cAAZ,EAA4BJ,IAAIiB,OAAJ,CAAYc,IAAxC;AACA5B,YAAQC,GAAR,CAAY,OAAZ,EAAqBgB,KAArB;AACA,yBAAWZ,IAAX,CAAgB;AACd,eAASR,IAAIK,IAAJ,CAASe;AADJ,KAAhB,EAEG,UAASX,GAAT,EAAcuB,MAAd,EAAsB;AACvB,UAAIvB,GAAJ,EAAS;AACPR,YAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMJ,GAAvB,EAAT;AACD,OAFD,MAEO;AACL,YAAIuB,UAAU,EAAd,EAAkB;AAChB,cAAIC,IAAI,IAAIC,IAAJ,EAAR;AACA,cAAIC,IAAI,IAAID,IAAJ,EAAR;AACAC,YAAEC,UAAF,CAAaH,EAAEI,UAAF,KAAiB,EAA9B;AACA,cAAMC,QAAQ,uBAAIC,IAAJ,CAAS;AACrBC,iBAAKC,KAAKC,KAAL,CAAWP,CAAX,CADgB;AAErBf,mBAAOpB,IAAIK,IAAJ,CAASe;AAFK,WAAT,EAGX,cAAIF,OAHO,CAAd;AAIAf,kBAAQC,GAAR,CAAY4B,MAAZ;AACAvC,qBAAWkD,iBAAX,CAA6B,UAAClC,GAAD,EAAMmC,OAAN,EAAkB;AAC7C;AACA,gBAAIC,cAAcpD,WAAWqD,eAAX,CAA2B;AAC3CC,uBAAS,OADkC;AAE3CC,oBAAM;AACJ3B,sBAAM,yBADF;AAEJ4B,sBAAM;AAFF;AAFqC,aAA3B,CAAlB;;AAQA;AACA,gBAAIC,cAAc;AAChBC,oBAAM,yBADU,EACiB;AACjCC,kBAAIhC,KAFY,EAEL;AACXiC,uBAAS,iBAHO,EAGY;AAC5BC,oBAAM,4CAJU,EAIoC;AACpDC,oBAAM,oBAAoBxB,IAApB,GAA2B,uBAA3B,GAAqDO,KAArD,GAA6D,gCALnD,CAKoF;;AAEpG;AAPgB,aAAlB;;AAUA;AACAO,wBAAYW,QAAZ,CAAqBN,WAArB,EAAkC,UAACO,KAAD,EAAQC,IAAR,EAAiB;AACjD,kBAAIC,cAAcC,KAAKC,SAAL,CAAeH,IAAf,CAAlB;;AAEAvD,sBAAQC,GAAR,CAAY,aAAZ,EAA2BK,GAA3B,EAAgCkD,WAAhC;AACA,2CAAmBrC,MAAnB,CAA0B,EAAE,SAASF,KAAX,EAAkB,SAASqC,KAA3B,EAAkC,QAAQE,WAA1C,EAA1B,EAAmF,UAASlD,GAAT,EAAcqD,aAAd,EAA6B;AAC9G,oBAAIrD,GAAJ,EAAS;AACPN,0BAAQC,GAAR,CAAY,4BAAZ,EAA0CK,GAA1C;AACD,iBAFD,MAEO;AACLN,0BAAQC,GAAR,CAAY,6BAAZ,EAA2C0D,aAA3C;AACD;AACF,eAND;;AASA,kBAAIL,KAAJ,EAAW;AACT,uBAAOtD,QAAQC,GAAR,CAAY,aAAZ,EAA2BqD,KAA3B,CAAP;AACAxD,oBAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAM4C,KAAvB,EAAT;AACD,eAHD,MAGO;AACLtD,wBAAQC,GAAR,CAAY,kBAAZ,EAAgCsD,KAAKK,SAArC;AACA5D,wBAAQC,GAAR,CAAY,iBAAZ,EAA+BX,WAAWuE,iBAAX,CAA6BN,IAA7B,CAA/B;AACAzD,oBAAIU,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,MAAM,yBAAxB,EAAT;AACD;AACD;AACA;AACA;AACD,aAxBD;AAyBA;AACD,WAhDD;AAiDD,SA1DD,MA0DO;AACLZ,cAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAM,6BAAvB,EAAT;AACD;AACF;AACF,KApED;AAqED,GA7HqB;;AA+HtBoD,sBAAoB,4BAACjE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACtC,QAAIa,UAAU,uBAAIC,MAAJ,CAAWhB,IAAIiB,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,QAAIO,KAAKzB,IAAIK,IAAJ,CAASoB,EAAlB;AACA,yBAAWD,gBAAX,CAA4B;AAC1B,eAAST,QAAQK;AADS,KAA5B,EAEG;AACD,mBAAapB,IAAIK;AADhB,KAFH,EAIG;AACDqB,WAAK;AADJ,KAJH,EAMG,UAACjB,GAAD,EAAMY,IAAN,EAAe;AAChB,UAAIZ,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMJ,GAAvB,EAAT,CAAP;AACTR,UAAIU,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,MAAMQ,IAAxB,EAAT;AACD,KATD;AAUD,GA5IqB;;AA+ItB6C,cAAY,oBAAClE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC9B,QAAIa,UAAU,uBAAIC,MAAJ,CAAWhB,IAAIO,KAAJ,CAAU+B,KAArB,EAA4B,cAAIpB,OAAhC,CAAd;AACA,yBAAWV,IAAX,CAAgB,EAAE,SAASO,QAAQK,KAAnB,EAAhB,EAA4C,UAACX,GAAD,EAAMY,IAAN,EAAe;AACzD,UAAIZ,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMJ,GAAvB,EAAT,CAAP;AACTR,UAAIU,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,MAAMQ,IAAxB,EAAT;AACD,KAHD;AAKD,GAtJqB;;AAwJtB8C,qBAAmB,2BAACnE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrCC,YAAQC,GAAR,CAAY,sBAAZ,EAAoCJ,IAAIK,IAAxC,EAA8CL,IAAIM,MAAlD,EAA0DN,IAAIO,KAA9D;AACA,QAAIa,QAAQpB,IAAIK,IAAJ,CAASe,KAArB;AACA,QAAIW,OAAO/B,IAAIiB,OAAJ,CAAYc,IAAvB;;AAEA,yBAAWvB,IAAX,CAAgB;AACd,eAASR,IAAIK,IAAJ,CAASe;AADJ,KAAhB,EAEG,UAASX,GAAT,EAAcuB,MAAd,EAAsB;AACvB,UAAIvB,GAAJ,EAAS;AACPR,YAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMJ,GAAvB,EAAT;AACD,OAFD,MAEO;AACL,YAAIuB,UAAU,EAAd,EAAkB;AAChB,cAAIC,IAAI,IAAIC,IAAJ,EAAR;AACA,cAAIC,IAAI,IAAID,IAAJ,EAAR;AACAC,YAAEC,UAAF,CAAaH,EAAEI,UAAF,KAAiB,EAA9B;AACA,cAAMC,QAAQ,uBAAIC,IAAJ,CAAS;AACrBC,iBAAKC,KAAKC,KAAL,CAAWP,CAAX,CADgB;AAErBf,mBAAOpB,IAAIK,IAAJ,CAASe;AAFK,WAAT,EAGX,cAAIF,OAHO,CAAd;AAIAf,kBAAQC,GAAR,CAAY4B,MAAZ;AACAvC,qBAAWkD,iBAAX,CAA6B,UAAClC,GAAD,EAAMmC,OAAN,EAAkB;AAC7C;AACA,gBAAIC,cAAcpD,WAAWqD,eAAX,CAA2B;AAC3CC,uBAAS,OADkC;AAE3CC,oBAAM;AACJ3B,sBAAM,yBADF;AAEJ4B,sBAAM;AAFF;AAFqC,aAA3B,CAAlB;AAOA,gBAAIC,cAAc;AAChBC,oBAAM,yBADU,EACiB;AACjCC,kBAAIhC,KAFY,EAEL;AACXiC,uBAAS,oBAHO,EAGe;AAC/BC,oBAAM,sDAJU,EAI8C;AAC9DC,oBAAM,0BAA0BxB,IAA1B,GAAiC,MAAjC,GAA0CO,KAA1C,GAAkD,iDALxC,CAK0F;AAL1F,aAAlB;AAOAO,wBAAYW,QAAZ,CAAqBN,WAArB,EAAkC,UAACO,KAAD,EAAQC,IAAR,EAAiB;;AAEjD,2CAAmBpC,MAAnB,CAA0B,EAAE,SAASF,KAAX,EAAkB,SAASqC,KAA3B,EAAkC,QAAQC,IAA1C,EAA1B,EAA4E,UAASjD,GAAT,EAAcqD,aAAd,EAA6B;AACvG,oBAAIrD,GAAJ,EAAS;AACPN,0BAAQC,GAAR,CAAY,4BAAZ,EAA0CK,GAA1C;AACD,iBAFD,MAEO;AACLN,0BAAQC,GAAR,CAAY,qBAAZ,EAAmC0D,aAAnC;AACD;AACF,eAND;AAOA,kBAAIL,KAAJ,EAAW;AACTxD,oBAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAM4C,KAAvB,EAAT;AACA,uBAAOtD,QAAQC,GAAR,CAAY,aAAZ,EAA2BqD,KAA3B,CAAP;AACD,eAHD,MAGO;AACLtD,wBAAQC,GAAR,CAAY,kBAAZ,EAAgCsD,KAAKK,SAArC;AACA5D,wBAAQC,GAAR,CAAY,iBAAZ,EAA+BX,WAAWuE,iBAAX,CAA6BN,IAA7B,CAA/B;AACAzD,oBAAIU,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,MAAM,yBAAxB,EAAT;AACD;AACF,aAjBD;AAkBD,WAlCD;AAmCD,SA5CD,MA4CO;AACLZ,cAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAM,6BAAvB,EAAT;AACD;AACF;AACF,KAtDD;AAuDD,GApNqB;;AAsNtBuD,iBAAe,uBAACpE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjC,QAAIa,UAAU,uBAAIC,MAAJ,CAAWhB,IAAIM,MAAJ,CAAWgC,KAAtB,EAA6B,cAAIpB,OAAjC,CAAd;AACA,QAAImD,KAAK,IAAInC,IAAJ,EAAT;AACA,QAAIoC,YAAY,IAAIpC,IAAJ,CAASnB,QAAQyB,GAAjB,CAAhB;AACA,QAAI6B,KAAKC,SAAT,EAAoB;AAClBnE,cAAQC,GAAR,CAAY,YAAZ;AACA,2BAAWoB,gBAAX,CAA4B;AAC1B,iBAAST,QAAQK;AADS,OAA5B,EAEG;AACDmD,cAAM;AACJ,yCAA+B;AAD3B;AADL,OAFH,EAMG,UAAC9D,GAAD,EAAMY,IAAN,EAAe;AAChB,YAAIZ,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMJ,GAAvB,EAAT,CAAP;AACT;AACAR,YAAIU,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,MAAM,6CAAxB,EAAT;AAED,OAXD;AAYD,KAdD,MAcO;AACLZ,UAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAM,gBAAvB,EAAT;AACD;AACF,GA3OqB;;AA6OtB2D,eAAa,qBAACxE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/BC,YAAQC,GAAR,CAAY,mBAAZ;AACA,QAAIW,UAAU,uBAAIC,MAAJ,CAAWhB,IAAIM,MAAJ,CAAWgC,KAAtB,EAA6B,cAAIpB,OAAjC,CAAd;AACA,QAAImD,KAAK,IAAInC,IAAJ,EAAT;AACA,QAAIoC,YAAY,IAAIpC,IAAJ,CAASnB,QAAQyB,GAAjB,CAAhB;AACA,QAAI6B,KAAKC,SAAT,EAAoB;AAClBnE,cAAQC,GAAR,CAAY,MAAZ;AACA,UAAI6B,IAAI,IAAIC,IAAJ,EAAR;AACA,UAAIC,IAAI,IAAID,IAAJ,EAAR;AACAC,QAAEC,UAAF,CAAaH,EAAEI,UAAF,KAAiB,EAA9B;AACA,UAAMC,QAAQ,uBAAIC,IAAJ,CAAS;AACrBC,aAAKC,KAAKC,KAAL,CAAWP,CAAX,CADgB;AAErBf,eAAOL,QAAQK;AAFM,OAAT,EAGX,cAAIF,OAHO,CAAd;AAIAjB,UAAIwE,QAAJ,CAAa,cAAcnC,KAA3B;AACD,KAVD,MAUO;AACLrC,UAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAM,gBAAvB,EAAT;AACD;AACF,GA/PqB;AAgQtB6D,kBAAgB,wBAAC1E,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClC;AACA,QAAIa,UAAU,uBAAIC,MAAJ,CAAWhB,IAAIiB,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACAlB,QAAIK,IAAJ,CAASsE,QAAT,GAAoB/E,SAASgF,KAAT,CAAe5E,IAAIK,IAAJ,CAASsE,QAAxB,CAApB;AACA3E,QAAIK,IAAJ,CAASwE,WAAT,GAAuBjF,SAASgF,KAAT,CAAe5E,IAAIK,IAAJ,CAASwE,WAAxB,CAAvB;AACA,yBAAWrD,gBAAX,CAA4B;AAC1BsD,YAAM,CAAC;AACL,oBAAY9E,IAAIK,IAAJ,CAASsE;AADhB,OAAD,EAEH;AACD,iBAAS5D,QAAQK;AADhB,OAFG;AADoB,KAA5B,EAMG;AACDmD,YAAM;AACJ,oBAAYvE,IAAIK,IAAJ,CAASwE;AADjB;AADL,KANH,EAUG,UAACpE,GAAD,EAAMY,IAAN,EAAe;AAChB,UAAIZ,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMJ,GAAvB,EAAT,CAAP;AACTR,UAAIU,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,MAAMQ,IAAxB,EAAT;AACAlB,cAAQC,GAAR,CAAY,QAAZ,EAAsBiB,IAAtB;AACD,KAdD;AAeD,GApRqB;AAqRtB0D,mBAAiB,yBAAC/E,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnCC,YAAQC,GAAR,CAAY,+BAAZ,EAA6CJ,IAAIK,IAAjD,EAAuDL,IAAIO,KAA3D,EAAkEP,IAAIM,MAAtE;AACA,QAAIS,UAAU,uBAAIC,MAAJ,CAAWhB,IAAIiB,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,QAAIlB,IAAIK,IAAJ,CAASsE,QAAT,IAAqB,EAArB,IAA2B3E,IAAIK,IAAJ,CAASsE,QAAT,CAAkBK,MAAlB,GAA2B,CAA1D,EAA6D;AAC3DhF,UAAIK,IAAJ,CAASsE,QAAT,GAAoB/E,SAASgF,KAAT,CAAe5E,IAAIK,IAAJ,CAASsE,QAAxB,CAApB;AACA,UAAIL,YAAY,IAAIpC,IAAJ,CAASnB,QAAQyB,GAAjB,CAAhB;AACA,UAAI6B,KAAK,IAAInC,IAAJ,EAAT;AACA/B,cAAQC,GAAR,CAAYiE,EAAZ,EAAgB,QAAhB,EAA0BC,SAA1B;AACA,UAAID,KAAKC,SAAT,EAAoB;AAClB,6BAAW9C,gBAAX,CAA4B;AAC1B,mBAAST,QAAQK;AADS,SAA5B,EAEG;AACDmD,gBAAM;AACJ,wBAAYvE,IAAIK,IAAJ,CAASsE;AADjB;AADL,SAFH,EAMG,UAAClE,GAAD,EAAMY,IAAN,EAAe;AAChB,cAAIZ,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAASF,GAAT,CAAP;AACTR,cAAIU,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,MAAMQ,IAAxB,EAAT;AACD,SATD;AAUD,OAXD,MAWO;AACLpB,YAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAM,gBAAvB,EAAT;AACD;AACF,KAnBD,MAmBO;AACLZ,UAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAM,+BAAvB,EAAT;AACD;AAEF,GA/SqB;AAgTtBoE,eAAa,qBAACjF,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/B,QAAIF,IAAIK,IAAJ,CAAS6E,SAAb,EAAwB;AACtBlF,UAAIK,IAAJ,CAASsE,QAAT,GAAoB/E,SAASgF,KAAT,CAAe5E,IAAIK,IAAJ,CAAS8E,YAAxB,CAApB;AACA,2BAAW3D,gBAAX,CAA4B;AAC1BsD,cAAM,CAAC;AACL,sBAAY9E,IAAIK,IAAJ,CAASsE;AADhB,SAAD,EAEH;AACD,mBAAS3E,IAAIK,IAAJ,CAASe;AADjB,SAFG;AADoB,OAA5B,EAMG;AACDmD,cAAM;AACJ,mBAASvE,IAAIK,IAAJ,CAAS6E;AADd;AADL,OANH,EAUG,UAACzE,GAAD,EAAMY,IAAN,EAAe;AAChB,YAAIZ,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMJ,GAAvB,EAAT,CAAP;AACTR,YAAIU,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,MAAMQ,IAAxB,EAAT;AACD,OAbD;AAcD,KAhBD,MAgBO;AACLpB,UAAIU,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAM,MAAvB,EAAT;AACD;AACF;;AApUqB,CAAxB;;kBA0Uef,e","file":"usersController.js","sourcesContent":["import usersModel from '../models/usersModel'\r\nimport mail_responseModel from '../models/mail_responseModel'\r\nimport postatrade from '../models/postatrade'\r\nimport jwt from 'jsonwebtoken';\r\nimport env from \"../env\";\r\nconst nodemailer = require('nodemailer');\r\nvar mongoose = require('mongoose');\r\nvar encode = require('hashcode').hashCode;\r\nconst usersController = {\r\n\r\n  getAll: async(req, res, next) => {\r\n    console.log(\"get all web service=>\", req.body, req.params, req.query)\r\n    usersModel.find({}, (err, users) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({ isError: false, data: users });\r\n    });\r\n\r\n  },\r\n\r\n  getOne: (req, res, next) => {\r\n    // console.log(\"------------\",next);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    usersModel.findOne({ 'email': decoded.email }, (err, user) => {\r\n      if (err) {\r\n        res.json({ isError: true, data: err });\r\n      } else { res.json({ isError: false, data: user }); }\r\n    });\r\n  },\r\n\r\n  create: (req, res, next) => {\r\n    usersModel.create(req.body, function(err, user) {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({ isError: false, data: user })\r\n    })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    // var id = mongoose.Types.ObjectId(req.body.id);\r\n    usersModel.findOneAndUpdate({\r\n      '_id': req.body.id\r\n    }, req.body, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({ isError: false, data: user })\r\n    });\r\n  },\r\n\r\n  delete: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, { isActive: 'inactive' }, (err, ok) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      else {\r\n        res.json({ isError: true, data: true })\r\n      }\r\n    });\r\n  },\r\n  forgetPassword: (req, res, next) => {\r\n    var email = req.body.email;\r\n    var host = req.headers.host;\r\n    console.log(\"req.domain=>\", req.headers.host);\r\n    console.log(\"email\", email);\r\n    usersModel.find({\r\n      'email': req.body.email\r\n    }, function(err, result) {\r\n      if (err) {\r\n        res.json({ isError: true, data: err })\r\n      } else {\r\n        if (result != \"\") {\r\n          var d = new Date();\r\n          var v = new Date();\r\n          v.setMinutes(d.getMinutes() + 30);\r\n          const token = jwt.sign({\r\n            exp: Math.floor(v),\r\n            email: req.body.email,\r\n          }, env.App_key);\r\n          console.log(result);\r\n          nodemailer.createTestAccount((err, account) => {\r\n            // create reusable transporter object using the default SMTP transport\r\n            var transporter = nodemailer.createTransport({\r\n              service: 'gmail',\r\n              auth: {\r\n                user: 'mailerabhi111@gmail.com',\r\n                pass: 'Abhi@12345'\r\n              }\r\n            });\r\n\r\n            // setup email data with unicode symbols\r\n            let mailOptions = {\r\n              from: 'mailerabhi111@gmail.com', // sender address\r\n              to: email, // list of receivers\r\n              subject: 'Change Password', // Subject line\r\n              text: 'Please Click below link to change password', // plain text body\r\n              html: '<a href=http://' + host + '/recover?accessToken=' + token + '>Click to recover password</a>' // html body\r\n\r\n              // html: '<a href=http://localhost:3000/recover?accessToken=' + token + '>Click to recover password</a>' // html body\r\n            };\r\n\r\n            // send mail with defined transport object\r\n            transporter.sendMail(mailOptions, (error, info) => {\r\n              var information = JSON.stringify(info);\r\n\r\n              console.log('Transporter', err, information);\r\n              mail_responseModel.create({ 'email': email, 'error': error, 'info': information }, function(err, mail_response) {\r\n                if (err) {\r\n                  console.log(\"mail_responseModel error=>\", err);\r\n                } else {\r\n                  console.log(\"mail_responseModel No error\", mail_response);\r\n                }\r\n              })\r\n\r\n\r\n              if (error) {\r\n                return console.log(\"error--11--\", error);\r\n                res.json({ isError: true, data: error });\r\n              } else {\r\n                console.log('Message sent: %s', info.messageId);\r\n                console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\r\n                res.json({ isError: false, data: 'Please check your Email' });\r\n              }\r\n              // Preview only available when sending through an Ethereal account\r\n              // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>\r\n              // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...\r\n            });\r\n            //    res.json(mailOptions);\r\n          });\r\n        } else {\r\n          res.json({ isError: true, data: 'please provide a valid mail' });\r\n        }\r\n      }\r\n    })\r\n  },\r\n\r\n  storeBasicUserInfo: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var id = req.body.id;\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, {\r\n      'basicInfo': req.body\r\n    }, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({ isError: false, data: user })\r\n    });\r\n  },\r\n\r\n\r\n  isVerified: (req, res, next) => {\r\n    var decoded = jwt.verify(req.query.token, env.App_key);\r\n    usersModel.find({ 'email': decoded.email }, (err, user) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({ isError: false, data: user });\r\n    });\r\n\r\n  },\r\n\r\n  emailVerification: (req, res, next) => {\r\n    console.log(\"Email Verification=>\", req.body, req.params, req.query);\r\n    var email = req.body.email;\r\n    var host = req.headers.host;\r\n\r\n    usersModel.find({\r\n      'email': req.body.email\r\n    }, function(err, result) {\r\n      if (err) {\r\n        res.json({ isError: true, data: err })\r\n      } else {\r\n        if (result != \"\") {\r\n          var d = new Date();\r\n          var v = new Date();\r\n          v.setMinutes(d.getMinutes() + 30);\r\n          const token = jwt.sign({\r\n            exp: Math.floor(v),\r\n            email: req.body.email,\r\n          }, env.App_key);\r\n          console.log(result);\r\n          nodemailer.createTestAccount((err, account) => {\r\n            // create reusable transporter object using the default SMTP transport\r\n            var transporter = nodemailer.createTransport({\r\n              service: 'gmail',\r\n              auth: {\r\n                user: 'mailerabhi111@gmail.com',\r\n                pass: 'Abhi@12345'\r\n              }\r\n            });\r\n            let mailOptions = {\r\n              from: 'mailerabhi111@gmail.com', // sender address\r\n              to: email, // list of receivers\r\n              subject: 'Email Verification', // Subject line\r\n              text: 'Please Click below link to Verify Your Email address', // plain text body\r\n              html: 'Please<a href=http://' + host + '/ev/' + token + '>Click Here to processed email verification</a>' // html body\r\n            };\r\n            transporter.sendMail(mailOptions, (error, info) => {\r\n\r\n              mail_responseModel.create({ 'email': email, 'error': error, 'info': info }, function(err, mail_response) {\r\n                if (err) {\r\n                  console.log(\"mail_responseModel error=>\", err);\r\n                } else {\r\n                  console.log(\"mail_responseModel \", mail_response);\r\n                }\r\n              })\r\n              if (error) {\r\n                res.json({ isError: true, data: error });\r\n                return console.log(\"error--11--\", error);\r\n              } else {\r\n                console.log('Message sent: %s', info.messageId);\r\n                console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\r\n                res.json({ isError: false, data: 'Please check your email' });\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          res.json({ isError: true, data: 'please provide a valid mail' });\r\n        }\r\n      }\r\n    })\r\n  },\r\n\r\n  emailVerified: (req, res, next) => {\r\n    var decoded = jwt.verify(req.params.token, env.App_key);\r\n    var dt = new Date();\r\n    var checkDate = new Date(decoded.exp);\r\n    if (dt < checkDate) {\r\n      console.log(\"----------\");\r\n      usersModel.findOneAndUpdate({\r\n        \"email\": decoded.email\r\n      }, {\r\n        $set: {\r\n          \"verification.email_verified\": true\r\n        }\r\n      }, (err, user) => {\r\n        if (err) return res.json({ isError: true, data: err });\r\n        //  res.redirect('/#/profile');\r\n        res.json({ isError: false, data: \"your E-Mail address is verified sucessfully\" });\r\n\r\n      });\r\n    } else {\r\n      res.json({ isError: true, data: \"session expire\" });\r\n    }\r\n  },\r\n\r\n  varifyToken: (req, res, next) => {\r\n    console.log(\"in verify Token=>\");\r\n    var decoded = jwt.verify(req.params.token, env.App_key);\r\n    var dt = new Date();\r\n    var checkDate = new Date(decoded.exp);\r\n    if (dt < checkDate) {\r\n      console.log(\"----\");\r\n      var d = new Date();\r\n      var v = new Date();\r\n      v.setMinutes(d.getMinutes() + 60);\r\n      const token = jwt.sign({\r\n        exp: Math.floor(v),\r\n        email: decoded.email,\r\n      }, env.App_key);\r\n      res.redirect('/recover/' + token)\r\n    } else {\r\n      res.json({ isError: true, data: \"session expire\" });\r\n    }\r\n  },\r\n  changePassword: (req, res, next) => {\r\n    // console.log(\"req.headers--->\", req.headers['authorization'], req.body);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    req.body.password = encode().value(req.body.password);\r\n    req.body.new_pasword = encode().value(req.body.new_pasword);\r\n    usersModel.findOneAndUpdate({\r\n      $and: [{\r\n        \"password\": req.body.password\r\n      }, {\r\n        \"email\": decoded.email\r\n      }]\r\n    }, {\r\n      $set: {\r\n        \"password\": req.body.new_pasword,\r\n      }\r\n    }, (err, user) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({ isError: false, data: user });\r\n      console.log(\"user=>\", user);\r\n    })\r\n  },\r\n  recoverPassword: (req, res, next) => {\r\n    console.log(\"req in recover password api=>\", req.body, req.query, req.params);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    if (req.body.password != \"\" && req.body.password.length > 6) {\r\n      req.body.password = encode().value(req.body.password);\r\n      var checkDate = new Date(decoded.exp);\r\n      var dt = new Date();\r\n      console.log(dt, \"------\", checkDate);\r\n      if (dt < checkDate) {\r\n        usersModel.findOneAndUpdate({\r\n          \"email\": decoded.email\r\n        }, {\r\n          $set: {\r\n            \"password\": req.body.password\r\n          }\r\n        }, (err, user) => {\r\n          if (err) return res.json(err);\r\n          res.json({ isError: false, data: user });\r\n        });\r\n      } else {\r\n        res.json({ isError: true, data: \"session expire\" });\r\n      }\r\n    } else {\r\n      res.json({ isError: true, data: \"Please provide valid password\" });\r\n    }\r\n\r\n  },\r\n  changeEmail: (req, res, next) => {\r\n    if (req.body.new_email) {\r\n      req.body.password = encode().value(req.body.old_password);\r\n      usersModel.findOneAndUpdate({\r\n        $and: [{\r\n          \"password\": req.body.password\r\n        }, {\r\n          \"email\": req.body.email\r\n        }]\r\n      }, {\r\n        $set: {\r\n          \"email\": req.body.new_email,\r\n        }\r\n      }, (err, user) => {\r\n        if (err) return res.json({ isError: true, data: err });\r\n        res.json({ isError: false, data: user });\r\n      })\r\n    } else {\r\n      res.json({ isError: true, data: \"NULL\" });\r\n    }\r\n  },\r\n\r\n};\r\n\r\n\r\n\r\nexport default usersController;"]}
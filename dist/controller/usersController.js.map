{"version":3,"sources":["../../src/controller/usersController.js"],"names":["nodemailer","require","mongoose","encode","hashCode","usersController","getFriendsList","req","res","next","decoded","verify","headers","App_key","console","log","email","find","err","users","json","isError","data","acceptFriendRequest","senderEmail","body","query","result","friendsList","friends","forEach","item","index","findOneAndUpdate","$set","errFriend","resultFriend","dataObj","senderFirstName","first_name","status","$push","upsert","addMessage","sender","date","Date","create","message","friendReq","to","To","errParent","resultParent","isFound","length","getAll","addUserInfo","new","user","success","userProfile","_id","Types","ObjectId","id","findOne","tokenData","sort","limit","getOne","update","delete","isActive","ok","forgetPassword","host","d","v","setMinutes","getMinutes","token","sign","exp","Math","floor","createTestAccount","account","transporter","createTransport","service","auth","pass","mailOptions","from","subject","text","html","sendMail","error","info","information","JSON","stringify","mail_response","messageId","getTestMessageUrl","storeBasicUserInfo","isVerified","emailVerification","params","emailVerified","dt","checkDate","send","varifyToken","redirect","changePassword","password","value","new_pasword","$and","recoverPassword","changeEmail","new_email","old_password"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAEA,IAAMA,aAAaC,QAAQ,YAAR,CAAnB;AACA,IAAIC,WAAWD,QAAQ,UAAR,CAAf;AACA,IAAIE,SAASF,QAAQ,UAAR,EAAoBG,QAAjC;AACA,IAAMC,kBAAkB;;AAEtBC,kBAAgB,wBAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClC,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACAC,YAAQC,GAAR,CAAY,aAAZ,EAA2BL,QAAQM,KAAnC;AACA,yBAAWC,IAAX,CAAgB;AACd,eAASP,QAAQM;AADH,KAAhB,EAEG,EAAE,WAAW,CAAb,EAAgB,OAAO,CAAvB,EAFH,EAE+B,UAACE,GAAD,EAAMC,KAAN,EAAgB;AAC7C,UAAID,GAAJ,EAAS,OAAOV,IAAIY,IAAJ,CAAS;AACvBC,iBAAS,IADc;AAEvBC,cAAMJ;AAFiB,OAAT,CAAP;AAITV,UAAIY,IAAJ,CAAS;AACPC,iBAAS,KADF;AAEPC,cAAMH;AAFC,OAAT;AAID,KAXD;AAYD,GAjBqB;;AAoBtBI,uBAAqB,6BAAChB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;;AAEvC,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,QAAIW,cAAcjB,IAAIkB,IAAJ,CAASD,WAA3B;AACAV,YAAQC,GAAR,CAAY,gBAAZ,EAA8BS,WAA9B;;AAEA,QAAIE,QAAQ;AACV,eAAShB,QAAQM;AADP,KAAZ;;AAIA,yBAAWC,IAAX,CAAgBS,KAAhB,EAAuB,UAACR,GAAD,EAAMS,MAAN,EAAiB;AACtC,UAAI,CAACT,GAAL,EAAU;AACRJ,gBAAQC,GAAR,CAAY,cAAZ,EAA4BY,MAA5B;AACA,YAAIC,cAAcD,OAAO,CAAP,EAAUE,OAA5B;AACAD,oBAAYE,OAAZ,CAAoB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACnC,cAAID,KAAKP,WAAL,IAAoBA,WAAxB,EAAqC;AACnC,iCAAWS,gBAAX,kCACcD,KADd,mBACoCD,KAAKP,WADzC,GAEG;AACDU,qDACcF,KADd,cAC+B,QAD/B;AADC,aAFH,EAMG,UAACG,SAAD,EAAYC,YAAZ,EAA6B;;AAE9B,kBAAID,SAAJ,EAAe,OAAO3B,IAAIY,IAAJ,CAAS;AAC7BC,yBAAS,IADoB;AAE7BC,sBAAMJ;AAFuB,eAAT,CAAP;AAIf;AACA;AACA;AACA;;AAEA,kBAAImB,UAAU;AACZb,6BAAad,QAAQM,KADT;AAEZsB,iCAAiB5B,QAAQ6B,UAFb;AAGZC,wBAAQ;AAHI,eAAd;;AAMA,mCAAWP,gBAAX,CAA4B;AAC1B,yBAAST;AADiB,eAA5B,EAEG,EAAEiB,OAAO,EAAEZ,SAASQ,OAAX,EAAT,EAFH,EAEoC;AAClCK,wBAAQ;AAD0B,eAFpC,EAIG,UAACxB,GAAD,EAAMC,KAAN,EAAgB;AACjB,oBAAID,GAAJ,EAAS,OAAOV,IAAIY,IAAJ,CAAS;AACvBC,2BAAS,IADc;AAEvBC,wBAAMJ;AAFiB,iBAAT,CAAP;AAITV,oBAAIY,IAAJ,CAAS;AACPC,2BAAS,KADF;AAEPC,wBAAMH;AAFC,iBAAT;AAID,eAbD;AAgBD,aAvCD;AAwCD;AACF,SA3CD;AA8CD;AACF,KAnDD;AAqDD,GAnFqB;AAoFtBwB,cAAY,oBAACpC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;;AAE9B,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,QAAI+B,SAASlC,QAAQM,KAArB;AACAF,YAAQC,GAAR,CAAY,eAAZ;AACA,QAAIO,OAAOf,IAAIkB,IAAf;AACAH,SAAKsB,MAAL,GAAcA,MAAd;AACAtB,SAAKuB,IAAL,GAAY,IAAIC,IAAJ,EAAZ;AACAhC,YAAQC,GAAR,CAAY,qBAAZ,EAAmCO,IAAnC;AACA,4BAAcyB,MAAd,CAAqBzB,IAArB,EAA2B,UAASJ,GAAT,EAAc8B,OAAd,EAAuB;AAChD,UAAI9B,GAAJ,EAAS,OAAOV,IAAIY,IAAJ,CAASF,GAAT,CAAP;AACTV,UAAIY,IAAJ,CAAS;AACPC,iBAAS,KADF;AAEPC,cAAM0B;AAFC,OAAT;AAID,KAND;AAOD,GApGqB;;AAsGtBC,aAAW,mBAAC1C,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;;AAE7B,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,QAAIqC,KAAK3C,IAAIkB,IAAJ,CAAS0B,EAAlB;AACArC,YAAQC,GAAR,CAAY,eAAZ,EAA6BmC,EAA7B;;AAEA,QAAIb,UAAU;AACZb,mBAAad,QAAQM,KADT;AAEZsB,uBAAiB5B,QAAQ6B,UAFb;AAGZC,cAAQ;AAHI,KAAd;AAKA1B,YAAQC,GAAR,CAAY,mBAAZ,EAAiCsB,OAAjC;AACA,yBAAWpB,IAAX,CAAgB,EAAE,SAASiC,EAAX,EAAhB,EAAiC,UAACE,SAAD,EAAYC,YAAZ,EAA6B;AAC5D,UAAI,CAACD,SAAL,EAAgB;AACd,YAAIxB,cAAcyB,aAAa,CAAb,EAAgBxB,OAAhB,IAA2B,EAA7C;AACAf,gBAAQC,GAAR,CAAY,eAAZ,EAA6Ba,WAA7B;AACA,YAAI0B,UAAU1B,YAAYX,IAAZ,CAAiB,UAACc,IAAD;AAAA,iBAAUA,KAAKP,WAAL,IAAoBd,QAAQM,KAAtC;AAAA,SAAjB,CAAd;AACA,YAAIsC,OAAJ,EAAa;AACX9C,cAAIY,IAAJ,CAAS;AACPC,qBAAS,KADF;AAEPiC,qBAAS;AAFF,WAAT;AAID;AACDxC,gBAAQC,GAAR,CAAY,YAAZ,EAA0BuC,OAA1B;AACA,YAAI,CAACA,OAAD,IAAY1B,YAAY2B,MAAZ,KAAuB,CAAvC,EAA0C;AACxCzC,kBAAQC,GAAR,CAAY,WAAZ;AACA,+BAAWkB,gBAAX,CAA4B;AAC1B,qBAASiB;AADiB,WAA5B,EAEG,EAAET,OAAO,EAAEZ,SAASQ,OAAX,EAAT,EAFH,EAEoC;AAClCK,oBAAQ;AAD0B,WAFpC,EAIG,UAACxB,GAAD,EAAMC,KAAN,EAAgB;AACjB,gBAAID,GAAJ,EAAS,OAAOV,IAAIY,IAAJ,CAAS;AACvBC,uBAAS,IADc;AAEvBC,oBAAMJ;AAFiB,aAAT,CAAP;AAITV,gBAAIY,IAAJ,CAAS;AACPC,uBAAS,KADF;AAEPC,oBAAMH;AAFC,aAAT;AAID,WAbD;AAcD;AACF;AACF,KA9BD;AAiCD,GAnJqB;;AAsJtBqC;AAAA,uEAAQ,iBAAMjD,GAAN,EAAWC,GAAX,EAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AACN,mCAAWQ,IAAX,CAAgB,EAAhB,EAAoB,UAACC,GAAD,EAAMC,KAAN,EAAgB;AAClC,oBAAID,GAAJ,EAAS,OAAOV,IAAIY,IAAJ,CAAS;AACvBC,2BAAS,IADc;AAEvBC,wBAAMJ;AAFiB,iBAAT,CAAP;AAITV,oBAAIY,IAAJ,CAAS;AACPC,2BAAS,KADF;AAEPC,wBAAMH;AAFC,iBAAT;AAID,eATD;;AADM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,KAtJsB;AAmKtBsC;AAAA,wEAAa,kBAAMlD,GAAN,EAAWC,GAAX,EAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,qBADO,GACG,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CADH;;AAEX,mCAAWoB,gBAAX,CAA4B;;AAE1B,yBAASvB,QAAQM;AAFS,eAA5B,EAGGT,IAAIkB,IAHP,EAGa;AACXiC,qBAAK;AADM,eAHb,EAKG,UAACxC,GAAD,EAAMyC,IAAN,EAAe;AAChB,oBAAIzC,GAAJ,EAAS,OAAOV,IAAIY,IAAJ,CAAS;AACvBwC,2BAAS,KADc;AAEvBtC,wBAAMJ;AAFiB,iBAAT,CAAP;AAITV,oBAAIY,IAAJ,CAAS;AACPwC,2BAAS,IADF;AAEPtC,wBAAMqC;AAFC,iBAAT;AAID,eAdD;;AAFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,KAnKsB;AAsLtBE,eAAa,qBAACtD,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/B;;AAEA,QAAIqD,MAAM5D,SAAS6D,KAAT,CAAeC,QAAf,CAAwBzD,IAAImB,KAAJ,CAAUuC,EAAlC,CAAV;AACAnD,YAAQC,GAAR,CAAY,MAAZ,EAAoB+C,GAApB;AACA,yBAAWI,OAAX,CAAmB;AACjBJ,WAAKA;AADY,KAAnB,EAEG,UAAC5C,GAAD,EAAMyC,IAAN,EAAe;;AAEhB,UAAIzC,GAAJ,EAAS;AACPV,YAAIY,IAAJ,CAAS;AACPC,mBAAS,IADF;AAEPC,gBAAMJ;AAFC,SAAT;AAID,OALD,MAKO;AACL,YAAIF,QAAQ2C,KAAK3C,KAAjB;AACAF,gBAAQC,GAAR,CAAY,UAAZ,EAAwBC,KAAxB;AACA,6BAAWkD,OAAX,CAAmB,EAAE,SAASlD,KAAX,EAAnB,EAAuC,UAACE,GAAD,EAAMiD,SAAN,EAAoB;AACzD3D,cAAIY,IAAJ,CAAS;AACPC,qBAAS,KADF;AAEPC,kBAAM,EAAEqC,MAAMA,IAAR,EAAcQ,WAAWA,SAAzB;AAFC,WAAT;AAID,SALD,EAKGC,IALH,CAKQ,EAAEN,KAAK,CAAC,CAAR,EALR,EAKqBO,KALrB,CAK2B,CAL3B;AAOD;AACF,KApBD;AAqBD,GAhNqB;;AAmNtBC,UAAQ,gBAAC/D,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B;AACA,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,yBAAWqD,OAAX,CAAmB;AACjB,eAASxD,QAAQM;AADA,KAAnB,EAEG,UAACE,GAAD,EAAMyC,IAAN,EAAe;AAChB,UAAIzC,GAAJ,EAAS;AACPV,YAAIY,IAAJ,CAAS;AACPC,mBAAS,IADF;AAEPC,gBAAMJ;AAFC,SAAT;AAID,OALD,MAKO;AACLV,YAAIY,IAAJ,CAAS;AACPC,mBAAS,KADF;AAEPC,gBAAMqC;AAFC,SAAT;AAID;AACF,KAdD;AAeD,GArOqB;;AAuOtBZ,UAAQ,gBAACxC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B,yBAAWsC,MAAX,CAAkBxC,IAAIkB,IAAtB,EAA4B,UAASP,GAAT,EAAcyC,IAAd,EAAoB;AAC9C,UAAIzC,GAAJ,EAAS,OAAOV,IAAIY,IAAJ,CAAS;AACvBC,iBAAS,IADc;AAEvBC,cAAMJ;AAFiB,OAAT,CAAP;AAITV,UAAIY,IAAJ,CAAS;AACPC,iBAAS,KADF;AAEPC,cAAMqC;AAFC,OAAT;AAID,KATD;AAUD,GAlPqB;;AAoPtBY,UAAQ,gBAAChE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B;AACA,yBAAWwB,gBAAX,CAA4B;AAC1B,aAAO1B,IAAIkB,IAAJ,CAASwC;AADU,KAA5B,EAEG1D,IAAIkB,IAFP,EAEa;AACXiC,WAAK;AADM,KAFb,EAIG,UAACxC,GAAD,EAAMyC,IAAN,EAAe;AAChB,UAAIzC,GAAJ,EAAS,OAAOV,IAAIY,IAAJ,CAAS;AACvBC,iBAAS,IADc;AAEvBC,cAAMJ;AAFiB,OAAT,CAAP;AAITV,UAAIY,IAAJ,CAAS;AACPC,iBAAS,KADF;AAEPC,cAAMqC;AAFC,OAAT;AAID,KAbD;AAcD,GApQqB;;AAsQtBa,UAAQ,iBAACjE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,yBAAWoB,gBAAX,CAA4B;AAC1B,eAASvB,QAAQM;AADS,KAA5B,EAEG;AACDyD,gBAAU;AADT,KAFH,EAIG,UAACvD,GAAD,EAAMwD,EAAN,EAAa;AACd,UAAIxD,GAAJ,EAAS,OAAOV,IAAIY,IAAJ,CAAS;AACvBC,iBAAS,IADc;AAEvBC,cAAMJ;AAFiB,OAAT,CAAP,CAAT,KAIK;AACHV,YAAIY,IAAJ,CAAS;AACPC,mBAAS,IADF;AAEPC,gBAAM;AAFC,SAAT;AAID;AACF,KAfD;AAgBD,GAxRqB;AAyRtBqD,kBAAgB,wBAACpE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClC,QAAIO,QAAQT,IAAIkB,IAAJ,CAAST,KAArB;AACA,QAAI4D,OAAOrE,IAAIK,OAAJ,CAAYgE,IAAvB;AACA9D,YAAQC,GAAR,CAAY,cAAZ,EAA4BR,IAAIK,OAAJ,CAAYgE,IAAxC;AACA9D,YAAQC,GAAR,CAAY,OAAZ,EAAqBC,KAArB;AACA,yBAAWC,IAAX,CAAgB;AACd,eAASV,IAAIkB,IAAJ,CAAST;AADJ,KAAhB,EAEG,UAASE,GAAT,EAAcS,MAAd,EAAsB;AACvB,UAAIT,GAAJ,EAAS;AACPV,YAAIY,IAAJ,CAAS;AACPC,mBAAS,IADF;AAEPC,gBAAMJ;AAFC,SAAT;AAID,OALD,MAKO;AACL,YAAIS,UAAU,EAAd,EAAkB;AAChB,cAAIkD,IAAI,IAAI/B,IAAJ,EAAR;AACA,cAAIgC,IAAI,IAAIhC,IAAJ,EAAR;AACAgC,YAAEC,UAAF,CAAaF,EAAEG,UAAF,KAAiB,EAA9B;AACA,cAAMC,QAAQ,uBAAIC,IAAJ,CAAS;AACrBC,iBAAKC,KAAKC,KAAL,CAAWP,CAAX,CADgB;AAErB9D,mBAAOT,IAAIkB,IAAJ,CAAST;AAFK,WAAT,EAGX,cAAIH,OAHO,CAAd;AAIAC,kBAAQC,GAAR,CAAYY,MAAZ;AACA3B,qBAAWsF,iBAAX,CAA6B,UAACpE,GAAD,EAAMqE,OAAN,EAAkB;AAC7C;AACA,gBAAIC,cAAcxF,WAAWyF,eAAX,CAA2B;AAC3CC,uBAAS,OADkC;AAE3CC,oBAAM;AACJhC,sBAAM,0BADF;AAEJiC,sBAAM;AAFF;AAFqC,aAA3B,CAAlB;;AAQA;AACA,gBAAIC,cAAc;AAChBC,oBAAM,0BADU,EACkB;AAClC5C,kBAAIlC,KAFY,EAEL;AACX+E,uBAAS,iBAHO,EAGY;AAC5BC,oBAAM,4CAJU,EAIoC;AACpDC,oBAAM,oBAAoBrB,IAApB,GAA2B,uBAA3B,GAAqDK,KAArD,GAA6D,gCALnD,CAKoF;;AAEpG;AAPgB,aAAlB;AASAnE,oBAAQC,GAAR,CAAY,aAAZ,EAA2B8E,WAA3B;;AAEA;AACAL,wBAAYU,QAAZ,CAAqBL,WAArB,EAAkC,UAACM,KAAD,EAAQC,IAAR,EAAiB;AACjD,kBAAIC,cAAcC,KAAKC,SAAL,CAAeH,IAAf,CAAlB;;AAEAtF,sBAAQC,GAAR,CAAY,aAAZ,EAA2BG,GAA3B,EAAgCmF,WAAhC;AACA,2CAAmBtD,MAAnB,CAA0B;AACxB,yBAAS/B,KADe;AAExB,yBAASmF,KAFe;AAGxB,wBAAQE;AAHgB,eAA1B,EAIG,UAASnF,GAAT,EAAcsF,aAAd,EAA6B;AAC9B,oBAAItF,GAAJ,EAAS;AACPJ,0BAAQC,GAAR,CAAY,4BAAZ,EAA0CG,GAA1C;AACD,iBAFD,MAEO;AACLJ,0BAAQC,GAAR,CAAY,6BAAZ,EAA2CyF,aAA3C;AACD;AACF,eAVD;;AAaA,kBAAIL,KAAJ,EAAW;AACT,uBAAOrF,QAAQC,GAAR,CAAY,aAAZ,EAA2BoF,KAA3B,CAAP;AACA3F,oBAAIY,IAAJ,CAAS;AACPC,2BAAS,IADF;AAEPC,wBAAM6E;AAFC,iBAAT;AAID,eAND,MAMO;AACLrF,wBAAQC,GAAR,CAAY,kBAAZ,EAAgCqF,KAAKK,SAArC;AACA3F,wBAAQC,GAAR,CAAY,iBAAZ,EAA+Bf,WAAW0G,iBAAX,CAA6BN,IAA7B,CAA/B;AACA5F,oBAAIY,IAAJ,CAAS;AACPC,2BAAS,KADF;AAEPC,wBAAM;AAFC,iBAAT;AAKD;;AAED;AACA;AACA;AACD,aApCD;;AAsCA;;AAEA;AACD,WAhED;AAiED,SA1ED,MA0EO;AACLd,cAAIY,IAAJ,CAAS;AACPC,qBAAS,IADF;AAEPC,kBAAM;AAFC,WAAT;AAID;AACF;AACF,KA1FD;AA2FD,GAzXqB;;AA2XtBqF,sBAAoB,4BAACpG,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACtC,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,QAAIoD,KAAK1D,IAAIkB,IAAJ,CAASwC,EAAlB;AACA,yBAAWhC,gBAAX,CAA4B;AAC1B,eAASvB,QAAQM;AADS,KAA5B,EAEG;AACD,mBAAaT,IAAIkB;AADhB,KAFH,EAIG;AACDiC,WAAK;AADJ,KAJH,EAMG,UAACxC,GAAD,EAAMyC,IAAN,EAAe;AAChB,UAAIzC,GAAJ,EAAS,OAAOV,IAAIY,IAAJ,CAAS;AACvBC,iBAAS,IADc;AAEvBC,cAAMJ;AAFiB,OAAT,CAAP;AAITV,UAAIY,IAAJ,CAAS;AACPC,iBAAS,KADF;AAEPC,cAAMqC;AAFC,OAAT;AAID,KAfD;AAgBD,GA9YqB;;AAiZtBiD,cAAY,oBAACrG,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC9B,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAImB,KAAJ,CAAUuD,KAArB,EAA4B,cAAIpE,OAAhC,CAAd;AACA,yBAAWoB,gBAAX,CAA4B;AAC1B,eAASvB,QAAQM;AADS,KAA5B,EAEG,UAACE,GAAD,EAAMyC,IAAN,EAAe;AAChB,UAAIzC,GAAJ,EAAS,OAAOV,IAAIY,IAAJ,CAAS;AACvBC,iBAAS,IADc;AAEvBC,cAAMJ;AAFiB,OAAT,CAAP;AAITV,UAAIY,IAAJ,CAAS;AACPC,iBAAS,KADF;AAEPC,cAAMqC;AAFC,OAAT;AAID,KAXD;AAaD,GAhaqB;;AAkatBkD,qBAAmB,2BAACtG,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrCK,YAAQC,GAAR,CAAY,sBAAZ,EAAoCR,IAAIkB,IAAxC,EAA8ClB,IAAIuG,MAAlD,EAA0DvG,IAAImB,KAA9D;AACA,QAAIV,QAAQT,IAAIkB,IAAJ,CAAST,KAArB;AACA,QAAI4D,OAAOrE,IAAIK,OAAJ,CAAYgE,IAAvB;;AAEA,yBAAW3D,IAAX,CAAgB;AACd,eAASV,IAAIkB,IAAJ,CAAST;AADJ,KAAhB,EAEG,UAASE,GAAT,EAAcS,MAAd,EAAsB;AACvB,UAAIT,GAAJ,EAAS;AACPV,YAAIY,IAAJ,CAAS;AACPC,mBAAS,IADF;AAEPC,gBAAMJ;AAFC,SAAT;AAID,OALD,MAKO;AACL,YAAIS,UAAU,EAAd,EAAkB;AAChB,cAAIkD,IAAI,IAAI/B,IAAJ,EAAR;AACA,cAAIgC,IAAI,IAAIhC,IAAJ,EAAR;AACAgC,YAAEC,UAAF,CAAaF,EAAEG,UAAF,KAAiB,EAA9B;AACA,cAAMC,QAAQ,uBAAIC,IAAJ,CAAS;AACrBC,iBAAKC,KAAKC,KAAL,CAAWP,CAAX,CADgB;AAErB9D,mBAAOT,IAAIkB,IAAJ,CAAST;AAFK,WAAT,EAGX,cAAIH,OAHO,CAAd;AAIAC,kBAAQC,GAAR,CAAYY,MAAZ;AACA3B,qBAAWsF,iBAAX,CAA6B,UAACpE,GAAD,EAAMqE,OAAN,EAAkB;AAC7C;AACA,gBAAIC,cAAcxF,WAAWyF,eAAX,CAA2B;AAC3CC,uBAAS,OADkC;AAE3CC,oBAAM;AACJhC,sBAAM,0BADF;AAEJiC,sBAAM;AAFF;AAFqC,aAA3B,CAAlB;AAOA,gBAAIC,cAAc;AAChBC,oBAAM,0BADU,EACkB;AAClC5C,kBAAIlC,KAFY,EAEL;AACX+E,uBAAS,oBAHO,EAGe;AAC/BC,oBAAM,sDAJU,EAI8C;AAC9DC,oBAAM,0BAA0BrB,IAA1B,GAAiC,MAAjC,GAA0CK,KAA1C,GAAkD,iDALxC,CAK0F;AAL1F,aAAlB;AAOAO,wBAAYU,QAAZ,CAAqBL,WAArB,EAAkC,UAACM,KAAD,EAAQC,IAAR,EAAiB;;AAEjD,2CAAmBrD,MAAnB,CAA0B;AACxB,yBAAS/B,KADe;AAExB,yBAASmF,KAFe;AAGxB,wBAAQC;AAHgB,eAA1B,EAIG,UAASlF,GAAT,EAAcsF,aAAd,EAA6B;AAC9B,oBAAItF,GAAJ,EAAS;AACPJ,0BAAQC,GAAR,CAAY,4BAAZ,EAA0CG,GAA1C;AACD,iBAFD,MAEO;AACLJ,0BAAQC,GAAR,CAAY,qBAAZ,EAAmCyF,aAAnC;AACD;AACF,eAVD;AAWA,kBAAIL,KAAJ,EAAW;AACT3F,oBAAIY,IAAJ,CAAS;AACPC,2BAAS,IADF;AAEPC,wBAAM6E;AAFC,iBAAT;AAIA,uBAAOrF,QAAQC,GAAR,CAAY,aAAZ,EAA2BoF,KAA3B,CAAP;AACD,eAND,MAMO;AACLrF,wBAAQC,GAAR,CAAY,kBAAZ,EAAgCqF,KAAKK,SAArC;AACA3F,wBAAQC,GAAR,CAAY,iBAAZ,EAA+Bf,WAAW0G,iBAAX,CAA6BN,IAA7B,CAA/B;AACA5F,oBAAIY,IAAJ,CAAS;AACPC,2BAAS,KADF;AAEPC,wBAAM;AAFC,iBAAT;AAID;AACF,aA3BD;AA4BD,WA5CD;AA6CD,SAtDD,MAsDO;AACLd,cAAIY,IAAJ,CAAS;AACPC,qBAAS,IADF;AAEPC,kBAAM;AAFC,WAAT;AAID;AACF;AACF,KAtED;AAuED,GA9eqB;;AAgftByF,iBAAe,uBAACxG,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjC,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIuG,MAAJ,CAAW7B,KAAtB,EAA6B,cAAIpE,OAAjC,CAAd;AACA,QAAImG,KAAK,IAAIlE,IAAJ,EAAT;AACA,QAAImE,YAAY,IAAInE,IAAJ,CAASpC,QAAQyE,GAAjB,CAAhB;AACA,QAAI6B,KAAKC,SAAT,EAAoB;AAClBnG,cAAQC,GAAR,CAAY,YAAZ;AACA,2BAAWkB,gBAAX,CAA4B;AAC1B,iBAASvB,QAAQM;AADS,OAA5B,EAEG;AACDkB,cAAM;AACJ,yCAA+B;AAD3B;AADL,OAFH,EAMG,UAAChB,GAAD,EAAMyC,IAAN,EAAe;AAChB,YAAIzC,GAAJ,EAAS,OAAOV,IAAIY,IAAJ,CAAS;AACvBC,mBAAS,IADc;AAEvBC,gBAAMJ;AAFiB,SAAT,CAAP;AAIT;AACAV,YAAI0G,IAAJ,CAAS,UAAT;AACE;AAEH,OAfD;AAgBD,KAlBD,MAkBO;AACL1G,UAAIY,IAAJ,CAAS;AACPC,iBAAS,IADF;AAEPC,cAAM;AAFC,OAAT;AAID;AACF,GA5gBqB;;AA8gBtB6F,eAAa,qBAAC5G,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/BK,YAAQC,GAAR,CAAY,mBAAZ;AACA,QAAIL,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIuG,MAAJ,CAAW7B,KAAtB,EAA6B,cAAIpE,OAAjC,CAAd;AACA,QAAImG,KAAK,IAAIlE,IAAJ,EAAT;AACA,QAAImE,YAAY,IAAInE,IAAJ,CAASpC,QAAQyE,GAAjB,CAAhB;AACA,QAAI6B,KAAKC,SAAT,EAAoB;AAClBnG,cAAQC,GAAR,CAAY,MAAZ;AACA,UAAI8D,IAAI,IAAI/B,IAAJ,EAAR;AACA,UAAIgC,IAAI,IAAIhC,IAAJ,EAAR;AACAgC,QAAEC,UAAF,CAAaF,EAAEG,UAAF,KAAiB,EAA9B;AACA,UAAMC,QAAQ,uBAAIC,IAAJ,CAAS;AACrBC,aAAKC,KAAKC,KAAL,CAAWP,CAAX,CADgB;AAErB9D,eAAON,QAAQM;AAFM,OAAT,EAGX,cAAIH,OAHO,CAAd;AAIAL,UAAI4G,QAAJ,CAAa,cAAcnC,KAA3B;AACD,KAVD,MAUO;AACLzE,UAAIY,IAAJ,CAAS;AACPC,iBAAS,IADF;AAEPC,cAAM;AAFC,OAAT;AAID;AACF,GAniBqB;AAoiBtB+F,kBAAgB,wBAAC9G,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClC;AACA,QAAIC,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACAN,QAAIkB,IAAJ,CAAS6F,QAAT,GAAoBnH,SAASoH,KAAT,CAAehH,IAAIkB,IAAJ,CAAS6F,QAAxB,CAApB;AACA/G,QAAIkB,IAAJ,CAAS+F,WAAT,GAAuBrH,SAASoH,KAAT,CAAehH,IAAIkB,IAAJ,CAAS+F,WAAxB,CAAvB;AACA,yBAAWvF,gBAAX,CAA4B;AAC1BwF,YAAM,CAAC;AACL,oBAAYlH,IAAIkB,IAAJ,CAAS6F;AADhB,OAAD,EAEH;AACD,iBAAS5G,QAAQM;AADhB,OAFG;AADoB,KAA5B,EAMG;AACDkB,YAAM;AACJ,oBAAY3B,IAAIkB,IAAJ,CAAS+F;AADjB;AADL,KANH,EAUG,UAACtG,GAAD,EAAMyC,IAAN,EAAe;AAChB,UAAIzC,GAAJ,EAAS,OAAOV,IAAIY,IAAJ,CAAS;AACvBC,iBAAS,IADc;AAEvBC,cAAMJ;AAFiB,OAAT,CAAP;AAITV,UAAIY,IAAJ,CAAS;AACPC,iBAAS,KADF;AAEPC,cAAMqC;AAFC,OAAT;AAIA7C,cAAQC,GAAR,CAAY,QAAZ,EAAsB4C,IAAtB;AACD,KApBD;AAqBD,GA9jBqB;AA+jBtB+D,mBAAiB,yBAACnH,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnCK,YAAQC,GAAR,CAAY,+BAAZ,EAA6CR,IAAIkB,IAAjD,EAAuDlB,IAAImB,KAA3D,EAAkEnB,IAAIuG,MAAtE;AACA,QAAIpG,UAAU,uBAAIC,MAAJ,CAAWJ,IAAIK,OAAJ,CAAY,eAAZ,CAAX,EAAyC,cAAIC,OAA7C,CAAd;AACA,QAAIN,IAAIkB,IAAJ,CAAS6F,QAAT,IAAqB,EAArB,IAA2B/G,IAAIkB,IAAJ,CAAS6F,QAAT,CAAkB/D,MAAlB,GAA2B,CAA1D,EAA6D;AAC3DhD,UAAIkB,IAAJ,CAAS6F,QAAT,GAAoBnH,SAASoH,KAAT,CAAehH,IAAIkB,IAAJ,CAAS6F,QAAxB,CAApB;AACA,UAAIL,YAAY,IAAInE,IAAJ,CAASpC,QAAQyE,GAAjB,CAAhB;AACA,UAAI6B,KAAK,IAAIlE,IAAJ,EAAT;AACAhC,cAAQC,GAAR,CAAYiG,EAAZ,EAAgB,QAAhB,EAA0BC,SAA1B;AACA,UAAID,KAAKC,SAAT,EAAoB;AAClB,6BAAWhF,gBAAX,CAA4B;AAC1B,mBAASvB,QAAQM;AADS,SAA5B,EAEG;AACDkB,gBAAM;AACJ,wBAAY3B,IAAIkB,IAAJ,CAAS6F;AADjB;AADL,SAFH,EAMG,UAACpG,GAAD,EAAMyC,IAAN,EAAe;AAChB,cAAIzC,GAAJ,EAAS,OAAOV,IAAIY,IAAJ,CAASF,GAAT,CAAP;AACTV,cAAIY,IAAJ,CAAS;AACPC,qBAAS,KADF;AAEPC,kBAAMqC;AAFC,WAAT;AAID,SAZD;AAaD,OAdD,MAcO;AACLnD,YAAIY,IAAJ,CAAS;AACPC,mBAAS,IADF;AAEPC,gBAAM;AAFC,SAAT;AAID;AACF,KAzBD,MAyBO;AACLd,UAAIY,IAAJ,CAAS;AACPC,iBAAS,IADF;AAEPC,cAAM;AAFC,OAAT;AAID;AAEF,GAlmBqB;AAmmBtBqG,eAAa,qBAACpH,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/B,QAAIF,IAAIkB,IAAJ,CAASmG,SAAb,EAAwB;AACtBrH,UAAIkB,IAAJ,CAAS6F,QAAT,GAAoBnH,SAASoH,KAAT,CAAehH,IAAIkB,IAAJ,CAASoG,YAAxB,CAApB;AACA,2BAAW5F,gBAAX,CAA4B;AAC1BwF,cAAM,CAAC;AACL,sBAAYlH,IAAIkB,IAAJ,CAAS6F;AADhB,SAAD,EAEH;AACD,mBAAS/G,IAAIkB,IAAJ,CAAST;AADjB,SAFG;AADoB,OAA5B,EAMG;AACDkB,cAAM;AACJ,mBAAS3B,IAAIkB,IAAJ,CAASmG;AADd;AADL,OANH,EAUG,UAAC1G,GAAD,EAAMyC,IAAN,EAAe;AAChB,YAAIzC,GAAJ,EAAS,OAAOV,IAAIY,IAAJ,CAAS;AACvBC,mBAAS,IADc;AAEvBC,gBAAMJ;AAFiB,SAAT,CAAP;AAITV,YAAIY,IAAJ,CAAS;AACPC,mBAAS,KADF;AAEPC,gBAAMqC;AAFC,SAAT;AAID,OAnBD;AAoBD,KAtBD,MAsBO;AACLnD,UAAIY,IAAJ,CAAS;AACPC,iBAAS,IADF;AAEPC,cAAM;AAFC,OAAT;AAID;AACF;;AAhoBqB,CAAxB;;kBAsoBejB,e","file":"usersController.js","sourcesContent":["import usersModel from '../models/usersModel'\r\nimport tokenModel from './../models/tokenModel';\r\nimport messagesModel from '../models/messagesModel'\r\n\r\nimport mail_responseModel from '../models/mail_responseModel'\r\nimport postatrade from '../models/postatrade'\r\nimport jwt from 'jsonwebtoken';\r\nimport env from \"../env\";\r\n\r\nconst nodemailer = require('nodemailer');\r\nvar mongoose = require('mongoose');\r\nvar encode = require('hashcode').hashCode;\r\nconst usersController = {\r\n\r\n  getFriendsList: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    console.log(\"addUserInfo\", decoded.email)\r\n    usersModel.find({\r\n      'email': decoded.email\r\n    }, { \"friends\": 1, \"_id\": 0 }, (err, users) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: users\r\n      });\r\n    });\r\n  },\r\n\r\n\r\n  acceptFriendRequest: (req, res, next) => {\r\n\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var senderEmail = req.body.senderEmail;\r\n    console.log(\"senderEmail==>\", senderEmail);\r\n\r\n    var query = {\r\n      'email': decoded.email\r\n    }\r\n\r\n    usersModel.find(query, (err, result) => {\r\n      if (!err) {\r\n        console.log(\"friends list\", result);\r\n        var friendsList = result[0].friends;\r\n        friendsList.forEach((item, index) => {\r\n          if (item.senderEmail == senderEmail) {\r\n            usersModel.findOneAndUpdate({\r\n              [`friends.${index}.senderEmail`]: item.senderEmail\r\n            }, {\r\n              $set: {\r\n                [`friends.${index}.status`]: 'Friend'\r\n              }\r\n            }, (errFriend, resultFriend) => {\r\n\r\n              if (errFriend) return res.json({\r\n                isError: true,\r\n                data: err\r\n              });\r\n              // res.json({\r\n              //   isError: false,\r\n              //   data: resultFriend\r\n              // });\r\n\r\n              var dataObj = {\r\n                senderEmail: decoded.email,\r\n                senderFirstName: decoded.first_name,\r\n                status: 'Friend'\r\n              }\r\n\r\n              usersModel.findOneAndUpdate({\r\n                'email': senderEmail\r\n              }, { $push: { friends: dataObj } }, {\r\n                upsert: true\r\n              }, (err, users) => {\r\n                if (err) return res.json({\r\n                  isError: true,\r\n                  data: err\r\n                });\r\n                res.json({\r\n                  isError: false,\r\n                  data: users\r\n                });\r\n              });\r\n\r\n\r\n            })\r\n          }\r\n        })\r\n\r\n\r\n      }\r\n    })\r\n\r\n  },\r\n  addMessage: (req, res, next) => {\r\n\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var sender = decoded.email;\r\n    console.log(\"in addmessage\");\r\n    var data = req.body;\r\n    data.sender = sender;\r\n    data.date = new Date();\r\n    console.log(\"Data for message==>\", data);\r\n    messagesModel.create(data, function(err, message) {\r\n      if (err) return res.json(err);\r\n      res.json({\r\n        isError: false,\r\n        data: message,\r\n      })\r\n    })\r\n  },\r\n\r\n  friendReq: (req, res, next) => {\r\n\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var to = req.body.To;\r\n    console.log(\"To  Details=>\", to);\r\n\r\n    var dataObj = {\r\n      senderEmail: decoded.email,\r\n      senderFirstName: decoded.first_name,\r\n      status: 'Pending'\r\n    }\r\n    console.log(\"Senders Details=>\", dataObj);\r\n    usersModel.find({ 'email': to }, (errParent, resultParent) => {\r\n      if (!errParent) {\r\n        var friendsList = resultParent[0].friends || [];\r\n        console.log(\"friendList==>\", friendsList);\r\n        var isFound = friendsList.find((item) => item.senderEmail == decoded.email);\r\n        if (isFound) {\r\n          res.json({\r\n            isError: false,\r\n            isFound: true\r\n          });\r\n        }\r\n        console.log(\"isfound==>\", isFound);\r\n        if (!isFound || friendsList.length === 0) {\r\n          console.log(\"not found\");\r\n          usersModel.findOneAndUpdate({\r\n            'email': to\r\n          }, { $push: { friends: dataObj } }, {\r\n            upsert: true\r\n          }, (err, users) => {\r\n            if (err) return res.json({\r\n              isError: true,\r\n              data: err\r\n            });\r\n            res.json({\r\n              isError: false,\r\n              data: users\r\n            });\r\n          });\r\n        }\r\n      }\r\n    })\r\n\r\n\r\n  },\r\n\r\n\r\n  getAll: async(req, res, next) => {\r\n    usersModel.find({}, (err, users) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: users\r\n      });\r\n    });\r\n\r\n  },\r\n  addUserInfo: async(req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    usersModel.findOneAndUpdate({\r\n\r\n      'email': decoded.email\r\n    }, req.body, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        success: false,\r\n        data: err\r\n      });\r\n      res.json({\r\n        success: true,\r\n        data: user\r\n      })\r\n    });\r\n\r\n  },\r\n  userProfile: (req, res, next) => {\r\n    // var _id = Number(req.query.id);\r\n\r\n    var _id = mongoose.Types.ObjectId(req.query.id);\r\n    console.log(\"id=>\", _id);\r\n    usersModel.findOne({\r\n      _id: _id\r\n    }, (err, user) => {\r\n\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n      } else {\r\n        var email = user.email;\r\n        console.log(\"Email==>\", email);\r\n        tokenModel.findOne({ 'email': email }, (err, tokenData) => {\r\n          res.json({\r\n            isError: false,\r\n            data: { user: user, tokenData: tokenData }\r\n          });\r\n        }).sort({ _id: -1 }).limit(1)\r\n\r\n      }\r\n    });\r\n  },\r\n\r\n\r\n  getOne: (req, res, next) => {\r\n    // console.log(\"------------\",next);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    usersModel.findOne({\r\n      'email': decoded.email\r\n    }, (err, user) => {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n      } else {\r\n        res.json({\r\n          isError: false,\r\n          data: user\r\n        });\r\n      }\r\n    });\r\n  },\r\n\r\n  create: (req, res, next) => {\r\n    usersModel.create(req.body, function(err, user) {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    // var id = mongoose.Types.ObjectId(req.body.id);\r\n    usersModel.findOneAndUpdate({\r\n      '_id': req.body.id\r\n    }, req.body, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    });\r\n  },\r\n\r\n  delete: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, {\r\n      isActive: 'inactive'\r\n    }, (err, ok) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      else {\r\n        res.json({\r\n          isError: true,\r\n          data: true\r\n        })\r\n      }\r\n    });\r\n  },\r\n  forgetPassword: (req, res, next) => {\r\n    var email = req.body.email;\r\n    var host = req.headers.host;\r\n    console.log(\"req.domain=>\", req.headers.host);\r\n    console.log(\"email\", email);\r\n    usersModel.find({\r\n      'email': req.body.email\r\n    }, function(err, result) {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        })\r\n      } else {\r\n        if (result != \"\") {\r\n          var d = new Date();\r\n          var v = new Date();\r\n          v.setMinutes(d.getMinutes() + 30);\r\n          const token = jwt.sign({\r\n            exp: Math.floor(v),\r\n            email: req.body.email,\r\n          }, env.App_key);\r\n          console.log(result);\r\n          nodemailer.createTestAccount((err, account) => {\r\n            // create reusable transporter object using the default SMTP transport\r\n            var transporter = nodemailer.createTransport({\r\n              service: 'gmail',\r\n              auth: {\r\n                user: 'itstechinvento@gmail.com',\r\n                pass: 'techinvento123'\r\n              }\r\n            });\r\n\r\n            // setup email data with unicode symbols\r\n            let mailOptions = {\r\n              from: 'itstechinvento@gmail.com', // sender address\r\n              to: email, // list of receivers\r\n              subject: 'Change Password', // Subject line\r\n              text: 'Please Click below link to change password', // plain text body\r\n              html: '<a href=http://' + host + '/recover?accessToken=' + token + '>Click to recover password</a>' // html body\r\n\r\n              // html: '<a href=http://localhost:3000/recover?accessToken=' + token + '>Click to recover password</a>' // html body\r\n            };\r\n            console.log(\"Mailoptions\", mailOptions);\r\n\r\n            // send mail with defined transport object\r\n            transporter.sendMail(mailOptions, (error, info) => {\r\n              var information = JSON.stringify(info);\r\n\r\n              console.log('Transporter', err, information);\r\n              mail_responseModel.create({\r\n                'email': email,\r\n                'error': error,\r\n                'info': information\r\n              }, function(err, mail_response) {\r\n                if (err) {\r\n                  console.log(\"mail_responseModel error=>\", err);\r\n                } else {\r\n                  console.log(\"mail_responseModel No error\", mail_response);\r\n                }\r\n              })\r\n\r\n\r\n              if (error) {\r\n                return console.log(\"error--11--\", error);\r\n                res.json({\r\n                  isError: true,\r\n                  data: error\r\n                });\r\n              } else {\r\n                console.log('Message sent: %s', info.messageId);\r\n                console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\r\n                res.json({\r\n                  isError: false,\r\n                  data: 'Please check your Email'\r\n                });\r\n\r\n              }\r\n\r\n              // Preview only available when sending through an Ethereal account\r\n              // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>\r\n              // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...\r\n            });\r\n\r\n            // res.json({ isError: false, data: 'Please check your Email' });\r\n\r\n            //    res.json(mailOptions);\r\n          });\r\n        } else {\r\n          res.json({\r\n            isError: true,\r\n            data: 'please provide a valid mail'\r\n          });\r\n        }\r\n      }\r\n    })\r\n  },\r\n\r\n  storeBasicUserInfo: (req, res, next) => {\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    var id = req.body.id;\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, {\r\n      'basicInfo': req.body\r\n    }, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    });\r\n  },\r\n\r\n\r\n  isVerified: (req, res, next) => {\r\n    var decoded = jwt.verify(req.query.token, env.App_key);\r\n    usersModel.findOneAndUpdate({\r\n      'email': decoded.email\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      });\r\n    });\r\n\r\n  },\r\n\r\n  emailVerification: (req, res, next) => {\r\n    console.log(\"Email Verification=>\", req.body, req.params, req.query);\r\n    var email = req.body.email;\r\n    var host = req.headers.host;\r\n\r\n    usersModel.find({\r\n      'email': req.body.email\r\n    }, function(err, result) {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        })\r\n      } else {\r\n        if (result != \"\") {\r\n          var d = new Date();\r\n          var v = new Date();\r\n          v.setMinutes(d.getMinutes() + 30);\r\n          const token = jwt.sign({\r\n            exp: Math.floor(v),\r\n            email: req.body.email,\r\n          }, env.App_key);\r\n          console.log(result);\r\n          nodemailer.createTestAccount((err, account) => {\r\n            // create reusable transporter object using the default SMTP transport\r\n            var transporter = nodemailer.createTransport({\r\n              service: 'gmail',\r\n              auth: {\r\n                user: 'itstechinvento@gmail.com',\r\n                pass: 'techinvento123'\r\n              }\r\n            });\r\n            let mailOptions = {\r\n              from: 'itstechinvento@gmail.com', // sender address\r\n              to: email, // list of receivers\r\n              subject: 'Email Verification', // Subject line\r\n              text: 'Please Click below link to Verify Your Email address', // plain text body\r\n              html: 'Please<a href=http://' + host + '/ev/' + token + '>Click Here to processed email verification</a>' // html body\r\n            };\r\n            transporter.sendMail(mailOptions, (error, info) => {\r\n\r\n              mail_responseModel.create({\r\n                'email': email,\r\n                'error': error,\r\n                'info': info\r\n              }, function(err, mail_response) {\r\n                if (err) {\r\n                  console.log(\"mail_responseModel error=>\", err);\r\n                } else {\r\n                  console.log(\"mail_responseModel \", mail_response);\r\n                }\r\n              })\r\n              if (error) {\r\n                res.json({\r\n                  isError: true,\r\n                  data: error\r\n                });\r\n                return console.log(\"error--11--\", error);\r\n              } else {\r\n                console.log('Message sent: %s', info.messageId);\r\n                console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\r\n                res.json({\r\n                  isError: false,\r\n                  data: 'Please check your email'\r\n                });\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          res.json({\r\n            isError: true,\r\n            data: 'please provide a valid mail'\r\n          });\r\n        }\r\n      }\r\n    })\r\n  },\r\n\r\n  emailVerified: (req, res, next) => {\r\n    var decoded = jwt.verify(req.params.token, env.App_key);\r\n    var dt = new Date();\r\n    var checkDate = new Date(decoded.exp);\r\n    if (dt < checkDate) {\r\n      console.log(\"----------\");\r\n      usersModel.findOneAndUpdate({\r\n        \"email\": decoded.email\r\n      }, {\r\n        $set: {\r\n          \"verification.email_verified\": true\r\n        }\r\n      }, (err, user) => {\r\n        if (err) return res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n        //  res.redirect('/#/profile');\r\n        res.send('verified')\r\n          //res.json({ isError: false, data: \"your E-Mail address is verified sucessfully\" });\r\n\r\n      });\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"session expire\"\r\n      });\r\n    }\r\n  },\r\n\r\n  varifyToken: (req, res, next) => {\r\n    console.log(\"in verify Token=>\");\r\n    var decoded = jwt.verify(req.params.token, env.App_key);\r\n    var dt = new Date();\r\n    var checkDate = new Date(decoded.exp);\r\n    if (dt < checkDate) {\r\n      console.log(\"----\");\r\n      var d = new Date();\r\n      var v = new Date();\r\n      v.setMinutes(d.getMinutes() + 60);\r\n      const token = jwt.sign({\r\n        exp: Math.floor(v),\r\n        email: decoded.email,\r\n      }, env.App_key);\r\n      res.redirect('/recover/' + token)\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"session expire\"\r\n      });\r\n    }\r\n  },\r\n  changePassword: (req, res, next) => {\r\n    // console.log(\"req.headers--->\", req.headers['authorization'], req.body);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    req.body.password = encode().value(req.body.password);\r\n    req.body.new_pasword = encode().value(req.body.new_pasword);\r\n    usersModel.findOneAndUpdate({\r\n      $and: [{\r\n        \"password\": req.body.password\r\n      }, {\r\n        \"email\": decoded.email\r\n      }]\r\n    }, {\r\n      $set: {\r\n        \"password\": req.body.new_pasword,\r\n      }\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      });\r\n      console.log(\"user=>\", user);\r\n    })\r\n  },\r\n  recoverPassword: (req, res, next) => {\r\n    console.log(\"req in recover password api=>\", req.body, req.query, req.params);\r\n    var decoded = jwt.verify(req.headers['authorization'], env.App_key);\r\n    if (req.body.password != \"\" && req.body.password.length > 6) {\r\n      req.body.password = encode().value(req.body.password);\r\n      var checkDate = new Date(decoded.exp);\r\n      var dt = new Date();\r\n      console.log(dt, \"------\", checkDate);\r\n      if (dt < checkDate) {\r\n        usersModel.findOneAndUpdate({\r\n          \"email\": decoded.email\r\n        }, {\r\n          $set: {\r\n            \"password\": req.body.password\r\n          }\r\n        }, (err, user) => {\r\n          if (err) return res.json(err);\r\n          res.json({\r\n            isError: false,\r\n            data: user\r\n          });\r\n        });\r\n      } else {\r\n        res.json({\r\n          isError: true,\r\n          data: \"session expire\"\r\n        });\r\n      }\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"Please provide valid password\"\r\n      });\r\n    }\r\n\r\n  },\r\n  changeEmail: (req, res, next) => {\r\n    if (req.body.new_email) {\r\n      req.body.password = encode().value(req.body.old_password);\r\n      usersModel.findOneAndUpdate({\r\n        $and: [{\r\n          \"password\": req.body.password\r\n        }, {\r\n          \"email\": req.body.email\r\n        }]\r\n      }, {\r\n        $set: {\r\n          \"email\": req.body.new_email,\r\n        }\r\n      }, (err, user) => {\r\n        if (err) return res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n        res.json({\r\n          isError: false,\r\n          data: user\r\n        });\r\n      })\r\n    } else {\r\n      res.json({\r\n        isError: true,\r\n        data: \"NULL\"\r\n      });\r\n    }\r\n  },\r\n\r\n\r\n};\r\n\r\n\r\nexport default usersController;"]}
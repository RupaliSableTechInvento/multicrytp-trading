{"version":3,"sources":["../../src/controller/usersController.js"],"names":["mongoose","require","usersController","getAll","req","res","next","find","err","users","json","getOne","console","log","findById","params","id","user","create","body","update","findOneAndUpdate","new","delete","remove","_id","ok","changePassword","$and","password","email","$set","new_password","changeEmail","new_email"],"mappings":"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","file":"usersController.js","sourcesContent":["import usersModel from '../models/usersModel'\nimport postatrade from '../models/postatrade'\nvar mongoose = require('mongoose');\nconst usersController = {\n\n    getAll: async (req, res, next) => {\n        usersModel.find({}, (err, users) => {\n            if (err) return res.json(err);\n            res.json(users);\n        });\n    },\n\n    getOne: (req, res, next) => {\n      console.log(\"------------\");\n        usersModel.findById(req.params.id, (err, user) => {\n            res.json(user || {});\n        });\n    },\n\n    create: (req, res, next) => {\n        usersModel.create(req.body, function (err, user) {\n            if (err) return res.json(err);\n            res.json(user)\n        })\n    },\n\n    update: (req, res, next) => {\n      // var id = mongoose.Types.ObjectId(req.body.id);\n        usersModel.findOneAndUpdate({'_id':req.body.id}, req.body, {new: true}, (err, user) => {\n            if (err) return res.json(err);\n            res.json(user)\n        });\n    },\n\n    delete: (req, res, next) => {\n        usersModel.remove({_id: req.params.id}, (err, ok) => {\n            if (err) return res.json(err);\n        });\n        res.json(true)\n    },\n    changePassword:(req, res, next) => {\n      usersModel.findOneAndUpdate({ $and: [ { \"password\": req.body.password }, { \"email\": req.body.email } ] },{\n        $set:{\"password\":req.body.new_password}\n      },(err, user) => {\n        if (err) return res.json(err);\n        res.json(user);\n      })\n    },\n    changeEmail:(req, res, next) => {\n      if (req.body.new_email) {\n        usersModel.findOneAndUpdate({ $and: [ { \"password\": req.body.password }, { \"email\": req.body.email } ] },{\n          $set:{\"email\":req.body.new_email}\n        },(err, user) => {\n          if (err) return res.json(err);\n          res.json(user);\n        })\n      }\n      else{\n          res.json(\"NULL\");\n      }\n    }\n};\n\nexport default usersController;\n"]}
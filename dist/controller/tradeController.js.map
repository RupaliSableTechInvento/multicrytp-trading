{"version":3,"sources":["../../src/controller/tradeController.js"],"names":["mongoose","require","tradeController","getAll","req","res","next","find","err","trade","json","isError","data","getQuickByCryptocurrency","console","log","request","query","perpage","pagination","page","skip","cryptoCurrency","location","tradeMethod","traderType","payment_method","currency","count","pages","total","sort","field","meta","limit","parseInt","getByCurrencyLoc","getOne","body","params","findById","id","create","user","_id","first_name","userObj","firstName","tradeInfo","findOneAndUpdate","user_id","UpdateUser","update","new","delete","remove","ok","Types","ObjectId"],"mappings":"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","file":"tradeController.js","sourcesContent":["import postatrade from '../models/postatrade'\r\nimport tradeMoreInfo from '../models/tradeMoreInfo'\r\nimport usersModel from '../models/usersModel'\r\nimport async from 'async';\r\n\r\nvar mongoose = require('mongoose');\r\n\r\n\r\nconst tradeController = {\r\n\r\n  getAll: async(req, res, next) => {\r\n    postatrade.find({}, (err, trade) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({ isError: false, data: trade });\r\n    });\r\n  },\r\n\r\n  getQuickByCryptocurrency: async(req, res, next) => {\r\n    console.log(\"quickBUY/SELL\");\r\n    var request = req.query.query;\r\n    var perpage = req.query.pagination.perpage;\r\n    var page = req.query.pagination.page;\r\n    var skip = 0;\r\n    if (page > 1) {\r\n      skip = perpage * (page - 1);\r\n      console.log(\"perpage page skip=>\", perpage, page, skip);\r\n    }\r\n    var cryptoCurrency = req.query.query.cryptoCurrency;\r\n    var location = req.query.query.location;\r\n    var tradeMethod = req.query.query.tradeMethod;\r\n    var traderType = req.query.query.traderType;\r\n    var payment_method = req.query.query.payment_method;\r\n    var currency = req.query.query.currency;\r\n    // 'more_information.currency': currency,\r\n    console.log(\"trader type=>\", traderType);\r\n\r\n    postatrade.find({\r\n      cryptoCurrency: cryptoCurrency,\r\n      location: location,\r\n      tradeMethod: tradeMethod,\r\n      traderType: traderType,\r\n      'more_information.currency': currency,\r\n\r\n      payment_method: payment_method\r\n    }, async(err, trade) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({\r\n        isError: false,\r\n        meta: {\r\n          page: req.query.pagination.page,\r\n          pages: (await postatrade.find({\r\n            cryptoCurrency: cryptoCurrency,\r\n            location: location,\r\n            tradeMethod: tradeMethod,\r\n            traderType: traderType,\r\n            'more_information.currency': currency,\r\n\r\n            payment_method: payment_method\r\n\r\n          }).count() / (10)),\r\n          perpage: req.query.pagination.perpage,\r\n          total: await postatrade.find({\r\n            cryptoCurrency: cryptoCurrency,\r\n            location: location,\r\n            tradeMethod: tradeMethod,\r\n            traderType: traderType,\r\n            'more_information.currency': currency,\r\n\r\n            // payment_method: payment_method\r\n\r\n          }).count(),\r\n          sort: \"asc\",\r\n          field: \"_id\",\r\n        },\r\n        data: trade,\r\n      }, )\r\n\r\n    }).limit(parseInt(req.query.pagination.perpage) || 10).skip(skip || '')\r\n  },\r\n\r\n  getByCurrencyLoc: async(req, res, next) => {\r\n    var request = req.query.query;\r\n    var perpage = req.query.pagination.perpage;\r\n    var page = req.query.pagination.page;\r\n    var skip = 0;\r\n    if (page > 1) {\r\n      skip = perpage * (page - 1);\r\n      console.log(\"perpage page skip=>\", perpage, page, skip);\r\n    }\r\n    var cryptoCurrency = req.query.query.cryptoCurrency;\r\n    var location = req.query.query.location;\r\n    var tradeMethod = req.query.query.tradeMethod;\r\n    var traderType = req.query.query.traderType;\r\n\r\n    postatrade.find({\r\n      cryptoCurrency: cryptoCurrency,\r\n      location: location,\r\n      tradeMethod: tradeMethod,\r\n      traderType: traderType,\r\n    }, async(err, trade) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({\r\n        isError: false,\r\n        meta: {\r\n          page: req.query.pagination.page,\r\n          pages: (await postatrade.find({\r\n            cryptoCurrency: cryptoCurrency,\r\n            location: location,\r\n            tradeMethod: tradeMethod,\r\n            traderType: traderType,\r\n          }).count() / (10)),\r\n          perpage: req.query.pagination.perpage,\r\n          total: await postatrade.find({\r\n            cryptoCurrency: cryptoCurrency,\r\n            location: location,\r\n            tradeMethod: tradeMethod,\r\n            traderType: traderType,\r\n          }).count(),\r\n          sort: \"asc\",\r\n          field: \"_id\",\r\n        },\r\n        data: trade,\r\n      }, )\r\n\r\n    }).limit(parseInt(req.query.pagination.perpage) || 10).skip(skip || '')\r\n  },\r\n  getOne: (req, res, next) => {\r\n    console.log(\"req=> for get One tradeController\", req.body, req.params, req.query);\r\n    postatrade.findById(req.query.id, (err, trade) => {\r\n      if (err) {\r\n        res.json({ isError: true, data: err });\r\n      }\r\n      res.json({ isError: false, data: trade });\r\n    });\r\n  },\r\n\r\n  create: async(req, res, next) => {\r\n\r\n    var params = req.body;\r\n\r\n    var userObj = await usersModel.find({ '_id': req.body.user }, { _id: 0, first_name: 1 });\r\n\r\n    /*  params.firstName = await usersModel.findOne({ '_id': req.body.user }, { _id: 0, first_name: 1 }, (err, user) => {\r\n       if (err) {\r\n         res.json({ isError: true, data: err });\r\n       } else { res.json({ isError: false, data: user }); }\r\n     }); */\r\n    params.firstName = userObj[0].first_name;\r\n    console.log(\"params in posrt trade=>>\", params);\r\n\r\n    postatrade.create(params, function(err, trade) {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      else {\r\n        tradeMoreInfo.create({ 'trade_id': trade._id, 'user_id': trade.user }, function(err, tradeInfo) {\r\n          if (err) return res.json({ isError: true, data: err });\r\n          else {\r\n            usersModel.findOneAndUpdate({ '_id': tradeInfo.user_id }, { \"trade_info\": tradeInfo._id }, function(err, UpdateUser) {\r\n              if (err) return res.json({ isError: true, data: err });\r\n              res.json({ isError: false, data: UpdateUser })\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    postatrade.findOneAndUpdate(req.params.id, req.body, { new: true }, (err, trade) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({ isError: false, data: trade })\r\n    });\r\n  },\r\n\r\n  delete: (req, res, next) => {\r\n    postatrade.remove({ _id: req.params.id }, (err, ok) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n    });\r\n    res.json({ isError: false, data: true })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    var id = mongoose.Types.ObjectId(req.body.id);\r\n    postatrade.findOneAndUpdate({ '_id': id }, req.body, { new: true }, (err, user) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({ isError: false, data: user })\r\n    });\r\n  },\r\n};\r\n\r\nexport default tradeController;"]}
{"version":3,"sources":["../../src/controller/tradeController.js"],"names":["mongoose","require","tradeController","getAll","req","res","next","find","err","trade","json","isError","data","getByCurrencyLoc","cryptocurrency","query","currency","location","tradeMethod","traderType","tradeArr","i","length","console","log","user","push","getOne","findById","params","id","create","body","_id","first_name","userObj","firstName","tradeInfo","findOneAndUpdate","user_id","UpdateUser","update","new","delete","remove","ok","Types","ObjectId"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAEA,IAAIA,WAAWC,QAAQ,UAAR,CAAf;;AAEA,IAAMC;;AAEJC;AAAA,uEAAQ,iBAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AACN,mCAAWC,IAAX,CAAgB,EAAhB,EAAoB,UAACC,GAAD,EAAMC,KAAN,EAAgB;AAClC,oBAAID,GAAJ,EAAS,OAAOH,IAAIK,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMJ,GAAvB,EAAT,CAAP;AACTH,oBAAIK,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,MAAMH,KAAxB,EAAT;AACD,eAHD;;AADM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,KAFI;;AASJI;AAAA,wEAAkB,kBAAMT,GAAN,EAAWC,GAAX,EAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAChB;AACIQ,4BAFY,GAEKV,IAAIW,KAAJ,CAAUC,QAFf;AAGZC,sBAHY,GAGDb,IAAIW,KAAJ,CAAUE,QAHT;AAIZC,yBAJY,GAIEd,IAAIW,KAAJ,CAAUG,WAJZ;AAKZC,wBALY,GAKCf,IAAIW,KAAJ,CAAUI,UALX;;AAOhB;AACA;AACA;;AACA,mCAAWZ,IAAX,CAAgB;AACd,kCAAkBH,IAAIW,KAAJ,CAAUC,QADd;AAEd,4BAAYZ,IAAIW,KAAJ,CAAUE,QAFR;AAGd,8BAAcb,IAAIW,KAAJ,CAAUI,UAHV;AAId,+BAAef,IAAIW,KAAJ,CAAUG;AAJX,eAAhB,EAKG,UAACV,GAAD,EAAMC,KAAN,EAAgB;AACjB,oBAAID,GAAJ,EAAS,OAAOH,IAAIK,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMJ,GAAvB,EAAT,CAAP;AACT;AACA;AACA;AACA,oBAAIY,WAAW,EAAf;;AAEA,qBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIZ,MAAMa,MAA1B,EAAkCD,GAAlC,EAAuC;;AAErCE,0BAAQC,GAAR,CAAY,aAAZ,EAA2BH,CAA3B;AACE;AACA;AACA;AACA;AACA;AACFZ,wBAAMY,CAAN,EAASI,IAAT,GAAgB,EAAhB;;AAEAL,2BAASM,IAAT,CAAcjB,MAAMY,CAAN,CAAd;AACE;AACA;AACA;;AAEF;AACD;AACDhB,oBAAIK,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,MAAMQ,QAAxB,EAAT;;AAMA;AACD,eApCD;;AAVgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAAA;AAAA;AAAA;AAAA,KATI;;AA8DJO,UAAQ,gBAACvB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B,yBAAWsB,QAAX,CAAoBxB,IAAIyB,MAAJ,CAAWC,EAA/B,EAAmC,UAACtB,GAAD,EAAMC,KAAN,EAAgB;AACjD,UAAID,GAAJ,EAAS;;AAEPH,YAAIK,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMJ,GAAvB,EAAT;AACD;AACDH,UAAIK,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,MAAMH,KAAxB,EAAT;AACD,KAND;AAOD,GAtEG;;AAwEJsB;AAAA,wEAAQ,kBAAM3B,GAAN,EAAWC,GAAX,EAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEFuB,oBAFE,GAEOzB,IAAI4B,IAFX;AAAA;AAAA,qBAIc,qBAAWzB,IAAX,CAAgB,EAAE,OAAOH,IAAI4B,IAAJ,CAASP,IAAlB,EAAhB,EAA0C,EAAEQ,KAAK,CAAP,EAAUC,YAAY,CAAtB,EAA1C,CAJd;;AAAA;AAIFC,qBAJE;;;AAMN;;;;;AAKAN,qBAAOO,SAAP,GAAmBD,QAAQ,CAAR,EAAWD,UAA9B;AACAX,sBAAQC,GAAR,CAAY,eAAZ,EAA6BK,OAAOO,SAApC;;AAEA,mCAAWL,MAAX,CAAkBF,MAAlB,EAA0B,UAASrB,GAAT,EAAcC,KAAd,EAAqB;AAC7C,oBAAID,GAAJ,EAAS,OAAOH,IAAIK,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMJ,GAAvB,EAAT,CAAP,CAAT,KACK;AACH,0CAAcuB,MAAd,CAAqB,EAAE,YAAYtB,MAAMwB,GAApB,EAAyB,WAAWxB,MAAMgB,IAA1C,EAArB,EAAuE,UAASjB,GAAT,EAAc6B,SAAd,EAAyB;AAC9F,wBAAI7B,GAAJ,EAAS,OAAOH,IAAIK,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMJ,GAAvB,EAAT,CAAP,CAAT,KACK;AACH,2CAAW8B,gBAAX,CAA4B,EAAE,OAAOD,UAAUE,OAAnB,EAA5B,EAA0D,EAAE,cAAcF,UAAUJ,GAA1B,EAA1D,EAA2F,UAASzB,GAAT,EAAcgC,UAAd,EAA0B;AACnH,4BAAIhC,GAAJ,EAAS,OAAOH,IAAIK,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMJ,GAAvB,EAAT,CAAP;AACTH,4BAAIK,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,MAAM4B,UAAxB,EAAT;AACD,uBAHD;AAID;AACF,mBARD;AASD;AACF,eAbD;;AAdM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,KAxEI;;AAsGJC,UAAQ,gBAACrC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B,yBAAWgC,gBAAX,CAA4BlC,IAAIyB,MAAJ,CAAWC,EAAvC,EAA2C1B,IAAI4B,IAA/C,EAAqD,EAAEU,KAAK,IAAP,EAArD,EAAoE,UAAClC,GAAD,EAAMC,KAAN,EAAgB;AAClF,UAAID,GAAJ,EAAS,OAAOH,IAAIK,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMJ,GAAvB,EAAT,CAAP;AACTH,UAAIK,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,MAAMH,KAAxB,EAAT;AACD,KAHD;AAID,GA3GG;;AA6GJkC,UAAQ,iBAACvC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B,yBAAWsC,MAAX,CAAkB,EAAEX,KAAK7B,IAAIyB,MAAJ,CAAWC,EAAlB,EAAlB,EAA0C,UAACtB,GAAD,EAAMqC,EAAN,EAAa;AACrD,UAAIrC,GAAJ,EAAS,OAAOH,IAAIK,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMJ,GAAvB,EAAT,CAAP;AACV,KAFD;AAGAH,QAAIK,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,MAAM,IAAxB,EAAT;AACD;;AAlHG,aAoHI,gBAACR,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B,MAAIwB,KAAK9B,SAAS8C,KAAT,CAAeC,QAAf,CAAwB3C,IAAI4B,IAAJ,CAASF,EAAjC,CAAT;AACA,uBAAWQ,gBAAX,CAA4B,EAAE,OAAOR,EAAT,EAA5B,EAA2C1B,IAAI4B,IAA/C,EAAqD,EAAEU,KAAK,IAAP,EAArD,EAAoE,UAAClC,GAAD,EAAMiB,IAAN,EAAe;AACjF,QAAIjB,GAAJ,EAAS,OAAOH,IAAIK,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMJ,GAAvB,EAAT,CAAP;AACTH,QAAIK,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,MAAMa,IAAxB,EAAT;AACD,GAHD;AAID,CA1HG,CAAN;;kBA6HevB,e","file":"tradeController.js","sourcesContent":["import postatrade from '../models/postatrade'\r\nimport tradeMoreInfo from '../models/tradeMoreInfo'\r\nimport usersModel from '../models/usersModel'\r\nimport async from 'async';\r\n\r\nvar mongoose = require('mongoose');\r\n\r\nconst tradeController = {\r\n\r\n  getAll: async(req, res, next) => {\r\n    postatrade.find({}, (err, trade) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({ isError: false, data: trade });\r\n    });\r\n  },\r\n\r\n  getByCurrencyLoc: async(req, res, next) => {\r\n    // console.log(\"req==>\", req.body, req.params, req.query);\r\n    var cryptocurrency = req.query.currency;\r\n    var location = req.query.location;\r\n    var tradeMethod = req.query.tradeMethod;\r\n    var traderType = req.query.traderType;\r\n\r\n    // console.log(\"req\", req.query);\r\n    // console.log(\"cryptocurrency in trade controller=>\", cryptocurrency);\r\n    // console.log(\"Location in trade controller=>\", location);\r\n    postatrade.find({\r\n      \"cryptoCurrency\": req.query.currency,\r\n      \"location\": req.query.location,\r\n      \"traderType\": req.query.traderType,\r\n      \"tradeMethod\": req.query.tradeMethod,\r\n    }, (err, trade) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      // console.log(\"data\", data)\r\n      //var userId = trade[0].user;\r\n      // console.log(\"trade\", trade)\r\n      var tradeArr = [];\r\n\r\n      for (var i = 0; i < trade.length; i++) {\r\n\r\n        console.log(\"trade array\", i)\r\n          // var userId = 'user' in item ? item.user : '';\r\n          // console.log(\"uer id=>\", userId)\r\n          // const userData = await usersModel.findOne({ '_id': trade[i].user });\r\n          // item.user = userData;\r\n          // item.userInfo = userData;\r\n        trade[i].user = \"\";\r\n\r\n        tradeArr.push(trade[i])\r\n          // res.json({ isError: false, data: tradeArr })\r\n          // console.log(\"trade item\", index, trade.length)\r\n          // if (index + 1 == trade.length) {\r\n\r\n        // }\r\n      };\r\n      res.json({ isError: false, data: tradeArr })\r\n\r\n\r\n\r\n\r\n\r\n      // res.json({ isError: false, data: trade });\r\n    });\r\n\r\n\r\n\r\n\r\n  },\r\n\r\n  getOne: (req, res, next) => {\r\n    postatrade.findById(req.params.id, (err, trade) => {\r\n      if (err) {\r\n\r\n        res.json({ isError: true, data: err });\r\n      }\r\n      res.json({ isError: false, data: trade });\r\n    });\r\n  },\r\n\r\n  create: async(req, res, next) => {\r\n\r\n    var params = req.body;\r\n\r\n    var userObj = await usersModel.find({ '_id': req.body.user }, { _id: 0, first_name: 1 });\r\n\r\n    /*  params.firstName = await usersModel.findOne({ '_id': req.body.user }, { _id: 0, first_name: 1 }, (err, user) => {\r\n       if (err) {\r\n         res.json({ isError: true, data: err });\r\n       } else { res.json({ isError: false, data: user }); }\r\n     }); */\r\n    params.firstName = userObj[0].first_name;\r\n    console.log(\"params name =\", params.firstName);\r\n\r\n    postatrade.create(params, function(err, trade) {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      else {\r\n        tradeMoreInfo.create({ 'trade_id': trade._id, 'user_id': trade.user }, function(err, tradeInfo) {\r\n          if (err) return res.json({ isError: true, data: err });\r\n          else {\r\n            usersModel.findOneAndUpdate({ '_id': tradeInfo.user_id }, { \"trade_info\": tradeInfo._id }, function(err, UpdateUser) {\r\n              if (err) return res.json({ isError: true, data: err });\r\n              res.json({ isError: false, data: UpdateUser })\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    postatrade.findOneAndUpdate(req.params.id, req.body, { new: true }, (err, trade) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({ isError: false, data: trade })\r\n    });\r\n  },\r\n\r\n  delete: (req, res, next) => {\r\n    postatrade.remove({ _id: req.params.id }, (err, ok) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n    });\r\n    res.json({ isError: false, data: true })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    var id = mongoose.Types.ObjectId(req.body.id);\r\n    postatrade.findOneAndUpdate({ '_id': id }, req.body, { new: true }, (err, user) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({ isError: false, data: user })\r\n    });\r\n  },\r\n};\r\n\r\nexport default tradeController;"]}
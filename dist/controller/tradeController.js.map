{"version":3,"sources":["../../src/controller/tradeController.js"],"names":["moment","require","mongoose","tradeController","getAll","req","res","next","find","err","trade","json","isError","data","getPriceEquation","getQuickByCryptocurrency","console","log","request","query","perpage","pagination","page","skip","amount","cryptoCurrency","location","tradeMethod","traderType","payment_method","currency","$lte","$gte","$lt","$gt","count","pages","total","sort","field","meta","limit","parseInt","getByCurrencyLoc","getTrade","user","getOne","body","params","findById","id","create","_id","first_name","userObj","firstName","tradeInfo","findOneAndUpdate","user_id","UpdateUser","update","new","delete","remove","ok","Types","ObjectId"],"mappings":"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","file":"tradeController.js","sourcesContent":["import postatrade from '../models/postatrade'\r\nimport tradeMoreInfo from '../models/tradeMoreInfo'\r\nimport usersModel from '../models/usersModel'\r\nimport async from 'async'\r\nvar moment = require('moment');\r\nvar mongoose = require('mongoose');\r\n// var request = require('request');\r\n\r\nconst tradeController = {\r\n\r\n  getAll: async(req, res, next) => {\r\n    postatrade.find({}, (err, trade) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: trade\r\n      });\r\n    });\r\n  },\r\n  getPriceEquation: (req, res, next) => {\r\n    // console.log(\"Req for getPriceEquation=>\", req.query);\r\n    // var dataObj = req.query.dataObj;\r\n    // var much = 100;\r\n    // var url = 'http://www.xe.com/currencyconverter/convert/?Amount=' + much + '&From=' + dataObj.from + '&To=' + dataObj.to;\r\n\r\n    // console.log(\"url==>\", url);\r\n    // request(url, function(err, resp, body) {\r\n    //   // body = JSON.parse(body);\r\n    //   console.log(\" response for getPriceEquation==>\", body)\r\n    //     // logic used to compare search results with the input from user\r\n    //   if (!body.query.results.RDF.item) {\r\n    //     craig = \"No results found. Try again.\";\r\n    //   } else {\r\n    //     craig = body.query.results.RDF.item[0]['about'];\r\n    //     console.log(\"in else==>craig\", craig);\r\n    //   }\r\n    // });\r\n    // $.ajax({\r\n    //   url: 'http://www.xe.com/currencyconverter/convert/?Amount=' + much + '&From=' + dataObj.from + '&To=' + dataObj.to,\r\n    //   // url: 'https://api.cryptonator.com/api/ticker/' + dataObj.from + '-' + dataObj.to,\r\n    //   type: \"get\",\r\n    //   success: function(successData) {\r\n    //     console.log(\"sucesss data in price equation in api.js=> \", successData);\r\n    //     // resolve(successData)\r\n    //   },\r\n    //   error: function(err) {\r\n    //     alert(err);\r\n    //   }\r\n    // })\r\n\r\n  },\r\n\r\n  getQuickByCryptocurrency: async(req, res, next) => {\r\n    console.log(\"quickBUY/SELL\");\r\n    var request = req.query.query;\r\n    var perpage = req.query.pagination.perpage;\r\n    var page = req.query.pagination.page;\r\n    var skip = 0;\r\n    if (page > 1) {\r\n      skip = perpage * (page - 1);\r\n      console.log(\"perpage page skip=>\", perpage, page, skip);\r\n    }\r\n    var amount = req.query.query.amount;\r\n    var cryptoCurrency = req.query.query.cryptoCurrency;\r\n    var location = req.query.query.location;\r\n    var tradeMethod = req.query.query.tradeMethod;\r\n    var traderType = req.query.query.traderType;\r\n    var payment_method = req.query.query.payment_method;\r\n    var currency = req.query.query.currency;\r\n    // 'more_information.currency': currency,\r\n    console.log(\"trader type   amount=>>\", traderType, amount);\r\n\r\n    postatrade.find({\r\n      cryptoCurrency: cryptoCurrency,\r\n      location: location,\r\n      tradeMethod: tradeMethod,\r\n      traderType: traderType,\r\n      'more_information.min_trans_limit': {\r\n        $lte: amount\r\n      },\r\n      'more_information.max_trans_limit': {\r\n        $gte: amount\r\n      },\r\n      'more_information.currency': currency,\r\n      payment_method: payment_method\r\n    }, async(err, trade) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        meta: {\r\n          page: req.query.pagination.page,\r\n          pages: (await postatrade.find({\r\n            cryptoCurrency: cryptoCurrency,\r\n            location: location,\r\n            tradeMethod: tradeMethod,\r\n            traderType: traderType,\r\n            'more_information.min_trans_limit': {\r\n              $lt: amount\r\n            },\r\n            'more_information.max_trans_limit': {\r\n              $gt: amount\r\n            },\r\n            'more_information.currency': currency,\r\n            'payment_method': payment_method\r\n\r\n          }).count() / (10)),\r\n          perpage: req.query.pagination.perpage,\r\n          total: await postatrade.find({\r\n            cryptoCurrency: cryptoCurrency,\r\n            location: location,\r\n            'more_information.min_trans_limit': {\r\n              $lt: amount\r\n            },\r\n            'more_information.max_trans_limit': {\r\n              $gt: amount\r\n            },\r\n            tradeMethod: tradeMethod,\r\n            traderType: traderType,\r\n            'more_information.currency': currency,\r\n\r\n            // payment_method: payment_method\r\n\r\n          }).count(),\r\n          sort: \"asc\",\r\n          field: \"_id\",\r\n        },\r\n        data: trade,\r\n      }, )\r\n\r\n    }).limit(parseInt(req.query.pagination.perpage) || 10).skip(skip || '')\r\n  },\r\n\r\n  getByCurrencyLoc: async(req, res, next) => {\r\n    var request = req.query.query;\r\n    var perpage = req.query.pagination.perpage;\r\n    var page = req.query.pagination.page;\r\n    var skip = 0;\r\n    if (page > 1) {\r\n      skip = perpage * (page - 1);\r\n      console.log(\"perpage page skip=>\", perpage, page, skip);\r\n    }\r\n    var cryptoCurrency = req.query.query.cryptoCurrency;\r\n    var location = req.query.query.location;\r\n    var tradeMethod = req.query.query.tradeMethod;\r\n    var traderType = req.query.query.traderType;\r\n\r\n    postatrade.find({\r\n      cryptoCurrency: cryptoCurrency,\r\n      // location: location,\r\n      tradeMethod: tradeMethod,\r\n      traderType: traderType,\r\n    }, async(err, trade) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        meta: {\r\n          page: req.query.pagination.page,\r\n          pages: (await postatrade.find({\r\n            cryptoCurrency: cryptoCurrency,\r\n            location: location,\r\n            tradeMethod: tradeMethod,\r\n            traderType: traderType,\r\n          }).count() / (10)),\r\n          perpage: req.query.pagination.perpage,\r\n          total: await postatrade.find({\r\n            cryptoCurrency: cryptoCurrency,\r\n            location: location,\r\n            tradeMethod: tradeMethod,\r\n            traderType: traderType,\r\n          }).count(),\r\n          sort: \"asc\",\r\n          field: \"_id\",\r\n        },\r\n        data: trade,\r\n      }, )\r\n\r\n    }).limit(parseInt(req.query.pagination.perpage) || 10).skip(skip || '')\r\n  },\r\n\r\n\r\n\r\n  getTrade: async(req, res, next) => {\r\n    var request = req.query.query;\r\n    var perpage = req.query.pagination.perpage;\r\n    var page = req.query.pagination.page;\r\n    var skip = 0;\r\n    if (page > 1) {\r\n      skip = perpage * (page - 1);\r\n      console.log(\"perpage page skip=>\", perpage, page, skip);\r\n\r\n    }\r\n    var user = req.query.query.user;\r\n    // var cryptoCurrency = req.query.query.cryptoCurrency;\r\n    // var location = req.query.query.location;\r\n    // var tradeMethod = req.query.query.tradeMethod;\r\n    // var traderType = req.query.query.traderType;\r\n\r\n    postatrade.find({\r\n      user: user\r\n\r\n    }, async(err, trade) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        meta: {\r\n          page: req.query.pagination.page,\r\n          pages: (await postatrade.find({\r\n            user: user\r\n\r\n          }).count() / (10)),\r\n          perpage: req.query.pagination.perpage,\r\n          total: await postatrade.find({\r\n            user: user\r\n\r\n          }).count(),\r\n          sort: \"asc\",\r\n          field: \"_id\",\r\n        },\r\n        data: trade,\r\n      }, )\r\n\r\n    }).limit(parseInt(req.query.pagination.perpage) || 10).skip(skip || '')\r\n  },\r\n\r\n\r\n  getOne: (req, res, next) => {\r\n    console.log(\"req=> for get One tradeController\", req.body, req.params, req.query);\r\n    postatrade.findById(req.query.id, (err, trade) => {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n      }\r\n      res.json({\r\n        isError: false,\r\n        data: trade\r\n      });\r\n    });\r\n  },\r\n\r\n  create: async(req, res, next) => {\r\n\r\n    var params = req.body;\r\n\r\n    var userObj = await usersModel.find({\r\n      '_id': req.body.user\r\n    }, {\r\n      _id: 0,\r\n      first_name: 1\r\n    });\r\n\r\n    /*  params.firstName = await usersModel.findOne({ '_id': req.body.user }, { _id: 0, first_name: 1 }, (err, user) => {\r\n       if (err) {\r\n         res.json({ isError: true, data: err });\r\n       } else { res.json({ isError: false, data: user }); }\r\n     }); */\r\n    params.firstName = userObj[0].first_name;\r\n    console.log(\"params in posrt trade=>>\", params);\r\n\r\n    postatrade.create(params, function(err, trade) {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      else {\r\n        tradeMoreInfo.create({\r\n          'trade_id': trade._id,\r\n          'user_id': trade.user\r\n        }, function(err, tradeInfo) {\r\n          if (err) return res.json({\r\n            isError: true,\r\n            data: err\r\n          });\r\n          else {\r\n            usersModel.findOneAndUpdate({\r\n              '_id': tradeInfo.user_id\r\n            }, {\r\n              \"trade_info\": tradeInfo._id\r\n            }, function(err, UpdateUser) {\r\n              if (err) return res.json({\r\n                isError: true,\r\n                data: err\r\n              });\r\n              res.json({\r\n                isError: false,\r\n                data: UpdateUser\r\n              })\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    postatrade.findOneAndUpdate(req.params.id, req.body, {\r\n      new: true\r\n    }, (err, trade) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: trade\r\n      })\r\n    });\r\n  },\r\n\r\n  delete: (req, res, next) => {\r\n    postatrade.remove({\r\n      _id: req.params.id\r\n    }, (err, ok) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n    });\r\n    res.json({\r\n      isError: false,\r\n      data: true\r\n    })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    var id = mongoose.Types.ObjectId(req.body.id);\r\n    postatrade.findOneAndUpdate({\r\n      '_id': id\r\n    }, req.body, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    });\r\n  },\r\n};\r\n\r\nexport default tradeController;"]}
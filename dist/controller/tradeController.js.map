{"version":3,"sources":["../../src/controller/tradeController.js"],"names":["mongoose","require","tradeController","getAll","req","res","next","find","err","trade","json","isError","data","getQuickByCryptocurrency","console","log","request","query","perpage","pagination","page","skip","amount","cryptoCurrency","location","tradeMethod","traderType","payment_method","currency","$lte","$gte","$lt","$gt","count","pages","total","sort","field","meta","limit","parseInt","getByCurrencyLoc","getOne","body","params","findById","id","create","user","_id","first_name","userObj","firstName","tradeInfo","findOneAndUpdate","user_id","UpdateUser","update","new","delete","remove","ok","Types","ObjectId"],"mappings":"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","file":"tradeController.js","sourcesContent":["import postatrade from '../models/postatrade'\r\nimport tradeMoreInfo from '../models/tradeMoreInfo'\r\nimport usersModel from '../models/usersModel'\r\nimport async from 'async'\r\n\r\nvar mongoose = require('mongoose');\r\n\r\n\r\nconst tradeController = {\r\n\r\n  getAll: async (req, res, next) => {\r\n    postatrade.find({}, (err, trade) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: trade\r\n      });\r\n    });\r\n  },\r\n\r\n  getQuickByCryptocurrency: async (req, res, next) => {\r\n    console.log(\"quickBUY/SELL\");\r\n    var request = req.query.query;\r\n    var perpage = req.query.pagination.perpage;\r\n    var page = req.query.pagination.page;\r\n    var skip = 0;\r\n    if (page > 1) {\r\n      skip = perpage * (page - 1);\r\n      console.log(\"perpage page skip=>\", perpage, page, skip);\r\n    }\r\n    var amount = req.query.query.amount;\r\n    var cryptoCurrency = req.query.query.cryptoCurrency;\r\n    var location = req.query.query.location;\r\n    var tradeMethod = req.query.query.tradeMethod;\r\n    var traderType = req.query.query.traderType;\r\n    var payment_method = req.query.query.payment_method;\r\n    var currency = req.query.query.currency;\r\n    // 'more_information.currency': currency,\r\n    console.log(\"trader type   amount=>>\", traderType, amount);\r\n\r\n    postatrade.find({\r\n      cryptoCurrency: cryptoCurrency,\r\n      location: location,\r\n      tradeMethod: tradeMethod,\r\n      traderType: traderType,\r\n      'more_information.min_trans_limit': {\r\n        $lte: amount\r\n      },\r\n      'more_information.max_trans_limit': {\r\n        $gte: amount\r\n      },\r\n      'more_information.currency': currency,\r\n      payment_method: payment_method\r\n    }, async (err, trade) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        meta: {\r\n          page: req.query.pagination.page,\r\n          pages: (await postatrade.find({\r\n            cryptoCurrency: cryptoCurrency,\r\n            location: location,\r\n            tradeMethod: tradeMethod,\r\n            traderType: traderType,\r\n            'more_information.min_trans_limit': {\r\n              $lt: amount\r\n            },\r\n            'more_information.max_trans_limit': {\r\n              $gt: amount\r\n            },\r\n            'more_information.currency': currency,\r\n            'payment_method': payment_method\r\n\r\n          }).count() / (10)),\r\n          perpage: req.query.pagination.perpage,\r\n          total: await postatrade.find({\r\n            cryptoCurrency: cryptoCurrency,\r\n            location: location,\r\n            'more_information.min_trans_limit': {\r\n              $lt: amount\r\n            },\r\n            'more_information.max_trans_limit': {\r\n              $gt: amount\r\n            },\r\n            tradeMethod: tradeMethod,\r\n            traderType: traderType,\r\n            'more_information.currency': currency,\r\n\r\n            // payment_method: payment_method\r\n\r\n          }).count(),\r\n          sort: \"asc\",\r\n          field: \"_id\",\r\n        },\r\n        data: trade,\r\n      }, )\r\n\r\n    }).limit(parseInt(req.query.pagination.perpage) || 10).skip(skip || '')\r\n  },\r\n\r\n  getByCurrencyLoc: async (req, res, next) => {\r\n    var request = req.query.query;\r\n    var perpage = req.query.pagination.perpage;\r\n    var page = req.query.pagination.page;\r\n    var skip = 0;\r\n    if (page > 1) {\r\n      skip = perpage * (page - 1);\r\n      console.log(\"perpage page skip=>\", perpage, page, skip);\r\n    }\r\n    var cryptoCurrency = req.query.query.cryptoCurrency;\r\n    var location = req.query.query.location;\r\n    var tradeMethod = req.query.query.tradeMethod;\r\n    var traderType = req.query.query.traderType;\r\n\r\n    postatrade.find({\r\n      cryptoCurrency: cryptoCurrency,\r\n      location: location,\r\n      tradeMethod: tradeMethod,\r\n      traderType: traderType,\r\n    }, async (err, trade) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        meta: {\r\n          page: req.query.pagination.page,\r\n          pages: (await postatrade.find({\r\n            cryptoCurrency: cryptoCurrency,\r\n            location: location,\r\n            tradeMethod: tradeMethod,\r\n            traderType: traderType,\r\n          }).count() / (10)),\r\n          perpage: req.query.pagination.perpage,\r\n          total: await postatrade.find({\r\n            cryptoCurrency: cryptoCurrency,\r\n            location: location,\r\n            tradeMethod: tradeMethod,\r\n            traderType: traderType,\r\n          }).count(),\r\n          sort: \"asc\",\r\n          field: \"_id\",\r\n        },\r\n        data: trade,\r\n      }, )\r\n\r\n    }).limit(parseInt(req.query.pagination.perpage) || 10).skip(skip || '')\r\n  },\r\n  getOne: (req, res, next) => {\r\n    console.log(\"req=> for get One tradeController\", req.body, req.params, req.query);\r\n    postatrade.findById(req.query.id, (err, trade) => {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n      }\r\n      res.json({\r\n        isError: false,\r\n        data: trade\r\n      });\r\n    });\r\n  },\r\n\r\n  create: async (req, res, next) => {\r\n\r\n    var params = req.body;\r\n\r\n    var userObj = await usersModel.find({\r\n      '_id': req.body.user\r\n    }, {\r\n      _id: 0,\r\n      first_name: 1\r\n    });\r\n\r\n    /*  params.firstName = await usersModel.findOne({ '_id': req.body.user }, { _id: 0, first_name: 1 }, (err, user) => {\r\n       if (err) {\r\n         res.json({ isError: true, data: err });\r\n       } else { res.json({ isError: false, data: user }); }\r\n     }); */\r\n    params.firstName = userObj[0].first_name;\r\n    console.log(\"params in posrt trade=>>\", params);\r\n\r\n    postatrade.create(params, function (err, trade) {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      else {\r\n        tradeMoreInfo.create({\r\n          'trade_id': trade._id,\r\n          'user_id': trade.user\r\n        }, function (err, tradeInfo) {\r\n          if (err) return res.json({\r\n            isError: true,\r\n            data: err\r\n          });\r\n          else {\r\n            usersModel.findOneAndUpdate({\r\n              '_id': tradeInfo.user_id\r\n            }, {\r\n              \"trade_info\": tradeInfo._id\r\n            }, function (err, UpdateUser) {\r\n              if (err) return res.json({\r\n                isError: true,\r\n                data: err\r\n              });\r\n              res.json({\r\n                isError: false,\r\n                data: UpdateUser\r\n              })\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    postatrade.findOneAndUpdate(req.params.id, req.body, {\r\n      new: true\r\n    }, (err, trade) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: trade\r\n      })\r\n    });\r\n  },\r\n\r\n  delete: (req, res, next) => {\r\n    postatrade.remove({\r\n      _id: req.params.id\r\n    }, (err, ok) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n    });\r\n    res.json({\r\n      isError: false,\r\n      data: true\r\n    })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    var id = mongoose.Types.ObjectId(req.body.id);\r\n    postatrade.findOneAndUpdate({\r\n      '_id': id\r\n    }, req.body, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    });\r\n  },\r\n};\r\n\r\nexport default tradeController;"]}
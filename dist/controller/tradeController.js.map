{"version":3,"sources":["../../src/controller/tradeController.js"],"names":["mongoose","require","tradeController","getAll","req","res","next","find","err","trade","json","isError","data","getQuickByCryptocurrency","console","log","request","query","perpage","pagination","page","skip","amount","cryptoCurrency","location","tradeMethod","traderType","payment_method","currency","$lte","$gte","$lt","$gt","count","pages","total","sort","field","meta","limit","parseInt","getByCurrencyLoc","getOne","body","params","findById","id","create","user","_id","first_name","userObj","firstName","tradeInfo","findOneAndUpdate","user_id","UpdateUser","update","new","delete","remove","ok","Types","ObjectId"],"mappings":"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","file":"tradeController.js","sourcesContent":["import postatrade from '../models/postatrade'\r\nimport tradeMoreInfo from '../models/tradeMoreInfo'\r\nimport usersModel from '../models/usersModel'\r\nimport async from 'async';\r\n\r\nvar mongoose = require('mongoose');\r\n\r\n\r\nconst tradeController = {\r\n\r\n  getAll: async(req, res, next) => {\r\n    postatrade.find({}, (err, trade) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({ isError: false, data: trade });\r\n    });\r\n  },\r\n\r\n  getQuickByCryptocurrency: async(req, res, next) => {\r\n    console.log(\"quickBUY/SELL\");\r\n    var request = req.query.query;\r\n    var perpage = req.query.pagination.perpage;\r\n    var page = req.query.pagination.page;\r\n    var skip = 0;\r\n    if (page > 1) {\r\n      skip = perpage * (page - 1);\r\n      console.log(\"perpage page skip=>\", perpage, page, skip);\r\n    }\r\n    var amount = req.query.query.amount;\r\n    var cryptoCurrency = req.query.query.cryptoCurrency;\r\n    var location = req.query.query.location;\r\n    var tradeMethod = req.query.query.tradeMethod;\r\n    var traderType = req.query.query.traderType;\r\n    var payment_method = req.query.query.payment_method;\r\n    var currency = req.query.query.currency;\r\n    // 'more_information.currency': currency,\r\n    console.log(\"trader type   amount=>>\", traderType, amount);\r\n\r\n    postatrade.find({\r\n      cryptoCurrency: cryptoCurrency,\r\n      location: location,\r\n      tradeMethod: tradeMethod,\r\n      traderType: traderType,\r\n      'more_information.min_trans_limit': { $lte: amount },\r\n      'more_information.max_trans_limit': { $gte: amount },\r\n      'more_information.currency': currency,\r\n      payment_method: payment_method\r\n    }, async(err, trade) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({\r\n        isError: false,\r\n        meta: {\r\n          page: req.query.pagination.page,\r\n          pages: (await postatrade.find({\r\n            cryptoCurrency: cryptoCurrency,\r\n            location: location,\r\n            tradeMethod: tradeMethod,\r\n            traderType: traderType,\r\n            'more_information.min_trans_limit': { $lt: amount },\r\n            'more_information.max_trans_limit': { $gt: amount },\r\n            'more_information.currency': currency,\r\n            payment_method: payment_method\r\n\r\n          }).count() / (10)),\r\n          perpage: req.query.pagination.perpage,\r\n          total: await postatrade.find({\r\n            cryptoCurrency: cryptoCurrency,\r\n            location: location,\r\n            'more_information.min_trans_limit': { $lt: amount },\r\n            'more_information.max_trans_limit': { $gt: amount },\r\n            tradeMethod: tradeMethod,\r\n            traderType: traderType,\r\n            'more_information.currency': currency,\r\n\r\n            // payment_method: payment_method\r\n\r\n          }).count(),\r\n          sort: \"asc\",\r\n          field: \"_id\",\r\n        },\r\n        data: trade,\r\n      }, )\r\n\r\n    }).limit(parseInt(req.query.pagination.perpage) || 10).skip(skip || '')\r\n  },\r\n\r\n  getByCurrencyLoc: async(req, res, next) => {\r\n    var request = req.query.query;\r\n    var perpage = req.query.pagination.perpage;\r\n    var page = req.query.pagination.page;\r\n    var skip = 0;\r\n    if (page > 1) {\r\n      skip = perpage * (page - 1);\r\n      console.log(\"perpage page skip=>\", perpage, page, skip);\r\n    }\r\n    var cryptoCurrency = req.query.query.cryptoCurrency;\r\n    var location = req.query.query.location;\r\n    var tradeMethod = req.query.query.tradeMethod;\r\n    var traderType = req.query.query.traderType;\r\n\r\n    postatrade.find({\r\n      cryptoCurrency: cryptoCurrency,\r\n      location: location,\r\n      tradeMethod: tradeMethod,\r\n      traderType: traderType,\r\n    }, async(err, trade) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({\r\n        isError: false,\r\n        meta: {\r\n          page: req.query.pagination.page,\r\n          pages: (await postatrade.find({\r\n            cryptoCurrency: cryptoCurrency,\r\n            location: location,\r\n            tradeMethod: tradeMethod,\r\n            traderType: traderType,\r\n          }).count() / (10)),\r\n          perpage: req.query.pagination.perpage,\r\n          total: await postatrade.find({\r\n            cryptoCurrency: cryptoCurrency,\r\n            location: location,\r\n            tradeMethod: tradeMethod,\r\n            traderType: traderType,\r\n          }).count(),\r\n          sort: \"asc\",\r\n          field: \"_id\",\r\n        },\r\n        data: trade,\r\n      }, )\r\n\r\n    }).limit(parseInt(req.query.pagination.perpage) || 10).skip(skip || '')\r\n  },\r\n  getOne: (req, res, next) => {\r\n    console.log(\"req=> for get One tradeController\", req.body, req.params, req.query);\r\n    postatrade.findById(req.query.id, (err, trade) => {\r\n      if (err) {\r\n        res.json({ isError: true, data: err });\r\n      }\r\n      res.json({ isError: false, data: trade });\r\n    });\r\n  },\r\n\r\n  create: async(req, res, next) => {\r\n\r\n    var params = req.body;\r\n\r\n    var userObj = await usersModel.find({ '_id': req.body.user }, { _id: 0, first_name: 1 });\r\n\r\n    /*  params.firstName = await usersModel.findOne({ '_id': req.body.user }, { _id: 0, first_name: 1 }, (err, user) => {\r\n       if (err) {\r\n         res.json({ isError: true, data: err });\r\n       } else { res.json({ isError: false, data: user }); }\r\n     }); */\r\n    params.firstName = userObj[0].first_name;\r\n    console.log(\"params in posrt trade=>>\", params);\r\n\r\n    postatrade.create(params, function(err, trade) {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      else {\r\n        tradeMoreInfo.create({ 'trade_id': trade._id, 'user_id': trade.user }, function(err, tradeInfo) {\r\n          if (err) return res.json({ isError: true, data: err });\r\n          else {\r\n            usersModel.findOneAndUpdate({ '_id': tradeInfo.user_id }, { \"trade_info\": tradeInfo._id }, function(err, UpdateUser) {\r\n              if (err) return res.json({ isError: true, data: err });\r\n              res.json({ isError: false, data: UpdateUser })\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    postatrade.findOneAndUpdate(req.params.id, req.body, { new: true }, (err, trade) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({ isError: false, data: trade })\r\n    });\r\n  },\r\n\r\n  delete: (req, res, next) => {\r\n    postatrade.remove({ _id: req.params.id }, (err, ok) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n    });\r\n    res.json({ isError: false, data: true })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    var id = mongoose.Types.ObjectId(req.body.id);\r\n    postatrade.findOneAndUpdate({ '_id': id }, req.body, { new: true }, (err, user) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({ isError: false, data: user })\r\n    });\r\n  },\r\n};\r\n\r\nexport default tradeController;"]}
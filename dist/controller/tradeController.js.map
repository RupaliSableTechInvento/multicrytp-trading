{"version":3,"sources":["../../src/controller/tradeController.js"],"names":["mongoose","require","tradeController","getAll","req","res","next","find","err","trade","json","isError","data","getByCurrencyLoc","request","query","cryptoCurrency","location","tradeMethod","traderType","console","log","count","getOne","findById","params","id","x","create","body","user","_id","first_name","userObj","firstName","tradeInfo","findOneAndUpdate","user_id","UpdateUser","update","new","delete","remove","ok","Types","ObjectId"],"mappings":"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","file":"tradeController.js","sourcesContent":["import postatrade from '../models/postatrade'\r\nimport tradeMoreInfo from '../models/tradeMoreInfo'\r\nimport usersModel from '../models/usersModel'\r\nimport async from 'async';\r\n\r\nvar mongoose = require('mongoose');\r\n\r\nconst tradeController = {\r\n\r\n  getAll: async(req, res, next) => {\r\n    postatrade.find({}, (err, trade) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({ isError: false, data: trade });\r\n    });\r\n  },\r\n\r\n  /*  getByCurrencyLoc: async(req, res, next) => {\r\n     var searchQ = {\r\n       cryptoCurrency: req.query.datatable.query.cryptoCurrency,\r\n       location: req.query.datatable.query.location,\r\n       tradeMethod: req.query.datatable.query.tradeMethod,\r\n       traderType: req.query.datatable.query.traderType\r\n     }\r\n     postatrade.find(searchQ).limit(parseInt(req.query.datatable.query.limit)).toArray(function(err, data) {\r\n         res.send({\r\n           isError: false,\r\n           data: { 'success': true, 'data': data },\r\n           count: postatrade.find(searchQ).count()\r\n         })\r\n       })\r\n   }, */\r\n\r\n\r\n  getByCurrencyLoc: async(req, res, next) => {\r\n\r\n    var request = req.query.query;\r\n    var cryptoCurrency = req.query.query.cryptoCurrency;\r\n    var location = req.query.query.location;\r\n    var tradeMethod = req.query.query.tradeMethod;\r\n    var traderType = req.query.query.traderType;\r\n    console.log(\"request=>\", request);\r\n    // delete request.limit;\r\n    // delete request.skip;\r\n    // var count = postatrade.find({ cryptoCurrency: 'BITCOIN' }).count();\r\n    // var count1 = count / 10;\r\n\r\n    postatrade.find({\r\n        cryptoCurrency: cryptoCurrency,\r\n        location: location,\r\n        tradeMethod: tradeMethod,\r\n        traderType: traderType,\r\n      }, async(err, trade) => {\r\n        if (err) return res.json({ isError: true, data: err });\r\n        res.json({\r\n          isError: false,\r\n          \"meta\": {\r\n            \"page\": 1,\r\n            \"pages\": 35,\r\n            \"perpage\": 10,\r\n            \"total\": await postatrade.find({\r\n              cryptoCurrency: cryptoCurrency,\r\n              location: location,\r\n              tradeMethod: tradeMethod,\r\n              traderType: traderType,\r\n            }).count(),\r\n            \"sort\": \"asc\",\r\n            \"field\": \"_id\"\r\n          },\r\n          data: trade,\r\n          //count: await postatrade.find().count()\r\n        }, )\r\n\r\n      })\r\n      //.limit(parseInt(req.query.limit) || '').skip(parseInt(req.query.skip) || 0)\r\n  },\r\n  getOne: (req, res, next) => {\r\n    postatrade.findById(req.params.id, (err, trade) => {\r\n      if (err) {\r\n        x ``\r\n        res.json({ isError: true, data: err });\r\n      }\r\n      res.json({ isError: false, data: trade });\r\n    });\r\n  },\r\n\r\n  create: async(req, res, next) => {\r\n\r\n    var params = req.body;\r\n\r\n    var userObj = await usersModel.find({ '_id': req.body.user }, { _id: 0, first_name: 1 });\r\n\r\n    /*  params.firstName = await usersModel.findOne({ '_id': req.body.user }, { _id: 0, first_name: 1 }, (err, user) => {\r\n       if (err) {\r\n         res.json({ isError: true, data: err });\r\n       } else { res.json({ isError: false, data: user }); }\r\n     }); */\r\n    params.firstName = userObj[0].first_name;\r\n    console.log(\"params name =\", params.firstName);\r\n\r\n    postatrade.create(params, function(err, trade) {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      else {\r\n        tradeMoreInfo.create({ 'trade_id': trade._id, 'user_id': trade.user }, function(err, tradeInfo) {\r\n          if (err) return res.json({ isError: true, data: err });\r\n          else {\r\n            usersModel.findOneAndUpdate({ '_id': tradeInfo.user_id }, { \"trade_info\": tradeInfo._id }, function(err, UpdateUser) {\r\n              if (err) return res.json({ isError: true, data: err });\r\n              res.json({ isError: false, data: UpdateUser })\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    postatrade.findOneAndUpdate(req.params.id, req.body, { new: true }, (err, trade) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({ isError: false, data: trade })\r\n    });\r\n  },\r\n\r\n  delete: (req, res, next) => {\r\n    postatrade.remove({ _id: req.params.id }, (err, ok) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n    });\r\n    res.json({ isError: false, data: true })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    var id = mongoose.Types.ObjectId(req.body.id);\r\n    postatrade.findOneAndUpdate({ '_id': id }, req.body, { new: true }, (err, user) => {\r\n      if (err) return res.json({ isError: true, data: err });\r\n      res.json({ isError: false, data: user })\r\n    });\r\n  },\r\n};\r\n\r\nexport default tradeController;"]}
{"version":3,"sources":["../../src/controller/inboxController.js"],"names":["mosca","require","inboxController","sendMessage","req","res","next","console","log","body","params","query"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;AAEA,IAAIA,QAAQC,QAAQ,OAAR,CAAZ;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,IAAMC,kBAAkB;AACtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCAC;AAAA,uEAAa,iBAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AACXC,sBAAQC,GAAR,CAAY,uBAAZ,EAAqCJ,IAAIK,IAAzC,EAA+CL,IAAIM,MAAnD,EAA2DN,IAAIO,KAA/D;AACE;;;;;AAFS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA;;AApCsB,CAAxB;;kBAiDeT,e;;AAGf","file":"inboxController.js","sourcesContent":["import inboxModel from './../models/inboxModel';\r\nimport tokenModel from './../models/tokenModel';\r\n\r\nvar mosca = require('mosca');\r\n/* \r\nvar ascoltatore = {\r\n  //using ascoltatore\r\n  type: 'mongo',\r\n  url: 'mongodb://admin:admin@ds111529.mlab.com:11529/heroku_1qmzqz96',\r\n  pubsubCollection: 'ascoltatori',\r\n  mongo: {}\r\n};\r\n\r\nvar settings = {\r\n  port: 1883,\r\n  backend: ascoltatore\r\n};\r\n\r\nvar server = new mosca.Server(settings);\r\n\r\nserver.on('clientConnected', function(client) {\r\n  console.log('client connected', client.id);\r\n});\r\n\r\n// fired when a message is received\r\nserver.on('published', function(packet, client) {\r\n  console.log('Published', packet.payload);\r\n});\r\n\r\nserver.on('ready', setup);\r\n\r\n// fired when the mqtt server is ready\r\nfunction setup() {\r\n  console.log('Mosca server is up and running');\r\n} */\r\n\r\n\r\n\r\n\r\nconst inboxController = {\r\n  /*   moscoServer: async() => {\r\n      client = mqtt.createClient(1883, 'localhost');\r\n      //here we start mosca\r\n      var server = new mosca.Server(settings);\r\n      server.on('ready', setup);\r\n      // fired when the mqtt server is ready\r\n      function setup() {\r\n        console.log('Mosca server is up and running')\r\n      }\r\n      // fired whena client is connected\r\n      server.on('clientConnected', function(client) {\r\n        console.log('client connected', client.id);\r\n      });\r\n      // fired when a message is received\r\n      server.on('published', function(packet, client) {\r\n        // console.log('Published : ', packet.payload);\r\n      });\r\n      // fired when a client subscribes to a topic\r\n      server.on('subscribed', function(topic, client) {\r\n        console.log('subscribed : ', topic);\r\n      });\r\n      // fired when a client subscribes to a topic\r\n      server.on('unsubscribed', function(topic, client) {\r\n        console.log('unsubscribed : ', topic);\r\n      });\r\n      // fired when a client is disconnecting\r\n      server.on('clientDisconnecting', function(client) {\r\n        console.log('clientDisconnecting : ', client.id);\r\n      });\r\n      // fired when a client is disconnected\r\n      server.on('clientDisconnected', function(client) {\r\n        console.log('clientDisconnected : ', client.id);\r\n      });\r\n    },\r\n   */\r\n  sendMessage: async(req, res, next) => {\r\n    console.log(\"get all web service=>\", req.body, req.params, req.query)\r\n      /*    usersModel.find({}, (err, users) => {\r\n           if (err) return res.json({ isError: true, data: err });\r\n           res.json({ isError: false, data: users });\r\n         }); */\r\n\r\n  },\r\n\r\n\r\n\r\n};\r\n\r\nexport default inboxController;\r\n\r\n\r\n/* \r\nvar mqtt = require('mqtt')\r\n\r\nclient = mqtt.createClient(1883, 'localhost');\r\n\r\nclient.subscribe('presence');\r\n\r\nconsole.log('Client publishing.. ');\r\nclient.publish('presence', 'Client 1 is alive.. Test Ping! ' + Date());\r\n\r\nclient.end();\r\n\r\n\r\n\r\nvar mqtt = require('mqtt')\r\n\r\nclient = mqtt.createClient(1883, 'localhost');\r\n\r\nclient.subscribe('presence');\r\n\r\nclient.on('message', function(topic, message) {\r\n  console.log(message);\r\n});\r\n\r\nconsole.log('Client started...'); */"]}
{"version":3,"sources":["../../src/controller/messagesController.js"],"names":["path","require","bodyParser","users","keys","module","exports","app","io","use","json","urlencoded","extended","email","global","friends","pending","all_friends","curentUserEmail","on","socket","console","log","id","token","decoded","verify","App_key","isEmailFound","find","item","push","socketId","forEach","findOneAndUpdate","$set","isActive","_id","err","doc","list","slice","i","status","senderEmail","to","emit","msgObj","sender","data","dataObj","date","Date","isRead","create","message","index","reciever","msg","post","req","res","setHeader","friend","models","user","body","my_handle","friend_handle","length","send","update","handle","$push","name","upsert","confirm"],"mappings":"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","file":"messagesController.js","sourcesContent":["import usersModel from '../models/usersModel'\r\nimport messagesModel from '../models/messagesModel'\r\nimport jwt from 'jsonwebtoken';\r\nimport env from \"../env\";\r\n\r\nimport { globalAgent } from 'http';\r\nvar path = require('path');\r\nvar bodyParser = require('body-parser');\r\nvar users = [];\r\nvar keys = {};\r\n\r\n\r\nmodule.exports = function(app, io) {\r\n  //console.log(\"global\");\r\n  var app = app;\r\n  var io = io;\r\n  app.use(bodyParser.json());\r\n  app.use(bodyParser.urlencoded({\r\n    extended: true\r\n  }));\r\n\r\n  var email = global.email || null;\r\n  // var email = \"sablerupali358@gmail.com\"\r\n  //console.log(\"Email id in messages Controller=>\", email);\r\n\r\n  var friends = [];\r\n  var pending = [];\r\n  var all_friends = [];\r\n  var curentUserEmail = '';\r\n\r\n  // io.sockets.on('connection', function(socket) {\r\n  io.on('connection', function(socket) {\r\n    console.log(\"On Connection=>\", socket.id);\r\n    // socket.on('private_message', function(privateMsg) {\r\n    //   //console.log(\"privateMsg1111\", privateMsg);\r\n    //   io.emit('private_message', 'hello');\r\n\r\n    // })\r\n\r\n    socket.on('getActiveList', function(token) {\r\n\r\n      //console.log(\"getActiveList=>>\", token);\r\n      var decoded = jwt.verify(token, env.App_key);\r\n      curentUserEmail = decoded.email;\r\n      const isEmailFound = users.find(item => item && item.email && item.email == curentUserEmail);\r\n      //console.log(\"isEmailFound in users\", users, isEmailFound);\r\n      if (!isEmailFound) {\r\n        users.push({\r\n            email: curentUserEmail,\r\n            socketId: socket.id\r\n          })\r\n          //console.log(\"Email Not present=>\", users, curentUserEmail);\r\n      } else {\r\n\r\n        users.forEach(item => {\r\n            if (item.email == curentUserEmail) {\r\n              item.email = curentUserEmail;\r\n              item.socketId = socket.id;\r\n\r\n            }\r\n\r\n            // item.email = curentUserEmail,\r\n            //   item.socketId = socket.id\r\n          })\r\n          //console.log(\"Email present=>\", users, curentUserEmail);\r\n      }\r\n\r\n\r\n\r\n      if (curentUserEmail) {\r\n        usersModel.findOneAndUpdate({ \"email\": curentUserEmail }, { $set: { isActive: \"active\" } }, { friends: 1, _id: 0 }, function(err, doc) {\r\n          if (err) {\r\n            //console.log(\"error in io connection.=>\", err);\r\n            // res.json(err); \r\n\r\n          } else {\r\n            friends = [];\r\n            pending = [];\r\n            all_friends = [];\r\n            // //console.log(\"friends list: \" + doc);\r\n            var list = doc.friends.slice();\r\n            //console.log(list);\r\n\r\n            for (var i in list) {\r\n              if (list[i].status == \"Friend\") {\r\n                friends.push(list[i]);\r\n                // //console.log(\"users[list[i].senderEmail]\", users, users[list[i].senderEmail]);\r\n                users.forEach(item => {\r\n                  //console.log(\"In friends Item ==>\", item);\r\n                  if (item.email && list[i].senderEmail == item.email) {\r\n                    //console.log(\"item.socketId, curentUserEmail \", item.socketId, curentUserEmail);\r\n                    io.to(item.socketId).emit('friend_me', curentUserEmail);\r\n                    io.emit('friend_all', curentUserEmail);\r\n                  }\r\n                })\r\n\r\n              } else if (list[i].status == \"Pending\") {\r\n                pending.push(list[i]);\r\n              } else {\r\n                continue;\r\n              }\r\n            }\r\n\r\n\r\n            io.to(socket.id).emit('friend_list', friends);\r\n            io.to(socket.id).emit('pending_list', pending);\r\n\r\n\r\n            //  io.emit('users', users);\r\n          }\r\n        });\r\n      }\r\n\r\n\r\n    })\r\n\r\n    // io.sockets.connected[clients[1]].emit(\"greeting\", \"Hey there, User 2\");\r\n\r\n    socket.on('private_message', function(msgObj) {\r\n      //console.log(\"private message\", msgObj);\r\n      var decoded = jwt.verify(msgObj.token, env.App_key);\r\n      var sender = decoded.email;\r\n      var data = msgObj.dataObj;\r\n      data.sender = sender;\r\n      data.date = new Date();\r\n      data.isRead = false;\r\n      //   //console.log(\"Data for message==>\", data);\r\n      messagesModel.create(data, function(err, message) {\r\n        if (err) { //console.log(\"Error in add message\", err) } else {\r\n\r\n\r\n          //   //console.log(\"In msg==> \", users, message);\r\n\r\n          users.forEach((item, index) => {\r\n            if (item && item.email == data.reciever) {\r\n              //   //console.log(\"Reciever found=>> \", item.email, data.reciever);\r\n\r\n              io.to(item.socketId).emit('Notification_for_msg', message);\r\n            }\r\n          })\r\n\r\n\r\n\r\n\r\n        }\r\n      })\r\n\r\n      // users.forEach((item, index) => {\r\n      //   if (item && item.email == data.reciever) {\r\n      //     //console.log(\"Reciever found=>> \", item.email, data.reciever);\r\n\r\n\r\n      //     io.to(item.socketId).emit('Notification_for_msg', data);\r\n      //     data.isRead = true;\r\n      //   } else {\r\n      //     data.isRead = false;\r\n      //   }\r\n      //   messagesModel.create(data, function(err, message) {\r\n      //     if (err) { //console.log(\"Error in add message\", err) } else {\r\n\r\n      //       //console.log(\"Message added.\", data);\r\n\r\n      //     }\r\n      //   })\r\n\r\n      // })\r\n\r\n\r\n\r\n\r\n    });\r\n\r\n\r\n    //console.log(\"Connection :User is connected  \", socket.id, email);\r\n\r\n    // io.to(socket.id).emit('handle', email);\r\n\r\n\r\n    // const isEmailFound = users.find(item => item && item.email && item.email == email);\r\n\r\n    // users[email] = socket.id;\r\n    keys[socket.id] = email;\r\n    //console.log(\"Users list : \" + users);\r\n    //console.log(\"keys list : \" + keys);\r\n\r\n\r\n    socket.on('group message', function(msg) {\r\n      // //console.log(msg);\r\n      io.emit('group', msg);\r\n    });\r\n\r\n\r\n\r\n    // socket.on('private_message', function(msgObj) {\r\n    //   //console.log(\"private message\", msgObj);\r\n\r\n\r\n    //   var decoded = jwt.verify(msgObj.token, env.App_key);\r\n    //   var sender = decoded.email;\r\n    //   //console.log(\"in addmessage\");\r\n    //   var data = msgObj.dataObj;\r\n    //   data.sender = sender;\r\n    //   data.date = new Date();\r\n    //   //console.log(\"Data for message==>\", data);\r\n    //   messagesModel.create(data, function(err, message) {\r\n    //     if (err) { //console.log(\"Error in add message\", err) } else {\r\n\r\n    //       //console.log(\"  message added..\", users[msgObj.dataObj.reciever]);\r\n\r\n    //       io.to(users[msgObj.dataObj.reciever]).emit('private_message', msgObj);\r\n    //     }\r\n    //   })\r\n    // });\r\n\r\n\r\n\r\n\r\n\r\n    socket.on('disconnect', function() {\r\n      console.log(\"disconned call\", socket.id);\r\n      // // var decoded = jwt.verify(token, env.App_key);\r\n      // // var curentUserEmail = decoded.email;\r\n      // socket.disconnect(true);\r\n      // usersModel.findOneAndUpdate({ \"email\": curentUserEmail }, { $set: { isActive: \"inactive\" } },\r\n      //   function(err, doc) {\r\n      //     if (err) {\r\n      //       // res.json(err);\r\n      //     } else {\r\n      //       //console.log(\"logout=>\", doc)\r\n      //     }\r\n      //   });\r\n\r\n      // // delete global.email;\r\n      // // email = null;\r\n      // users.forEach((item, index) => {\r\n      //   if (item && item.email == curentUserEmail) {\r\n      //     users.splice(index, 1);\r\n      //   }\r\n      // })\r\n      // delete socket.id;\r\n      // //console.log(\"After Disconnect Users List==>\", users);\r\n      // // delete users[keys[socket.id]];\r\n      // // delete keys[socket.id];\r\n      // io.emit('users', users);\r\n      // // //console.log(users);\r\n    });\r\n  });\r\n\r\n\r\n\r\n\r\n\r\n  app.post('/friend_request', function(req, res) {\r\n    res.setHeader('Access-Control-Allow-Origin', '*');\r\n    res.setHeader(\"Access-Control-Allow-Method\", \"'GET, POST, OPTIONS, PUT, PATCH, DELETE'\");\r\n    friend = true;\r\n    models.user.find({ \"handle\": req.body.my_handle, \"friends.name\": req.body.friend_handle }, function(err, doc) {\r\n      if (err) { res.json(err); } else if (doc.length != 0) {\r\n        //console.log(\"Friend request : \" + doc.length);\r\n        //console.log(\"Friend request : friend request already sent \" + doc);\r\n        res.send(\"Friend request already sent \");\r\n      } else {\r\n        //console.log(\"Friend request : \" + doc.length);\r\n        models.user.update({\r\n          handle: req.body.my_handle\r\n        }, {\r\n          $push: {\r\n            friends: {\r\n              name: req.body.friend_handle,\r\n              status: \"Pending\"\r\n            }\r\n          }\r\n        }, {\r\n          upsert: true\r\n        }, function(err, doc) {\r\n          if (err) { res.json(err); }\r\n          //            else{\r\n          //                //console.log(doc);\r\n          //            }\r\n        });\r\n        io.to(users[req.body.friend_handle]).emit('message', req.body);\r\n      }\r\n    });\r\n  });\r\n\r\n  app.post('/friend_request/confirmed', function(req, res) {\r\n    //console.log(\"friend request confirmed : \" + req.body);\r\n    if (req.body.confirm == \"Yes\") {\r\n      models.user.find({\r\n        \"handle\": req.body.friend_handle,\r\n        \"friends.name\": req.body.my_handle\r\n      }, function(err, doc) {\r\n        if (err) {\r\n          res.json(err);\r\n        } else if (doc.length != 0) {\r\n          //console.log(\"Friend request confirmed : \" + doc.length);\r\n          //console.log(\"Friend request confirmed : friend request already sent \" + doc);\r\n          res.send(\"Friend request already accepted\");\r\n        } else {\r\n          models.user.update({\r\n            \"handle\": req.body.my_handle,\r\n            \"friends.name\": req.body.friend_handle\r\n          }, {\r\n            '$set': {\r\n              \"friends.$.status\": \"Friend\"\r\n            }\r\n          }, function(err, doc) {\r\n            if (err) { res.json(err); } else {\r\n\r\n              //console.log(\"friend request confirmed : Inside yes confirmed\");\r\n              io.to(users[req.body.friend_handle]).emit('friend', req.body.my_handle);\r\n              io.to(users[req.body.my_handle]).emit('friend', req.body.friend_handle);\r\n            }\r\n          });\r\n          models.user.update({\r\n            handle: req.body.friend_handle\r\n          }, {\r\n            $push: {\r\n              friends: {\r\n                name: req.body.my_handle,\r\n                status: \"Friend\"\r\n              }\r\n            }\r\n          }, { upsert: true }, function(err, doc) {\r\n            if (err) { res.json(err); }\r\n            //            else{\r\n            //                //console.log(doc);\r\n            //            }\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n\r\n      //console.log(\"friend request confirmed : Inside No confirmed\");\r\n      models.user.update({\r\n        \"handle\": req.body.my_handle\r\n      }, {\r\n        '$pull': {\r\n          'friends': {\r\n            \"name\": req.body.friend_handle,\r\n          }\r\n        }\r\n      }, function(err, doc) {\r\n        if (err) { res.json(err); } else {\r\n          //console.log(\"No\");\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n}"]}
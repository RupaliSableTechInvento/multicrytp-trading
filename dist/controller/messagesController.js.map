{"version":3,"sources":["../../src/controller/messagesController.js"],"names":["path","require","bodyParser","users","keys","module","exports","app","io","console","log","use","json","urlencoded","extended","email","global","friends","pending","all_friends","curentUserEmail","on","socket","token","decoded","verify","App_key","isEmailFound","find","item","push","socketId","id","forEach","findOneAndUpdate","$set","isActive","_id","err","doc","list","slice","i","status","senderEmail","to","emit","msgObj","sender","data","dataObj","date","Date","create","message","reciever","msg","index","splice","post","req","res","setHeader","friend","models","user","body","my_handle","friend_handle","length","send","update","handle","$push","name","upsert","confirm"],"mappings":"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","file":"messagesController.js","sourcesContent":["import usersModel from '../models/usersModel'\r\nimport messagesModel from '../models/messagesModel'\r\nimport jwt from 'jsonwebtoken';\r\nimport env from \"../env\";\r\n\r\nimport { globalAgent } from 'http';\r\nvar path = require('path');\r\nvar bodyParser = require('body-parser');\r\nvar users = [];\r\nvar keys = {};\r\n\r\n\r\nmodule.exports = function(app, io) {\r\n  console.log(\"global\");\r\n  var app = app;\r\n  var io = io;\r\n  app.use(bodyParser.json());\r\n  app.use(bodyParser.urlencoded({\r\n    extended: true\r\n  }));\r\n\r\n  var email = global.email || null;\r\n  // var email = \"sablerupali358@gmail.com\"\r\n  console.log(\"Email id in messages Controller=>\", email);\r\n\r\n  var friends = [];\r\n  var pending = [];\r\n  var all_friends = [];\r\n  var curentUserEmail = '';\r\n\r\n  if (email) {\r\n    io.on('connection', function(socket) {\r\n      // socket.on('private_message', function(privateMsg) {\r\n      //   console.log(\"privateMsg1111\", privateMsg);\r\n      //   io.emit('private_message', 'hello');\r\n\r\n      // })\r\n\r\n      socket.on('getActiveList', function(token) {\r\n\r\n        console.log(\"getActiveList=>>\", token);\r\n        var decoded = jwt.verify(token, env.App_key);\r\n        curentUserEmail = decoded.email;\r\n        const isEmailFound = users.find(item => item && item.email && item.email == curentUserEmail);\r\n        console.log(\"isEmailFound in users\", users, isEmailFound);\r\n        if (!isEmailFound) {\r\n          users.push({\r\n            email: curentUserEmail,\r\n            socketId: socket.id\r\n          })\r\n          console.log(\"Email Not present=>\", users, curentUserEmail);\r\n        } else {\r\n\r\n          users.forEach(item => {\r\n            item.email = curentUserEmail,\r\n              item.socketId = socket.id\r\n          })\r\n          console.log(\"Email present=>\", users, curentUserEmail);\r\n        }\r\n\r\n\r\n\r\n        if (curentUserEmail) {\r\n          usersModel.findOneAndUpdate({ \"email\": curentUserEmail }, { $set: { isActive: \"active\" } }, { friends: 1, _id: 0 }, function(err, doc) {\r\n            if (err) {\r\n              console.log(\"error in io connection.=>\", err);\r\n              // res.json(err); \r\n\r\n            } else {\r\n              friends = [];\r\n              pending = [];\r\n              all_friends = [];\r\n              // console.log(\"friends list: \" + doc);\r\n              var list = doc.friends.slice();\r\n              console.log(list);\r\n\r\n              for (var i in list) {\r\n                if (list[i].status == \"Friend\") {\r\n                  friends.push(list[i]);\r\n                  // console.log(\"users[list[i].senderEmail]\", users, users[list[i].senderEmail]);\r\n                  users.forEach(item => {\r\n                    if (item.curentUserEmail && list[i].senderEmail == item.curentUserEmail) {\r\n                      console.log(\"email found\", item.socketId, curentUserEmail);\r\n                      io.to(item.socketId).emit('friend_me', curentUserEmail);\r\n                      io.emit('friend_all', curentUserEmail);\r\n                    }\r\n                  })\r\n\r\n                } else if (list[i].status == \"Pending\") {\r\n                  pending.push(list[i]);\r\n                } else {\r\n                  continue;\r\n                }\r\n              }\r\n\r\n              // console.log(\"pending list: \" + pending);\r\n              // console.log(\"friends list: \" + friends);\r\n              io.to(socket.id).emit('friend_list', friends);\r\n              io.to(socket.id).emit('pending_list', pending);\r\n\r\n\r\n              //  io.emit('users', users);\r\n            }\r\n          });\r\n        }\r\n\r\n\r\n      })\r\n      socket.on('private_message', function(msgObj) {\r\n        console.log(\"private message\", msgObj);\r\n\r\n        var decoded = jwt.verify(msgObj.token, env.App_key);\r\n        var sender = decoded.email;\r\n        console.log(\"in addmessage\");\r\n        var data = msgObj.dataObj;\r\n        data.sender = sender;\r\n        data.date = new Date();\r\n        console.log(\"Data for message==>\", data);\r\n        messagesModel.create(data, function(err, message) {\r\n          if (err) { console.log(\"Error in add message\", err) } else {\r\n\r\n            console.log(\"  message added..\", users[msgObj.dataObj.reciever]);\r\n\r\n            io.to(users[msgObj.dataObj.reciever]).emit('private_message', msgObj);\r\n          }\r\n        })\r\n      });\r\n\r\n\r\n      console.log(\"Connection :User is connected  \", socket.id, email);\r\n\r\n      io.to(socket.id).emit('handle', email);\r\n\r\n\r\n      // const isEmailFound = users.find(item => item && item.email && item.email == email);\r\n\r\n      console.log(\"users\", users);\r\n      // users[email] = socket.id;\r\n      keys[socket.id] = email;\r\n      console.log(\"Users list : \" + users);\r\n      console.log(\"keys list : \" + keys);\r\n\r\n\r\n      socket.on('group message', function(msg) {\r\n        // console.log(msg);\r\n        io.emit('group', msg);\r\n      });\r\n\r\n\r\n\r\n      // socket.on('private_message', function(msgObj) {\r\n      //   console.log(\"private message\", msgObj);\r\n\r\n\r\n      //   var decoded = jwt.verify(msgObj.token, env.App_key);\r\n      //   var sender = decoded.email;\r\n      //   console.log(\"in addmessage\");\r\n      //   var data = msgObj.dataObj;\r\n      //   data.sender = sender;\r\n      //   data.date = new Date();\r\n      //   console.log(\"Data for message==>\", data);\r\n      //   messagesModel.create(data, function(err, message) {\r\n      //     if (err) { console.log(\"Error in add message\", err) } else {\r\n\r\n      //       console.log(\"  message added..\", users[msgObj.dataObj.reciever]);\r\n\r\n      //       io.to(users[msgObj.dataObj.reciever]).emit('private_message', msgObj);\r\n      //     }\r\n      //   })\r\n      // });\r\n\r\n\r\n\r\n      // socket.on('private message', function(msg) {\r\n      //   console.log('message  :' + msg.split(\"#*@\")[0]);\r\n      //   models.messages.create({\r\n      //     \"message\": msg.split(\"#*@\")[1],\r\n      //     \"sender\": msg.split(\"#*@\")[2],\r\n      //     \"reciever\": msg.split(\"#*@\")[0],\r\n      //     \"date\": new Date()\r\n      //   });\r\n      //   io.to(users[msg.split(\"#*@\")[0]]).emit('private message', msg);\r\n      // });\r\n\r\n      socket.on('disconnect', function() {\r\n        console.log(\"disconned call\", socket.id);\r\n        // var decoded = jwt.verify(token, env.App_key);\r\n        // var curentUserEmail = decoded.email;\r\n        usersModel.findOneAndUpdate({ \"email\": curentUserEmail }, { $set: { isActive: \"inactive\" } },\r\n          function(err, doc) {\r\n            if (err) {\r\n              // res.json(err);\r\n            } else {\r\n              console.log(\"logout=>\", doc)\r\n            }\r\n          });\r\n\r\n        // delete global.email;\r\n        // email = null;\r\n        users.forEach((item, index) => {\r\n            if (item && item.curentUserEmail == curentUserEmail) {\r\n\r\n              users.splice(index, 1);\r\n            }\r\n          })\r\n          // delete users[keys[socket.id]];\r\n        delete keys[socket.id];\r\n        io.emit('users', users);\r\n        // console.log(users);\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n\r\n\r\n  app.post('/friend_request', function(req, res) {\r\n    res.setHeader('Access-Control-Allow-Origin', '*');\r\n    res.setHeader(\"Access-Control-Allow-Method\", \"'GET, POST, OPTIONS, PUT, PATCH, DELETE'\");\r\n    friend = true;\r\n    models.user.find({ \"handle\": req.body.my_handle, \"friends.name\": req.body.friend_handle }, function(err, doc) {\r\n      if (err) { res.json(err); } else if (doc.length != 0) {\r\n        console.log(\"Friend request : \" + doc.length);\r\n        console.log(\"Friend request : friend request already sent \" + doc);\r\n        res.send(\"Friend request already sent \");\r\n      } else {\r\n        console.log(\"Friend request : \" + doc.length);\r\n        models.user.update({\r\n          handle: req.body.my_handle\r\n        }, {\r\n          $push: {\r\n            friends: {\r\n              name: req.body.friend_handle,\r\n              status: \"Pending\"\r\n            }\r\n          }\r\n        }, {\r\n          upsert: true\r\n        }, function(err, doc) {\r\n          if (err) { res.json(err); }\r\n          //            else{\r\n          //                console.log(doc);\r\n          //            }\r\n        });\r\n        io.to(users[req.body.friend_handle]).emit('message', req.body);\r\n      }\r\n    });\r\n  });\r\n\r\n  app.post('/friend_request/confirmed', function(req, res) {\r\n    console.log(\"friend request confirmed : \" + req.body);\r\n    if (req.body.confirm == \"Yes\") {\r\n      models.user.find({\r\n        \"handle\": req.body.friend_handle,\r\n        \"friends.name\": req.body.my_handle\r\n      }, function(err, doc) {\r\n        if (err) {\r\n          res.json(err);\r\n        } else if (doc.length != 0) {\r\n          console.log(\"Friend request confirmed : \" + doc.length);\r\n          console.log(\"Friend request confirmed : friend request already sent \" + doc);\r\n          res.send(\"Friend request already accepted\");\r\n        } else {\r\n          models.user.update({\r\n            \"handle\": req.body.my_handle,\r\n            \"friends.name\": req.body.friend_handle\r\n          }, {\r\n            '$set': {\r\n              \"friends.$.status\": \"Friend\"\r\n            }\r\n          }, function(err, doc) {\r\n            if (err) { res.json(err); } else {\r\n\r\n              console.log(\"friend request confirmed : Inside yes confirmed\");\r\n              io.to(users[req.body.friend_handle]).emit('friend', req.body.my_handle);\r\n              io.to(users[req.body.my_handle]).emit('friend', req.body.friend_handle);\r\n            }\r\n          });\r\n          models.user.update({\r\n            handle: req.body.friend_handle\r\n          }, {\r\n            $push: {\r\n              friends: {\r\n                name: req.body.my_handle,\r\n                status: \"Friend\"\r\n              }\r\n            }\r\n          }, { upsert: true }, function(err, doc) {\r\n            if (err) { res.json(err); }\r\n            //            else{\r\n            //                console.log(doc);\r\n            //            }\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n\r\n      console.log(\"friend request confirmed : Inside No confirmed\");\r\n      models.user.update({\r\n        \"handle\": req.body.my_handle\r\n      }, {\r\n        '$pull': {\r\n          'friends': {\r\n            \"name\": req.body.friend_handle,\r\n          }\r\n        }\r\n      }, function(err, doc) {\r\n        if (err) { res.json(err); } else {\r\n          console.log(\"No\");\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n}"]}
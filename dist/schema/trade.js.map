{"version":3,"sources":["../../src/schema/trade.js"],"names":["postTradeSchema","Schema","tradeMethod","type","String","uppercase","traderType","cryptoCurrency","location","payment_method","currency","margin","Number","price_equation","min_trans_limit","max_trans_limit","opening_hours","sunday","start","end","monday","tuesday","wednesday","thursday","friday","saturday","terms_of_trade","payment_details","minimum_volume","minimum_feedback","new_buyer_limit","transaction_volume_coefficient","display_reference","reference_type","payment_window","track_liquidity","identified_people_only","identify_user_before","real_name_required","sms_verification_required","trusted_people_only","user","firstName","plugin"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,kBAAkB,IAAI,mBAASC,MAAb,CAAoB;;AAE1CC,eAAa,EAAE;AACbC,UAAMC,MADK,EACG;AACdC,eAAW;AAFA,GAF6B;AAM1CC,cAAY,EAAE;AACZH,UAAMC,MADI;AAEVC,eAAW;AAFD,GAN8B;AAU1CE,kBAAgB;AACdJ,UAAMC,MADQ;AAEdC,eAAW;AAFG,GAV0B;AAc1CG,YAAU;AACRL,UAAMC;AADE,GAdgC;AAiB1CK,kBAAgB;AACdN,UAAMC;AADQ,GAjB0B;AAoB1CM,YAAU;AACRP,UAAMC;AADE,GApBgC;AAuB1CO,UAAQ;AACNR,UAAMS;AADA,GAvBkC;AA0B1CC,kBAAgB;AACdV,UAAMC;AADQ,GA1B0B;AA6B1CU,mBAAiB;AACfX,UAAMS;AADS,GA7ByB;AAgC1CG,mBAAiB;AACfZ,UAAMS;AADS,GAhCyB;;AAoC1CI,iBAAe;AACbC,YAAQ;AACNC,aAAO;AACLf,cAAMC;AADD,OADD;AAINe,WAAK;AACHhB,cAAMC;AADH;AAJC,KADK;AASbgB,YAAQ;AACNF,aAAO;AACLf,cAAMC;AADD,OADD;AAINe,WAAK;AACHhB,cAAMC;AADH;AAJC,KATK;AAiBbiB,aAAS;AACPH,aAAO;AACLf,cAAMC;AADD,OADA;AAIPe,WAAK;AACHhB,cAAMC;AADH;AAJE,KAjBI;AAyBbkB,eAAW;AACTJ,aAAO;AACLf,cAAMC;AADD,OADE;AAITe,WAAK;AACHhB,cAAMC;AADH;AAJI,KAzBE;AAiCbmB,cAAU;AACRL,aAAO;AACLf,cAAMC;AADD,OADC;AAIRe,WAAK;AACHhB,cAAMC;AADH;AAJG,KAjCG;AAyCboB,YAAQ;AACNN,aAAO;AACLf,cAAMC;AADD,OADD;AAINe,WAAK;AACHhB,cAAMC;AADH;AAJC,KAzCK;AAiDbqB,cAAU;AACRP,aAAO;AACLf,cAAMC;AADD,OADC;AAIRe,WAAK;AACHhB,cAAMC;AADH;AAJG;AAjDG,GApC2B;AA8F1CsB,kBAAgB;AACdvB,UAAMC;AADQ,GA9F0B;AAiG1CuB,mBAAiB;AACfxB,UAAMC;AADS,GAjGyB;AAoG1CwB,kBAAgB;AACdzB,UAAMS;AADQ,GApG0B;AAuG1CiB,oBAAkB;AAChB1B,UAAMS;AADU,GAvGwB;AA0G1CkB,mBAAiB;AACf3B,UAAMS;AADS,GA1GyB;AA6G1CmB,kCAAgC;AAC9B5B,UAAMS;AADwB,GA7GU;AAgH1CoB,qBAAmB;AACjB7B,UAAMC;AADW,GAhHuB;AAmH1C6B,kBAAgB;AACd9B,UAAMC;AADQ,GAnH0B;;AAuH1C8B,kBAAgB;AACd/B,UAAMC;AADQ,GAvH0B;AA0H1C+B,mBAAiB;AACfhC,UAAMC;AADS,GA1HyB;AA6H1CgC,0BAAwB;AACtBjC,UAAMC;AADgB,GA7HkB;AAgI1CiC,wBAAsB;AACpBlC,UAAMC;AADc,GAhIoB;AAmI1CkC,sBAAoB;AAClBnC,UAAMC;AADY,GAnIsB;AAsI1CmC,6BAA2B;AACzBpC,UAAMC;AADmB,GAtIe;AAyI1CoC,uBAAqB;AACnBrC,UAAMC;AADa,GAzIqB;AA4I1CqC,QAAM;AACJtC,UAAMC;AADF,GA5IoC;AA+I1CsC,aAAW;AACTvC,UAAMC;AADG;AA/I+B,CAApB,CAAxB;;AAoJAJ,gBAAgB2C,MAAhB;;AAEA;;;;;kBAKe3C,e","file":"trade.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport uniqueValidator from 'mongoose-unique-validator';\r\nimport autoIncrement from \"mongoose-auto-increment\";\r\n\r\nconst postTradeSchema = new mongoose.Schema({\r\n\r\n  tradeMethod: { // local or online\r\n    type: String, //LOCAL_SELL\r\n    uppercase: true\r\n  },\r\n  traderType: { // sell or buy\r\n    type: String,\r\n    uppercase: true\r\n  },\r\n  cryptoCurrency: {\r\n    type: String,\r\n    uppercase: true\r\n  },\r\n  location: {\r\n    type: String,\r\n  },\r\n  payment_method: {\r\n    type: String,\r\n  },\r\n  currency: {\r\n    type: String,\r\n  },\r\n  margin: {\r\n    type: Number,\r\n  },\r\n  price_equation: {\r\n    type: String,\r\n  },\r\n  min_trans_limit: {\r\n    type: Number,\r\n  },\r\n  max_trans_limit: {\r\n    type: Number,\r\n  },\r\n\r\n  opening_hours: {\r\n    sunday: {\r\n      start: {\r\n        type: String,\r\n      },\r\n      end: {\r\n        type: String,\r\n      },\r\n    },\r\n    monday: {\r\n      start: {\r\n        type: String,\r\n      },\r\n      end: {\r\n        type: String,\r\n      },\r\n    },\r\n    tuesday: {\r\n      start: {\r\n        type: String,\r\n      },\r\n      end: {\r\n        type: String,\r\n      },\r\n    },\r\n    wednesday: {\r\n      start: {\r\n        type: String,\r\n      },\r\n      end: {\r\n        type: String,\r\n      },\r\n    },\r\n    thursday: {\r\n      start: {\r\n        type: String,\r\n      },\r\n      end: {\r\n        type: String,\r\n      },\r\n    },\r\n    friday: {\r\n      start: {\r\n        type: String,\r\n      },\r\n      end: {\r\n        type: String,\r\n      },\r\n    },\r\n    saturday: {\r\n      start: {\r\n        type: String,\r\n      },\r\n      end: {\r\n        type: String,\r\n      },\r\n    },\r\n  },\r\n  terms_of_trade: {\r\n    type: String,\r\n  },\r\n  payment_details: {\r\n    type: String,\r\n  },\r\n  minimum_volume: {\r\n    type: Number,\r\n  },\r\n  minimum_feedback: {\r\n    type: Number,\r\n  },\r\n  new_buyer_limit: {\r\n    type: Number,\r\n  },\r\n  transaction_volume_coefficient: {\r\n    type: Number,\r\n  },\r\n  display_reference: {\r\n    type: String,\r\n  },\r\n  reference_type: {\r\n    type: String,\r\n  },\r\n\r\n  payment_window: {\r\n    type: String,\r\n  },\r\n  track_liquidity: {\r\n    type: String,\r\n  },\r\n  identified_people_only: {\r\n    type: String,\r\n  },\r\n  identify_user_before: {\r\n    type: String,\r\n  },\r\n  real_name_required: {\r\n    type: String,\r\n  },\r\n  sms_verification_required: {\r\n    type: String,\r\n  },\r\n  trusted_people_only: {\r\n    type: String,\r\n  },\r\n  user: {\r\n    type: String,\r\n  },\r\n  firstName: {\r\n    type: String,\r\n  }\r\n});\r\n\r\npostTradeSchema.plugin(uniqueValidator);\r\n\r\n/* const buySell = new mongoose.Schema({\r\n  _id: Schema.ObjectId,\r\n  id: String,\r\n  value: string,\r\n}) */\r\nexport default postTradeSchema;"]}
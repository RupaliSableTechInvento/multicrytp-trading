{"version":3,"sources":["../../src/schema/trade.js"],"names":["postTradeSchema","Schema","tradeMethod","type","String","uppercase","traderType","cryptoCurrency","location","payment_method","more_information","currency","bank_name","margin","Number","default","price_equation","max_trans_limit","min_trans_limit","opening_hours","sunday","start","end","monday","tuesday","wednesday","thursday","friday","saturday","terms_of_trade","online_selling","minimum_volume","minimum_feedback","new_buyer_limit","transaction_volume_coefficient","display_reference","reference_type","payment_window","liquidity_options","track_liquidity","security_options","identified_people_only","identify_user_before","real_name_required","sms_verification_required","trusted_people_only","user","firstName","plugin"],"mappings":"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","file":"trade.js","sourcesContent":["/* import mongoose from 'mongoose';\r\nimport uniqueValidator from 'mongoose-unique-validator';\r\nimport autoIncrement from \"mongoose-auto-increment\";\r\n\r\nconst postTradeSchema = new mongoose.Schema({\r\n\r\n  tradeMethod: { // local or online\r\n    type: String, //LOCAL_SELL\r\n    uppercase: true\r\n  },\r\n  traderType: { // sell or buy\r\n    type: String,\r\n    uppercase: true\r\n  },\r\n  cryptoCurrency: {\r\n    type: String,\r\n    uppercase: true\r\n  },\r\n  location: {\r\n    type: String,\r\n  },\r\n  payment_method: {\r\n    type: String,\r\n  },\r\n  currency: {\r\n    type: String,\r\n  },\r\n  margin: {\r\n    type: Number,\r\n  },\r\n  price_equation: {\r\n    type: String,\r\n  },\r\n  min_trans_limit: {\r\n    type: Number,\r\n  },\r\n  max_trans_limit: {\r\n    type: Number,\r\n  },\r\n\r\n  opening_hours: {\r\n    sunday: {\r\n      start: {\r\n        type: String,\r\n      },\r\n      end: {\r\n        type: String,\r\n      },\r\n    },\r\n    monday: {\r\n      start: {\r\n        type: String,\r\n      },\r\n      end: {\r\n        type: String,\r\n      },\r\n    },\r\n    tuesday: {\r\n      start: {\r\n        type: String,\r\n      },\r\n      end: {\r\n        type: String,\r\n      },\r\n    },\r\n    wednesday: {\r\n      start: {\r\n        type: String,\r\n      },\r\n      end: {\r\n        type: String,\r\n      },\r\n    },\r\n    thursday: {\r\n      start: {\r\n        type: String,\r\n      },\r\n      end: {\r\n        type: String,\r\n      },\r\n    },\r\n    friday: {\r\n      start: {\r\n        type: String,\r\n      },\r\n      end: {\r\n        type: String,\r\n      },\r\n    },\r\n    saturday: {\r\n      start: {\r\n        type: String,\r\n      },\r\n      end: {\r\n        type: String,\r\n      },\r\n    },\r\n  },\r\n  terms_of_trade: {\r\n    type: String,\r\n  },\r\n  payment_details: {\r\n    type: String,\r\n  },\r\n  minimum_volume: {\r\n    type: Number,\r\n  },\r\n  minimum_feedback: {\r\n    type: Number,\r\n  },\r\n  new_buyer_limit: {\r\n    type: Number,\r\n  },\r\n  transaction_volume_coefficient: {\r\n    type: Number,\r\n  },\r\n  display_reference: {\r\n    type: String,\r\n  },\r\n  reference_type: {\r\n    type: String,\r\n  },\r\n\r\n  payment_window: {\r\n    type: String,\r\n  },\r\n  track_liquidity: {\r\n    type: String,\r\n  },\r\n  identified_people_only: {\r\n    type: String,\r\n  },\r\n  identify_user_before: {\r\n    type: String,\r\n  },\r\n  real_name_required: {\r\n    type: String,\r\n  },\r\n  sms_verification_required: {\r\n    type: String,\r\n  },\r\n  trusted_people_only: {\r\n    type: String,\r\n  },\r\n  user: {\r\n    type: String,\r\n  },\r\n  firstName: {\r\n    type: String,\r\n  }\r\n});\r\n\r\npostTradeSchema.plugin(uniqueValidator);\r\n\r\n/* const buySell = new mongoose.Schema({\r\n  _id: Schema.ObjectId,\r\n  id: String,\r\n  value: string,\r\n}) */\r\n\r\n\r\nimport mongoose from 'mongoose';\r\nimport uniqueValidator from 'mongoose-unique-validator';\r\nimport autoIncrement from \"mongoose-auto-increment\";\r\n\r\nconst postTradeSchema = new mongoose.Schema({\r\n\r\n  tradeMethod: { // local or online\r\n    type: String, //LOCAL_SELL\r\n    uppercase: true\r\n  },\r\n  traderType: { // sell or buy\r\n    type: String,\r\n    uppercase: true\r\n  },\r\n  cryptoCurrency: {\r\n    type: String,\r\n    uppercase: true\r\n  },\r\n  location: {\r\n    type: String,\r\n  },\r\n  payment_method: {\r\n    type: String,\r\n  },\r\n\r\n  more_information: {\r\n    currency: {\r\n      type: String,\r\n    },\r\n    bank_name: {\r\n      type: String,\r\n    },\r\n    margin: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    price_equation: {\r\n      type: String,\r\n      default: 0\r\n    },\r\n    max_trans_limit: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    min_trans_limit: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    opening_hours: {\r\n      sunday: {\r\n        start: {\r\n          type: String,\r\n          default: ''\r\n        },\r\n        end: {\r\n          type: String,\r\n          default: ''\r\n        },\r\n      },\r\n      monday: {\r\n        start: {\r\n          type: String,\r\n          default: ''\r\n        },\r\n        end: {\r\n          type: String,\r\n          default: ''\r\n        },\r\n      },\r\n      tuesday: {\r\n        start: {\r\n          type: String,\r\n          default: ''\r\n        },\r\n        end: {\r\n          type: String,\r\n          default: ''\r\n        },\r\n      },\r\n      wednesday: {\r\n        start: {\r\n          type: String,\r\n          default: ''\r\n        },\r\n        end: {\r\n          type: String,\r\n          default: ''\r\n        },\r\n      },\r\n      thursday: {\r\n        start: {\r\n          type: String,\r\n          default: ''\r\n        },\r\n        end: {\r\n          type: String,\r\n          default: ''\r\n        },\r\n      },\r\n      friday: {\r\n        start: {\r\n          type: String,\r\n          default: ''\r\n        },\r\n        end: {\r\n          type: String,\r\n          default: ''\r\n        },\r\n      },\r\n      saturday: {\r\n        start: {\r\n          type: String,\r\n          default: ''\r\n        },\r\n        end: {\r\n          type: String,\r\n          default: ''\r\n        },\r\n      },\r\n    },\r\n    terms_of_trade: {\r\n      type: String,\r\n      default: 'No terms of Trade added'\r\n    },\r\n  },\r\n  online_selling: {\r\n\r\n    minimum_volume: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    minimum_feedback: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    new_buyer_limit: {\r\n      type: Number,\r\n    },\r\n    transaction_volume_coefficient: {\r\n      type: Number,\r\n    },\r\n    display_reference: {\r\n      type: String,\r\n    },\r\n    reference_type: {\r\n      type: String,\r\n    },\r\n  },\r\n  payment_window: {\r\n    type: String,\r\n    default: '90',\r\n  },\r\n  liquidity_options: {\r\n    track_liquidity: {\r\n      type: String,\r\n    },\r\n  },\r\n  security_options: {\r\n    identified_people_only: {\r\n      type: String,\r\n    },\r\n    identify_user_before: {\r\n      type: String,\r\n    },\r\n    real_name_required: {\r\n      type: String,\r\n    },\r\n    sms_verification_required: {\r\n      type: String,\r\n    },\r\n    trusted_people_only: {\r\n      type: String,\r\n    },\r\n  },\r\n  user: {\r\n    type: String,\r\n  },\r\n  firstName: {\r\n    type: String,\r\n  }\r\n});\r\n\r\npostTradeSchema.plugin(uniqueValidator);\r\n\r\n/* const buySell = new mongoose.Schema({\r\n  _id: Schema.ObjectId,\r\n  id: String,\r\n  value: string,\r\n}) */\r\nexport default postTradeSchema;\r\n\r\n// export default postTradeSchema;"]}